// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gql

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/lucasshuan/b2c-ecommerce-api/internal/model"
)

type AddProductToCartInput struct {
	CartID    uint `json:"cartId"`
	ProductID uint `json:"productId"`
	Quantity  int  `json:"quantity"`
}

type AuthPayload struct {
	Token *string `json:"token,omitempty"`
	User  *User   `json:"user,omitempty"`
}

type ChangePasswordInput struct {
	OldPassword     string `json:"oldPassword"`
	NewPassword     string `json:"newPassword"`
	ConfirmPassword string `json:"confirmPassword"`
}

type CreateCartInput struct {
	IsActive bool    `json:"isActive"`
	Value    float64 `json:"value"`
	UserID   uint    `json:"userId"`
}

type CreateCategoryInput struct {
	Name string `json:"name"`
}

type CreateOrderInput struct {
	Value  float64 `json:"value"`
	CartID uint    `json:"cartId"`
}

type CreateProductInput struct {
	Name        string  `json:"name"`
	Price       float64 `json:"price"`
	Description *string `json:"description,omitempty"`
}

type CreateUserInput struct {
	Name     string `json:"name"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

type ListProductsInput struct {
	Name  *string        `json:"name,omitempty"`
	Price *float64       `json:"price,omitempty"`
	Order *string        `json:"order,omitempty"`
	Sort  *SortDirection `json:"sort,omitempty"`
}

type LoginInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type Order struct {
	ID            uint           `json:"id"`
	Value         float64        `json:"value"`
	PaymentStatus *PaymentStatus `json:"paymentStatus,omitempty"`
	BillingType   *BillingType   `json:"billingType,omitempty"`
	Cart          model.Cart     `json:"cart"`
	User          *User          `json:"user"`
	CreatedAt     time.Time      `json:"created_at"`
	UpdatedAt     time.Time      `json:"updated_at"`
}

type Product struct {
	ID          uint            `json:"id"`
	Name        string          `json:"name"`
	Price       float64         `json:"price"`
	Description *string         `json:"description,omitempty"`
	CategoryID  *uint           `json:"categoryID,omitempty"`
	Category    *model.Category `json:"category,omitempty"`
	Carts       []*model.Cart   `json:"carts,omitempty"`
	CreatedAt   time.Time       `json:"created_at"`
	UpdatedAt   time.Time       `json:"updated_at"`
}

type ResetPasswordInput struct {
	Token           string `json:"token"`
	Password        string `json:"password"`
	ConfirmPassword string `json:"confirmPassword"`
}

type SignInInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type UpdateCategoryInput struct {
	ID   uint    `json:"id"`
	Name *string `json:"name,omitempty"`
}

type UpdateProductInput struct {
	ID          uint     `json:"id"`
	Name        *string  `json:"name,omitempty"`
	Price       *float64 `json:"price,omitempty"`
	Description *string  `json:"description,omitempty"`
}

type UpdateUserInput struct {
	ID    uint    `json:"id"`
	Name  *string `json:"name,omitempty"`
	Email *string `json:"email,omitempty"`
}

type User struct {
	ID        uint          `json:"id"`
	Name      string        `json:"name"`
	Email     string        `json:"email"`
	Cart      []*model.Cart `json:"cart,omitempty"`
	Orders    []*Order      `json:"orders,omitempty"`
	CreatedAt time.Time     `json:"created_at"`
	UpdatedAt time.Time     `json:"updated_at"`
}

type BillingType string

const (
	BillingTypeBoleto     BillingType = "BOLETO"
	BillingTypePix        BillingType = "PIX"
	BillingTypeCreditCard BillingType = "CREDIT_CARD"
	BillingTypeDebitCard  BillingType = "DEBIT_CARD"
)

var AllBillingType = []BillingType{
	BillingTypeBoleto,
	BillingTypePix,
	BillingTypeCreditCard,
	BillingTypeDebitCard,
}

func (e BillingType) IsValid() bool {
	switch e {
	case BillingTypeBoleto, BillingTypePix, BillingTypeCreditCard, BillingTypeDebitCard:
		return true
	}
	return false
}

func (e BillingType) String() string {
	return string(e)
}

func (e *BillingType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BillingType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BillingType", str)
	}
	return nil
}

func (e BillingType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PaymentStatus string

const (
	PaymentStatusPending   PaymentStatus = "PENDING"
	PaymentStatusConfirmed PaymentStatus = "CONFIRMED"
	PaymentStatusOverdue   PaymentStatus = "OVERDUE"
)

var AllPaymentStatus = []PaymentStatus{
	PaymentStatusPending,
	PaymentStatusConfirmed,
	PaymentStatusOverdue,
}

func (e PaymentStatus) IsValid() bool {
	switch e {
	case PaymentStatusPending, PaymentStatusConfirmed, PaymentStatusOverdue:
		return true
	}
	return false
}

func (e PaymentStatus) String() string {
	return string(e)
}

func (e *PaymentStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PaymentStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PaymentStatus", str)
	}
	return nil
}

func (e PaymentStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortDirection string

const (
	SortDirectionAsc  SortDirection = "ASC"
	SortDirectionDesc SortDirection = "DESC"
)

var AllSortDirection = []SortDirection{
	SortDirectionAsc,
	SortDirectionDesc,
}

func (e SortDirection) IsValid() bool {
	switch e {
	case SortDirectionAsc, SortDirectionDesc:
		return true
	}
	return false
}

func (e SortDirection) String() string {
	return string(e)
}

func (e *SortDirection) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortDirection", str)
	}
	return nil
}

func (e SortDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
