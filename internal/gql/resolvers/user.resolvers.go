package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"

	"github.com/lucasshuan/b2c-ecommerce-api/internal/gql"
	"github.com/lucasshuan/b2c-ecommerce-api/internal/model"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input gql.CreateUserInput) (*gql.User, error) {
	user := &model.User{
		Name:  input.Name,
		Email: input.Email,
	}

	err := r.UserService.CreateUser(user, input.Password)
	if err != nil {
		return nil, err
	}

	return &gql.User{
		ID:        user.ID,
		Name:      user.Name,
		Email:     user.Email,
		CreatedAt: user.CreatedAt,
		UpdatedAt: user.UpdatedAt,
	}, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, input gql.UpdateUserInput) (*gql.User, error) {
	user := &model.User{
		Name:  *input.Name,
		Email: *input.Email,
	}
	user.ID = input.ID

	err := r.UserService.UpdateUser(user, "")
	if err != nil {
		return nil, err
	}
	return &gql.User{
		ID:        input.ID,
		Name:      user.Name,
		Email:     user.Email,
		CreatedAt: user.CreatedAt,
		UpdatedAt: user.UpdatedAt,
	}, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id uint) (bool, error) {
	user := &model.User{}
	user.ID = id

	err := r.UserService.DeleteUser(user)
	if err != nil {
		return false, err
	}

	return true, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id uint) (*gql.User, error) {
	user, err := r.UserService.FindUserByID(id)
	if err != nil {
		return nil, err
	}

	return &gql.User{
		ID:        id,
		Name:      user.Name,
		Email:     user.Email,
		CreatedAt: user.CreatedAt,
		UpdatedAt: user.UpdatedAt,
	}, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*gql.User, error) {
	panic("not implemented")
}
