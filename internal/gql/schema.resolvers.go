package gql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"fmt"
	"strconv"

	"github.com/nobeluc/ecommerce-api/internal/repository"
)

// CreateCategory is the resolver for the createCategory field.
func (r *mutationResolver) CreateCategory(ctx context.Context, input CreateCategoryInput) (*Category, error) {
	panic(fmt.Errorf("not implemented: CreateCategory - createCategory"))
}

// UpdateCategory is the resolver for the updateCategory field.
func (r *mutationResolver) UpdateCategory(ctx context.Context, input UpdateCategoryInput) (*Category, error) {
	panic(fmt.Errorf("not implemented: UpdateCategory - updateCategory"))
}

// DeleteCategory is the resolver for the deleteCategory field.
func (r *mutationResolver) DeleteCategory(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteCategory - deleteCategory"))
}

// CreateProduct is the resolver for the createProduct field.
func (r *mutationResolver) CreateProduct(ctx context.Context, input CreateProductInput) (*Product, error) {
	panic(fmt.Errorf("not implemented: CreateProduct - createProduct"))
}

// UpdateProduct is the resolver for the updateProduct field.
func (r *mutationResolver) UpdateProduct(ctx context.Context, input UpdateProductInput) (*Product, error) {
	panic(fmt.Errorf("not implemented: UpdateProduct - updateProduct"))
}

// DeleteProduct is the resolver for the deleteProduct field.
func (r *mutationResolver) DeleteProduct(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteProduct - deleteProduct"))
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, loginInput LoginInput) (*User, error) {
	panic(fmt.Errorf("not implemented: Login - login"))
}

// RegisterUser is the resolver for the registerUser field.
func (r *mutationResolver) RegisterUser(ctx context.Context, input CreateUserInput) (*User, error) {
	panic(fmt.Errorf("not implemented: Login - login"))
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, input UpdateUserInput) (*User, error) {
	panic(fmt.Errorf("not implemented: UpdateUser - updateUser"))
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteUser - deleteUser"))
}

// CreateOrder is the resolver for the createOrder field.
func (r *mutationResolver) CreateOrder(ctx context.Context, input CreateOrderInput) (*Order, error) {
	panic(fmt.Errorf("not implemented: CreateOrder - createOrder"))
}

// DeleteOrder is the resolver for the deleteOrder field.
func (r *mutationResolver) DeleteOrder(ctx context.Context, id string) (*Order, error) {
	panic(fmt.Errorf("not implemented: DeleteOrder - deleteOrder"))
}

// CreateCart is the resolver for the createCart field.
func (r *mutationResolver) CreateCart(ctx context.Context, input CreateCartInput) (*Cart, error) {
	panic(fmt.Errorf("not implemented: CreateCart - createCart"))
}

// AddProductToCart is the resolver for the addProductToCart field.
func (r *mutationResolver) AddProductToCart(ctx context.Context, input AddProductToCartInput) (*CartProduct, error) {
	panic(fmt.Errorf("not implemented: AddProductToCart - addProductToCart"))
}

// RemoveProductFromCart is the resolver for the removeProductFromCart field.
func (r *mutationResolver) RemoveProductFromCart(ctx context.Context, cartProductID string) (*Cart, error) {
	panic(fmt.Errorf("not implemented: RemoveProductFromCart - removeProductFromCart"))
}

// GetCategory is the resolver for the getCategory field.
func (r *queryResolver) GetCategory(ctx context.Context, id string) (*Category, error) {
	panic(fmt.Errorf("not implemented: GetCategory - getCategory"))
}

// ListCategories is the resolver for the listCategories field.
func (r *queryResolver) ListCategories(ctx context.Context) ([]*Category, error) {
	panic(fmt.Errorf("not implemented: ListCategories - listCategories"))
}

// GetProduct is the resolver for the getProduct field.
func (r *queryResolver) GetProduct(ctx context.Context, id string) (*Product, error) {
	panic(fmt.Errorf("not implemented: GetProduct - getProduct"))
}

// ListProducts is the resolver for the listProducts field.
func (r *queryResolver) ListProducts(ctx context.Context, input *ListProductsInput) ([]*Product, error) {
	panic(fmt.Errorf("not implemented: ListProducts - listProducts"))
}

// GetUsers is the resolver for the getUsers field.
func (r *queryResolver) GetUsers(ctx context.Context) ([]*User, error) {
	panic(fmt.Errorf("not implemented: GetUsers - getUsers"))
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context, id string) (*User, error) {
	uid, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}
	repo := repository.NewUserRepository(r.DB)
	user, err := repo.FindUserById(uint(uid))
	if err != nil {
		return nil, err
	}
	res := &User{
		ID:   id,
		Name: user.Name,
	}
	return res, nil
}

// GetOrder is the resolver for the getOrder field.
func (r *queryResolver) GetOrder(ctx context.Context, id string) (*Order, error) {
	panic(fmt.Errorf("not implemented: GetOrder - getOrder"))
}

// GetOrders is the resolver for the getOrders field.
func (r *queryResolver) GetOrders(ctx context.Context, userID string) ([]*Order, error) {
	panic(fmt.Errorf("not implemented: GetOrders - getOrders"))
}

// GetCart is the resolver for the getCart field.
func (r *queryResolver) GetCart(ctx context.Context, id string) (*Cart, error) {
	panic(fmt.Errorf("not implemented: GetCart - getCart"))
}

// GetCarts is the resolver for the getCarts field.
func (r *queryResolver) GetCarts(ctx context.Context, userID string) ([]*Cart, error) {
	panic(fmt.Errorf("not implemented: GetCarts - getCarts"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
