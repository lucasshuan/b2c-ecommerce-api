type Order {
  id: ID!
  value: Float!
  paymentStatus: PaymentStatus
  billingType: BillingType
  cart: Cart!
  user: User!
  created_at: Time!
  updated_at: Time!
}

input CreateOrderInput {
  value: Float!
  cartId: ID!
}

enum PaymentStatus {
  PENDING
  CONFIRMED
  OVERDUE
}

enum BillingType {
  BOLETO
  PIX
  CREDIT_CARD
  DEBIT_CARD
}

extend type Query {
  order(id: ID!): Order @isUser
  orders(userID: ID!): [Order!] @isUser
}

extend type Mutation {
  createOrder(input: CreateOrderInput!): Order! @isUser
  deleteOrder(id: ID!): Order! @isUser
}

extend type Subscription {
  orderPaymentUpdate(orderId: ID!): Order
}
