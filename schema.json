{
  "Query": {
    "Kind": "OBJECT",
    "Description": "",
    "Name": "Query",
    "Directives": null,
    "Interfaces": null,
    "Fields": [
      {
        "Description": "",
        "Name": "getCart",
        "Arguments": [
          {
            "Description": "",
            "Name": "id",
            "DefaultValue": null,
            "Type": {
              "NamedType": "ID",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 462,
                "End": 464,
                "Line": 32,
                "Column": 16,
                "Src": {
                  "Name": "schema/cart.graphqls",
                  "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 458,
              "End": 460,
              "Line": 32,
              "Column": 12,
              "Src": {
                "Name": "schema/cart.graphqls",
                "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          }
        ],
        "DefaultValue": null,
        "Type": {
          "NamedType": "Cart",
          "Elem": null,
          "NonNull": false,
          "Position": {
            "Start": 468,
            "End": 472,
            "Line": 32,
            "Column": 22,
            "Src": {
              "Name": "schema/cart.graphqls",
              "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
              "BuiltIn": false
            }
          }
        },
        "Directives": null,
        "Position": {
          "Start": 450,
          "End": 457,
          "Line": 32,
          "Column": 4,
          "Src": {
            "Name": "schema/cart.graphqls",
            "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
            "BuiltIn": false
          }
        },
        "BeforeDescriptionComment": null,
        "AfterDescriptionComment": null
      },
      {
        "Description": "",
        "Name": "listCarts",
        "Arguments": [
          {
            "Description": "",
            "Name": "userID",
            "DefaultValue": null,
            "Type": {
              "NamedType": "ID",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 494,
                "End": 496,
                "Line": 33,
                "Column": 22,
                "Src": {
                  "Name": "schema/cart.graphqls",
                  "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 486,
              "End": 492,
              "Line": 33,
              "Column": 14,
              "Src": {
                "Name": "schema/cart.graphqls",
                "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          }
        ],
        "DefaultValue": null,
        "Type": {
          "NamedType": "",
          "Elem": {
            "NamedType": "Cart",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 501,
              "End": 505,
              "Line": 33,
              "Column": 29,
              "Src": {
                "Name": "schema/cart.graphqls",
                "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "NonNull": false,
          "Position": {
            "Start": 501,
            "End": 505,
            "Line": 33,
            "Column": 29,
            "Src": {
              "Name": "schema/cart.graphqls",
              "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
              "BuiltIn": false
            }
          }
        },
        "Directives": null,
        "Position": {
          "Start": 476,
          "End": 485,
          "Line": 33,
          "Column": 4,
          "Src": {
            "Name": "schema/cart.graphqls",
            "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
            "BuiltIn": false
          }
        },
        "BeforeDescriptionComment": null,
        "AfterDescriptionComment": null
      },
      {
        "Description": "",
        "Name": "getCategory",
        "Arguments": [
          {
            "Description": "",
            "Name": "id",
            "DefaultValue": null,
            "Type": {
              "NamedType": "ID",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 257,
                "End": 259,
                "Line": 19,
                "Column": 20,
                "Src": {
                  "Name": "schema/category.graphqls",
                  "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 253,
              "End": 255,
              "Line": 19,
              "Column": 16,
              "Src": {
                "Name": "schema/category.graphqls",
                "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          }
        ],
        "DefaultValue": null,
        "Type": {
          "NamedType": "Category",
          "Elem": null,
          "NonNull": false,
          "Position": {
            "Start": 263,
            "End": 271,
            "Line": 19,
            "Column": 26,
            "Src": {
              "Name": "schema/category.graphqls",
              "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          }
        },
        "Directives": null,
        "Position": {
          "Start": 241,
          "End": 252,
          "Line": 19,
          "Column": 4,
          "Src": {
            "Name": "schema/category.graphqls",
            "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
            "BuiltIn": false
          }
        },
        "BeforeDescriptionComment": null,
        "AfterDescriptionComment": null
      },
      {
        "Description": "",
        "Name": "listCategories",
        "Arguments": null,
        "DefaultValue": null,
        "Type": {
          "NamedType": "",
          "Elem": {
            "NamedType": "Category",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 292,
              "End": 300,
              "Line": 20,
              "Column": 21,
              "Src": {
                "Name": "schema/category.graphqls",
                "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "NonNull": false,
          "Position": {
            "Start": 292,
            "End": 300,
            "Line": 20,
            "Column": 21,
            "Src": {
              "Name": "schema/category.graphqls",
              "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          }
        },
        "Directives": null,
        "Position": {
          "Start": 275,
          "End": 289,
          "Line": 20,
          "Column": 4,
          "Src": {
            "Name": "schema/category.graphqls",
            "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
            "BuiltIn": false
          }
        },
        "BeforeDescriptionComment": null,
        "AfterDescriptionComment": null
      },
      {
        "Description": "",
        "Name": "getOrder",
        "Arguments": [
          {
            "Description": "",
            "Name": "id",
            "DefaultValue": null,
            "Type": {
              "NamedType": "ID",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 465,
                "End": 467,
                "Line": 34,
                "Column": 17,
                "Src": {
                  "Name": "schema/order.graphqls",
                  "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 461,
              "End": 463,
              "Line": 34,
              "Column": 13,
              "Src": {
                "Name": "schema/order.graphqls",
                "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          }
        ],
        "DefaultValue": null,
        "Type": {
          "NamedType": "Order",
          "Elem": null,
          "NonNull": false,
          "Position": {
            "Start": 471,
            "End": 476,
            "Line": 34,
            "Column": 23,
            "Src": {
              "Name": "schema/order.graphqls",
              "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
              "BuiltIn": false
            }
          }
        },
        "Directives": null,
        "Position": {
          "Start": 452,
          "End": 460,
          "Line": 34,
          "Column": 4,
          "Src": {
            "Name": "schema/order.graphqls",
            "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
            "BuiltIn": false
          }
        },
        "BeforeDescriptionComment": null,
        "AfterDescriptionComment": null
      },
      {
        "Description": "",
        "Name": "listOrders",
        "Arguments": [
          {
            "Description": "",
            "Name": "userID",
            "DefaultValue": null,
            "Type": {
              "NamedType": "ID",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 499,
                "End": 501,
                "Line": 35,
                "Column": 23,
                "Src": {
                  "Name": "schema/order.graphqls",
                  "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 491,
              "End": 497,
              "Line": 35,
              "Column": 15,
              "Src": {
                "Name": "schema/order.graphqls",
                "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          }
        ],
        "DefaultValue": null,
        "Type": {
          "NamedType": "",
          "Elem": {
            "NamedType": "Order",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 506,
              "End": 511,
              "Line": 35,
              "Column": 30,
              "Src": {
                "Name": "schema/order.graphqls",
                "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "NonNull": false,
          "Position": {
            "Start": 506,
            "End": 511,
            "Line": 35,
            "Column": 30,
            "Src": {
              "Name": "schema/order.graphqls",
              "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
              "BuiltIn": false
            }
          }
        },
        "Directives": null,
        "Position": {
          "Start": 480,
          "End": 490,
          "Line": 35,
          "Column": 4,
          "Src": {
            "Name": "schema/order.graphqls",
            "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
            "BuiltIn": false
          }
        },
        "BeforeDescriptionComment": null,
        "AfterDescriptionComment": null
      },
      {
        "Description": "",
        "Name": "getProduct",
        "Arguments": [
          {
            "Description": "",
            "Name": "id",
            "DefaultValue": null,
            "Type": {
              "NamedType": "ID",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 593,
                "End": 595,
                "Line": 41,
                "Column": 19,
                "Src": {
                  "Name": "schema/product.graphqls",
                  "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 589,
              "End": 591,
              "Line": 41,
              "Column": 15,
              "Src": {
                "Name": "schema/product.graphqls",
                "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          }
        ],
        "DefaultValue": null,
        "Type": {
          "NamedType": "Product",
          "Elem": null,
          "NonNull": false,
          "Position": {
            "Start": 599,
            "End": 606,
            "Line": 41,
            "Column": 25,
            "Src": {
              "Name": "schema/product.graphqls",
              "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          }
        },
        "Directives": null,
        "Position": {
          "Start": 578,
          "End": 588,
          "Line": 41,
          "Column": 4,
          "Src": {
            "Name": "schema/product.graphqls",
            "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
            "BuiltIn": false
          }
        },
        "BeforeDescriptionComment": null,
        "AfterDescriptionComment": null
      },
      {
        "Description": "",
        "Name": "listProducts",
        "Arguments": [
          {
            "Description": "",
            "Name": "input",
            "DefaultValue": null,
            "Type": {
              "NamedType": "ListProductsInput",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 630,
                "End": 647,
                "Line": 42,
                "Column": 24,
                "Src": {
                  "Name": "schema/product.graphqls",
                  "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 623,
              "End": 628,
              "Line": 42,
              "Column": 17,
              "Src": {
                "Name": "schema/product.graphqls",
                "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          }
        ],
        "DefaultValue": null,
        "Type": {
          "NamedType": "",
          "Elem": {
            "NamedType": "Product",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 651,
              "End": 658,
              "Line": 42,
              "Column": 45,
              "Src": {
                "Name": "schema/product.graphqls",
                "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "NonNull": false,
          "Position": {
            "Start": 651,
            "End": 658,
            "Line": 42,
            "Column": 45,
            "Src": {
              "Name": "schema/product.graphqls",
              "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          }
        },
        "Directives": null,
        "Position": {
          "Start": 610,
          "End": 622,
          "Line": 42,
          "Column": 4,
          "Src": {
            "Name": "schema/product.graphqls",
            "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
            "BuiltIn": false
          }
        },
        "BeforeDescriptionComment": null,
        "AfterDescriptionComment": null
      },
      {
        "Description": "",
        "Name": "getUser",
        "Arguments": [
          {
            "Description": "",
            "Name": "id",
            "DefaultValue": null,
            "Type": {
              "NamedType": "ID",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 483,
                "End": 485,
                "Line": 31,
                "Column": 16,
                "Src": {
                  "Name": "schema/user.graphqls",
                  "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 479,
              "End": 481,
              "Line": 31,
              "Column": 12,
              "Src": {
                "Name": "schema/user.graphqls",
                "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          }
        ],
        "DefaultValue": null,
        "Type": {
          "NamedType": "User",
          "Elem": null,
          "NonNull": false,
          "Position": {
            "Start": 489,
            "End": 493,
            "Line": 31,
            "Column": 22,
            "Src": {
              "Name": "schema/user.graphqls",
              "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          }
        },
        "Directives": null,
        "Position": {
          "Start": 471,
          "End": 478,
          "Line": 31,
          "Column": 4,
          "Src": {
            "Name": "schema/user.graphqls",
            "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
            "BuiltIn": false
          }
        },
        "BeforeDescriptionComment": null,
        "AfterDescriptionComment": null
      },
      {
        "Description": "",
        "Name": "listUsers",
        "Arguments": null,
        "DefaultValue": null,
        "Type": {
          "NamedType": "",
          "Elem": {
            "NamedType": "User",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 509,
              "End": 513,
              "Line": 32,
              "Column": 16,
              "Src": {
                "Name": "schema/user.graphqls",
                "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "NonNull": false,
          "Position": {
            "Start": 509,
            "End": 513,
            "Line": 32,
            "Column": 16,
            "Src": {
              "Name": "schema/user.graphqls",
              "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          }
        },
        "Directives": null,
        "Position": {
          "Start": 497,
          "End": 506,
          "Line": 32,
          "Column": 4,
          "Src": {
            "Name": "schema/user.graphqls",
            "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
            "BuiltIn": false
          }
        },
        "BeforeDescriptionComment": null,
        "AfterDescriptionComment": null
      },
      {
        "Description": "",
        "Name": "__schema",
        "Arguments": null,
        "DefaultValue": null,
        "Type": {
          "NamedType": "__Schema",
          "Elem": null,
          "NonNull": true,
          "Position": null
        },
        "Directives": null,
        "Position": null,
        "BeforeDescriptionComment": null,
        "AfterDescriptionComment": null
      },
      {
        "Description": "",
        "Name": "__type",
        "Arguments": [
          {
            "Description": "",
            "Name": "name",
            "DefaultValue": null,
            "Type": {
              "NamedType": "String",
              "Elem": null,
              "NonNull": true,
              "Position": null
            },
            "Directives": null,
            "Position": null,
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          }
        ],
        "DefaultValue": null,
        "Type": {
          "NamedType": "__Type",
          "Elem": null,
          "NonNull": false,
          "Position": null
        },
        "Directives": null,
        "Position": null,
        "BeforeDescriptionComment": null,
        "AfterDescriptionComment": null
      }
    ],
    "Types": null,
    "EnumValues": null,
    "Position": {
      "Start": 5,
      "End": 10,
      "Line": 1,
      "Column": 6,
      "Src": {
        "Name": "schema/schema.graphqls",
        "Input": "type Query\n\ntype Mutation\n\ntype Subscription\n\nschema {\n  query: Query\n  mutation: Mutation\n  subscription: Subscription\n}\n\nscalar Time\n\ndirective @length(min: Int, max: Int) on FIELD_DEFINITION\ndirective @email on FIELD_DEFINITION\n",
        "BuiltIn": false
      }
    },
    "BuiltIn": false,
    "BeforeDescriptionComment": null,
    "AfterDescriptionComment": null,
    "EndOfDefinitionComment": null
  },
  "Mutation": {
    "Kind": "OBJECT",
    "Description": "",
    "Name": "Mutation",
    "Directives": null,
    "Interfaces": null,
    "Fields": [
      {
        "Description": "",
        "Name": "createCart",
        "Arguments": [
          {
            "Description": "",
            "Name": "input",
            "DefaultValue": null,
            "Type": {
              "NamedType": "CreateCartInput",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 557,
                "End": 572,
                "Line": 37,
                "Column": 22,
                "Src": {
                  "Name": "schema/cart.graphqls",
                  "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 550,
              "End": 555,
              "Line": 37,
              "Column": 15,
              "Src": {
                "Name": "schema/cart.graphqls",
                "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          }
        ],
        "DefaultValue": null,
        "Type": {
          "NamedType": "Cart",
          "Elem": null,
          "NonNull": false,
          "Position": {
            "Start": 576,
            "End": 580,
            "Line": 37,
            "Column": 41,
            "Src": {
              "Name": "schema/cart.graphqls",
              "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
              "BuiltIn": false
            }
          }
        },
        "Directives": null,
        "Position": {
          "Start": 539,
          "End": 549,
          "Line": 37,
          "Column": 4,
          "Src": {
            "Name": "schema/cart.graphqls",
            "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
            "BuiltIn": false
          }
        },
        "BeforeDescriptionComment": null,
        "AfterDescriptionComment": null
      },
      {
        "Description": "",
        "Name": "addProductToCart",
        "Arguments": [
          {
            "Description": "",
            "Name": "input",
            "DefaultValue": null,
            "Type": {
              "NamedType": "AddProductToCartInput",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 608,
                "End": 629,
                "Line": 38,
                "Column": 28,
                "Src": {
                  "Name": "schema/cart.graphqls",
                  "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 601,
              "End": 606,
              "Line": 38,
              "Column": 21,
              "Src": {
                "Name": "schema/cart.graphqls",
                "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          }
        ],
        "DefaultValue": null,
        "Type": {
          "NamedType": "CartProduct",
          "Elem": null,
          "NonNull": false,
          "Position": {
            "Start": 633,
            "End": 644,
            "Line": 38,
            "Column": 53,
            "Src": {
              "Name": "schema/cart.graphqls",
              "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
              "BuiltIn": false
            }
          }
        },
        "Directives": null,
        "Position": {
          "Start": 584,
          "End": 600,
          "Line": 38,
          "Column": 4,
          "Src": {
            "Name": "schema/cart.graphqls",
            "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
            "BuiltIn": false
          }
        },
        "BeforeDescriptionComment": null,
        "AfterDescriptionComment": null
      },
      {
        "Description": "",
        "Name": "removeProductFromCart",
        "Arguments": [
          {
            "Description": "",
            "Name": "cartProductID",
            "DefaultValue": null,
            "Type": {
              "NamedType": "ID",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 685,
                "End": 687,
                "Line": 39,
                "Column": 41,
                "Src": {
                  "Name": "schema/cart.graphqls",
                  "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 670,
              "End": 683,
              "Line": 39,
              "Column": 26,
              "Src": {
                "Name": "schema/cart.graphqls",
                "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          }
        ],
        "DefaultValue": null,
        "Type": {
          "NamedType": "Cart",
          "Elem": null,
          "NonNull": false,
          "Position": {
            "Start": 691,
            "End": 695,
            "Line": 39,
            "Column": 47,
            "Src": {
              "Name": "schema/cart.graphqls",
              "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
              "BuiltIn": false
            }
          }
        },
        "Directives": null,
        "Position": {
          "Start": 648,
          "End": 669,
          "Line": 39,
          "Column": 4,
          "Src": {
            "Name": "schema/cart.graphqls",
            "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
            "BuiltIn": false
          }
        },
        "BeforeDescriptionComment": null,
        "AfterDescriptionComment": null
      },
      {
        "Description": "",
        "Name": "createCategory",
        "Arguments": [
          {
            "Description": "",
            "Name": "input",
            "DefaultValue": null,
            "Type": {
              "NamedType": "CreateCategoryInput",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 357,
                "End": 376,
                "Line": 24,
                "Column": 26,
                "Src": {
                  "Name": "schema/category.graphqls",
                  "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 350,
              "End": 355,
              "Line": 24,
              "Column": 19,
              "Src": {
                "Name": "schema/category.graphqls",
                "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          }
        ],
        "DefaultValue": null,
        "Type": {
          "NamedType": "Category",
          "Elem": null,
          "NonNull": false,
          "Position": {
            "Start": 380,
            "End": 388,
            "Line": 24,
            "Column": 49,
            "Src": {
              "Name": "schema/category.graphqls",
              "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          }
        },
        "Directives": null,
        "Position": {
          "Start": 335,
          "End": 349,
          "Line": 24,
          "Column": 4,
          "Src": {
            "Name": "schema/category.graphqls",
            "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
            "BuiltIn": false
          }
        },
        "BeforeDescriptionComment": null,
        "AfterDescriptionComment": null
      },
      {
        "Description": "",
        "Name": "updateCategory",
        "Arguments": [
          {
            "Description": "",
            "Name": "input",
            "DefaultValue": null,
            "Type": {
              "NamedType": "UpdateCategoryInput",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 414,
                "End": 433,
                "Line": 25,
                "Column": 26,
                "Src": {
                  "Name": "schema/category.graphqls",
                  "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 407,
              "End": 412,
              "Line": 25,
              "Column": 19,
              "Src": {
                "Name": "schema/category.graphqls",
                "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          }
        ],
        "DefaultValue": null,
        "Type": {
          "NamedType": "Category",
          "Elem": null,
          "NonNull": false,
          "Position": {
            "Start": 437,
            "End": 445,
            "Line": 25,
            "Column": 49,
            "Src": {
              "Name": "schema/category.graphqls",
              "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          }
        },
        "Directives": null,
        "Position": {
          "Start": 392,
          "End": 406,
          "Line": 25,
          "Column": 4,
          "Src": {
            "Name": "schema/category.graphqls",
            "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
            "BuiltIn": false
          }
        },
        "BeforeDescriptionComment": null,
        "AfterDescriptionComment": null
      },
      {
        "Description": "",
        "Name": "deleteCategory",
        "Arguments": [
          {
            "Description": "",
            "Name": "id",
            "DefaultValue": null,
            "Type": {
              "NamedType": "ID",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 468,
                "End": 470,
                "Line": 26,
                "Column": 23,
                "Src": {
                  "Name": "schema/category.graphqls",
                  "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 464,
              "End": 466,
              "Line": 26,
              "Column": 19,
              "Src": {
                "Name": "schema/category.graphqls",
                "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          }
        ],
        "DefaultValue": null,
        "Type": {
          "NamedType": "Boolean",
          "Elem": null,
          "NonNull": true,
          "Position": {
            "Start": 474,
            "End": 481,
            "Line": 26,
            "Column": 29,
            "Src": {
              "Name": "schema/category.graphqls",
              "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          }
        },
        "Directives": null,
        "Position": {
          "Start": 449,
          "End": 463,
          "Line": 26,
          "Column": 4,
          "Src": {
            "Name": "schema/category.graphqls",
            "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
            "BuiltIn": false
          }
        },
        "BeforeDescriptionComment": null,
        "AfterDescriptionComment": null
      },
      {
        "Description": "",
        "Name": "createOrder",
        "Arguments": [
          {
            "Description": "",
            "Name": "input",
            "DefaultValue": null,
            "Type": {
              "NamedType": "CreateOrderInput",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 565,
                "End": 581,
                "Line": 39,
                "Column": 23,
                "Src": {
                  "Name": "schema/order.graphqls",
                  "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 558,
              "End": 563,
              "Line": 39,
              "Column": 16,
              "Src": {
                "Name": "schema/order.graphqls",
                "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          }
        ],
        "DefaultValue": null,
        "Type": {
          "NamedType": "Order",
          "Elem": null,
          "NonNull": true,
          "Position": {
            "Start": 585,
            "End": 590,
            "Line": 39,
            "Column": 43,
            "Src": {
              "Name": "schema/order.graphqls",
              "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
              "BuiltIn": false
            }
          }
        },
        "Directives": null,
        "Position": {
          "Start": 546,
          "End": 557,
          "Line": 39,
          "Column": 4,
          "Src": {
            "Name": "schema/order.graphqls",
            "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
            "BuiltIn": false
          }
        },
        "BeforeDescriptionComment": null,
        "AfterDescriptionComment": null
      },
      {
        "Description": "",
        "Name": "deleteOrder",
        "Arguments": [
          {
            "Description": "",
            "Name": "id",
            "DefaultValue": null,
            "Type": {
              "NamedType": "ID",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 611,
                "End": 613,
                "Line": 40,
                "Column": 20,
                "Src": {
                  "Name": "schema/order.graphqls",
                  "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 607,
              "End": 609,
              "Line": 40,
              "Column": 16,
              "Src": {
                "Name": "schema/order.graphqls",
                "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          }
        ],
        "DefaultValue": null,
        "Type": {
          "NamedType": "Order",
          "Elem": null,
          "NonNull": true,
          "Position": {
            "Start": 617,
            "End": 622,
            "Line": 40,
            "Column": 26,
            "Src": {
              "Name": "schema/order.graphqls",
              "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
              "BuiltIn": false
            }
          }
        },
        "Directives": null,
        "Position": {
          "Start": 595,
          "End": 606,
          "Line": 40,
          "Column": 4,
          "Src": {
            "Name": "schema/order.graphqls",
            "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
            "BuiltIn": false
          }
        },
        "BeforeDescriptionComment": null,
        "AfterDescriptionComment": null
      },
      {
        "Description": "",
        "Name": "createProduct",
        "Arguments": [
          {
            "Description": "",
            "Name": "input",
            "DefaultValue": null,
            "Type": {
              "NamedType": "CreateProductInput",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 714,
                "End": 732,
                "Line": 46,
                "Column": 25,
                "Src": {
                  "Name": "schema/product.graphqls",
                  "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 707,
              "End": 712,
              "Line": 46,
              "Column": 18,
              "Src": {
                "Name": "schema/product.graphqls",
                "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          }
        ],
        "DefaultValue": null,
        "Type": {
          "NamedType": "Product",
          "Elem": null,
          "NonNull": false,
          "Position": {
            "Start": 736,
            "End": 743,
            "Line": 46,
            "Column": 47,
            "Src": {
              "Name": "schema/product.graphqls",
              "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          }
        },
        "Directives": null,
        "Position": {
          "Start": 693,
          "End": 706,
          "Line": 46,
          "Column": 4,
          "Src": {
            "Name": "schema/product.graphqls",
            "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
            "BuiltIn": false
          }
        },
        "BeforeDescriptionComment": null,
        "AfterDescriptionComment": null
      },
      {
        "Description": "",
        "Name": "updateProduct",
        "Arguments": [
          {
            "Description": "",
            "Name": "input",
            "DefaultValue": null,
            "Type": {
              "NamedType": "UpdateProductInput",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 768,
                "End": 786,
                "Line": 47,
                "Column": 25,
                "Src": {
                  "Name": "schema/product.graphqls",
                  "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 761,
              "End": 766,
              "Line": 47,
              "Column": 18,
              "Src": {
                "Name": "schema/product.graphqls",
                "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          }
        ],
        "DefaultValue": null,
        "Type": {
          "NamedType": "Product",
          "Elem": null,
          "NonNull": false,
          "Position": {
            "Start": 790,
            "End": 797,
            "Line": 47,
            "Column": 47,
            "Src": {
              "Name": "schema/product.graphqls",
              "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          }
        },
        "Directives": null,
        "Position": {
          "Start": 747,
          "End": 760,
          "Line": 47,
          "Column": 4,
          "Src": {
            "Name": "schema/product.graphqls",
            "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
            "BuiltIn": false
          }
        },
        "BeforeDescriptionComment": null,
        "AfterDescriptionComment": null
      },
      {
        "Description": "",
        "Name": "deleteProduct",
        "Arguments": [
          {
            "Description": "",
            "Name": "id",
            "DefaultValue": null,
            "Type": {
              "NamedType": "ID",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 819,
                "End": 821,
                "Line": 48,
                "Column": 22,
                "Src": {
                  "Name": "schema/product.graphqls",
                  "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 815,
              "End": 817,
              "Line": 48,
              "Column": 18,
              "Src": {
                "Name": "schema/product.graphqls",
                "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          }
        ],
        "DefaultValue": null,
        "Type": {
          "NamedType": "Boolean",
          "Elem": null,
          "NonNull": true,
          "Position": {
            "Start": 825,
            "End": 832,
            "Line": 48,
            "Column": 28,
            "Src": {
              "Name": "schema/product.graphqls",
              "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          }
        },
        "Directives": null,
        "Position": {
          "Start": 801,
          "End": 814,
          "Line": 48,
          "Column": 4,
          "Src": {
            "Name": "schema/product.graphqls",
            "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
            "BuiltIn": false
          }
        },
        "BeforeDescriptionComment": null,
        "AfterDescriptionComment": null
      },
      {
        "Description": "",
        "Name": "login",
        "Arguments": [
          {
            "Description": "",
            "Name": "LoginInput",
            "DefaultValue": null,
            "Type": {
              "NamedType": "LoginInput",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 566,
                "End": 576,
                "Line": 36,
                "Column": 22,
                "Src": {
                  "Name": "schema/user.graphqls",
                  "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 554,
              "End": 564,
              "Line": 36,
              "Column": 10,
              "Src": {
                "Name": "schema/user.graphqls",
                "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          }
        ],
        "DefaultValue": null,
        "Type": {
          "NamedType": "User",
          "Elem": null,
          "NonNull": false,
          "Position": {
            "Start": 580,
            "End": 584,
            "Line": 36,
            "Column": 36,
            "Src": {
              "Name": "schema/user.graphqls",
              "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          }
        },
        "Directives": null,
        "Position": {
          "Start": 548,
          "End": 553,
          "Line": 36,
          "Column": 4,
          "Src": {
            "Name": "schema/user.graphqls",
            "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
            "BuiltIn": false
          }
        },
        "BeforeDescriptionComment": null,
        "AfterDescriptionComment": null
      },
      {
        "Description": "",
        "Name": "registerUser",
        "Arguments": [
          {
            "Description": "",
            "Name": "input",
            "DefaultValue": null,
            "Type": {
              "NamedType": "CreateUserInput",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 608,
                "End": 623,
                "Line": 37,
                "Column": 24,
                "Src": {
                  "Name": "schema/user.graphqls",
                  "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 601,
              "End": 606,
              "Line": 37,
              "Column": 17,
              "Src": {
                "Name": "schema/user.graphqls",
                "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          }
        ],
        "DefaultValue": null,
        "Type": {
          "NamedType": "User",
          "Elem": null,
          "NonNull": false,
          "Position": {
            "Start": 627,
            "End": 631,
            "Line": 37,
            "Column": 43,
            "Src": {
              "Name": "schema/user.graphqls",
              "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          }
        },
        "Directives": null,
        "Position": {
          "Start": 588,
          "End": 600,
          "Line": 37,
          "Column": 4,
          "Src": {
            "Name": "schema/user.graphqls",
            "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
            "BuiltIn": false
          }
        },
        "BeforeDescriptionComment": null,
        "AfterDescriptionComment": null
      },
      {
        "Description": "",
        "Name": "updateUser",
        "Arguments": [
          {
            "Description": "",
            "Name": "input",
            "DefaultValue": null,
            "Type": {
              "NamedType": "UpdateUserInput",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 653,
                "End": 668,
                "Line": 38,
                "Column": 22,
                "Src": {
                  "Name": "schema/user.graphqls",
                  "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 646,
              "End": 651,
              "Line": 38,
              "Column": 15,
              "Src": {
                "Name": "schema/user.graphqls",
                "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          }
        ],
        "DefaultValue": null,
        "Type": {
          "NamedType": "User",
          "Elem": null,
          "NonNull": false,
          "Position": {
            "Start": 672,
            "End": 676,
            "Line": 38,
            "Column": 41,
            "Src": {
              "Name": "schema/user.graphqls",
              "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          }
        },
        "Directives": null,
        "Position": {
          "Start": 635,
          "End": 645,
          "Line": 38,
          "Column": 4,
          "Src": {
            "Name": "schema/user.graphqls",
            "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
            "BuiltIn": false
          }
        },
        "BeforeDescriptionComment": null,
        "AfterDescriptionComment": null
      },
      {
        "Description": "",
        "Name": "deleteUser",
        "Arguments": [
          {
            "Description": "",
            "Name": "id",
            "DefaultValue": null,
            "Type": {
              "NamedType": "ID",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 695,
                "End": 697,
                "Line": 39,
                "Column": 19,
                "Src": {
                  "Name": "schema/user.graphqls",
                  "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 691,
              "End": 693,
              "Line": 39,
              "Column": 15,
              "Src": {
                "Name": "schema/user.graphqls",
                "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          }
        ],
        "DefaultValue": null,
        "Type": {
          "NamedType": "Boolean",
          "Elem": null,
          "NonNull": true,
          "Position": {
            "Start": 701,
            "End": 708,
            "Line": 39,
            "Column": 25,
            "Src": {
              "Name": "schema/user.graphqls",
              "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          }
        },
        "Directives": null,
        "Position": {
          "Start": 680,
          "End": 690,
          "Line": 39,
          "Column": 4,
          "Src": {
            "Name": "schema/user.graphqls",
            "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
            "BuiltIn": false
          }
        },
        "BeforeDescriptionComment": null,
        "AfterDescriptionComment": null
      }
    ],
    "Types": null,
    "EnumValues": null,
    "Position": {
      "Start": 17,
      "End": 25,
      "Line": 3,
      "Column": 6,
      "Src": {
        "Name": "schema/schema.graphqls",
        "Input": "type Query\n\ntype Mutation\n\ntype Subscription\n\nschema {\n  query: Query\n  mutation: Mutation\n  subscription: Subscription\n}\n\nscalar Time\n\ndirective @length(min: Int, max: Int) on FIELD_DEFINITION\ndirective @email on FIELD_DEFINITION\n",
        "BuiltIn": false
      }
    },
    "BuiltIn": false,
    "BeforeDescriptionComment": null,
    "AfterDescriptionComment": null,
    "EndOfDefinitionComment": null
  },
  "Subscription": {
    "Kind": "OBJECT",
    "Description": "",
    "Name": "Subscription",
    "Directives": null,
    "Interfaces": null,
    "Fields": [
      {
        "Description": "",
        "Name": "orderPaymentUpdate",
        "Arguments": [
          {
            "Description": "",
            "Name": "orderId",
            "DefaultValue": null,
            "Type": {
              "NamedType": "ID",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 688,
                "End": 690,
                "Line": 44,
                "Column": 32,
                "Src": {
                  "Name": "schema/order.graphqls",
                  "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 679,
              "End": 686,
              "Line": 44,
              "Column": 23,
              "Src": {
                "Name": "schema/order.graphqls",
                "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          }
        ],
        "DefaultValue": null,
        "Type": {
          "NamedType": "Order",
          "Elem": null,
          "NonNull": false,
          "Position": {
            "Start": 694,
            "End": 699,
            "Line": 44,
            "Column": 38,
            "Src": {
              "Name": "schema/order.graphqls",
              "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
              "BuiltIn": false
            }
          }
        },
        "Directives": null,
        "Position": {
          "Start": 660,
          "End": 678,
          "Line": 44,
          "Column": 4,
          "Src": {
            "Name": "schema/order.graphqls",
            "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
            "BuiltIn": false
          }
        },
        "BeforeDescriptionComment": null,
        "AfterDescriptionComment": null
      }
    ],
    "Types": null,
    "EnumValues": null,
    "Position": {
      "Start": 32,
      "End": 44,
      "Line": 5,
      "Column": 6,
      "Src": {
        "Name": "schema/schema.graphqls",
        "Input": "type Query\n\ntype Mutation\n\ntype Subscription\n\nschema {\n  query: Query\n  mutation: Mutation\n  subscription: Subscription\n}\n\nscalar Time\n\ndirective @length(min: Int, max: Int) on FIELD_DEFINITION\ndirective @email on FIELD_DEFINITION\n",
        "BuiltIn": false
      }
    },
    "BuiltIn": false,
    "BeforeDescriptionComment": null,
    "AfterDescriptionComment": null,
    "EndOfDefinitionComment": null
  },
  "Types": {
    "AddProductToCartInput": {
      "Kind": "INPUT_OBJECT",
      "Description": "",
      "Name": "AddProductToCartInput",
      "Directives": null,
      "Interfaces": null,
      "Fields": [
        {
          "Description": "",
          "Name": "cartId",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "ID",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 381,
              "End": 383,
              "Line": 26,
              "Column": 12,
              "Src": {
                "Name": "schema/cart.graphqls",
                "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 373,
            "End": 379,
            "Line": 26,
            "Column": 4,
            "Src": {
              "Name": "schema/cart.graphqls",
              "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "productId",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "ID",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 399,
              "End": 401,
              "Line": 27,
              "Column": 15,
              "Src": {
                "Name": "schema/cart.graphqls",
                "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 388,
            "End": 397,
            "Line": 27,
            "Column": 4,
            "Src": {
              "Name": "schema/cart.graphqls",
              "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "quantity",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "Int",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 416,
              "End": 419,
              "Line": 28,
              "Column": 14,
              "Src": {
                "Name": "schema/cart.graphqls",
                "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 406,
            "End": 414,
            "Line": 28,
            "Column": 4,
            "Src": {
              "Name": "schema/cart.graphqls",
              "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        }
      ],
      "Types": null,
      "EnumValues": null,
      "Position": {
        "Start": 346,
        "End": 367,
        "Line": 25,
        "Column": 8,
        "Src": {
          "Name": "schema/cart.graphqls",
          "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
          "BuiltIn": false
        }
      },
      "BuiltIn": false,
      "BeforeDescriptionComment": null,
      "AfterDescriptionComment": null,
      "EndOfDefinitionComment": null
    },
    "BillingType": {
      "Kind": "ENUM",
      "Description": "",
      "Name": "BillingType",
      "Directives": null,
      "Interfaces": null,
      "Fields": null,
      "Types": null,
      "EnumValues": [
        {
          "Description": "",
          "Name": "BOLETO",
          "Directives": null,
          "Position": {
            "Start": 380,
            "End": 386,
            "Line": 27,
            "Column": 4,
            "Src": {
              "Name": "schema/order.graphqls",
              "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "PIX",
          "Directives": null,
          "Position": {
            "Start": 390,
            "End": 393,
            "Line": 28,
            "Column": 4,
            "Src": {
              "Name": "schema/order.graphqls",
              "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "CREDIT_CARD",
          "Directives": null,
          "Position": {
            "Start": 397,
            "End": 408,
            "Line": 29,
            "Column": 4,
            "Src": {
              "Name": "schema/order.graphqls",
              "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "DEBIT_CARD",
          "Directives": null,
          "Position": {
            "Start": 412,
            "End": 422,
            "Line": 30,
            "Column": 4,
            "Src": {
              "Name": "schema/order.graphqls",
              "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        }
      ],
      "Position": {
        "Start": 363,
        "End": 374,
        "Line": 26,
        "Column": 7,
        "Src": {
          "Name": "schema/order.graphqls",
          "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
          "BuiltIn": false
        }
      },
      "BuiltIn": false,
      "BeforeDescriptionComment": null,
      "AfterDescriptionComment": null,
      "EndOfDefinitionComment": null
    },
    "Boolean": {
      "Kind": "SCALAR",
      "Description": "The `Boolean` scalar type represents `true` or `false`.",
      "Name": "Boolean",
      "Directives": null,
      "Interfaces": null,
      "Fields": null,
      "Types": null,
      "EnumValues": null,
      "Position": {
        "Start": 723,
        "End": 730,
        "Line": 13,
        "Column": 8,
        "Src": {
          "Name": "prelude.graphql",
          "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
          "BuiltIn": true
        }
      },
      "BuiltIn": true,
      "BeforeDescriptionComment": null,
      "AfterDescriptionComment": null,
      "EndOfDefinitionComment": null
    },
    "Cart": {
      "Kind": "OBJECT",
      "Description": "",
      "Name": "Cart",
      "Directives": null,
      "Interfaces": null,
      "Fields": [
        {
          "Description": "",
          "Name": "id",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "ID",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 19,
              "End": 21,
              "Line": 2,
              "Column": 8,
              "Src": {
                "Name": "schema/cart.graphqls",
                "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 15,
            "End": 17,
            "Line": 2,
            "Column": 4,
            "Src": {
              "Name": "schema/cart.graphqls",
              "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "isActive",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "Boolean",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 36,
              "End": 43,
              "Line": 3,
              "Column": 14,
              "Src": {
                "Name": "schema/cart.graphqls",
                "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 26,
            "End": 34,
            "Line": 3,
            "Column": 4,
            "Src": {
              "Name": "schema/cart.graphqls",
              "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "value",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "Float",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 55,
              "End": 60,
              "Line": 4,
              "Column": 11,
              "Src": {
                "Name": "schema/cart.graphqls",
                "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 48,
            "End": 53,
            "Line": 4,
            "Column": 4,
            "Src": {
              "Name": "schema/cart.graphqls",
              "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "user",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "User",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 71,
              "End": 75,
              "Line": 5,
              "Column": 10,
              "Src": {
                "Name": "schema/cart.graphqls",
                "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 65,
            "End": 69,
            "Line": 5,
            "Column": 4,
            "Src": {
              "Name": "schema/cart.graphqls",
              "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "userId",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "ID",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 88,
              "End": 90,
              "Line": 6,
              "Column": 12,
              "Src": {
                "Name": "schema/cart.graphqls",
                "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 80,
            "End": 86,
            "Line": 6,
            "Column": 4,
            "Src": {
              "Name": "schema/cart.graphqls",
              "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "order",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "Order",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 101,
              "End": 106,
              "Line": 7,
              "Column": 11,
              "Src": {
                "Name": "schema/cart.graphqls",
                "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 94,
            "End": 99,
            "Line": 7,
            "Column": 4,
            "Src": {
              "Name": "schema/cart.graphqls",
              "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "products",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "",
            "Elem": {
              "NamedType": "CartProduct",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 121,
                "End": 132,
                "Line": 8,
                "Column": 15,
                "Src": {
                  "Name": "schema/cart.graphqls",
                  "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "NonNull": false,
            "Position": {
              "Start": 121,
              "End": 132,
              "Line": 8,
              "Column": 15,
              "Src": {
                "Name": "schema/cart.graphqls",
                "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 110,
            "End": 118,
            "Line": 8,
            "Column": 4,
            "Src": {
              "Name": "schema/cart.graphqls",
              "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "createdAt",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "Time",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 149,
              "End": 153,
              "Line": 9,
              "Column": 15,
              "Src": {
                "Name": "schema/cart.graphqls",
                "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 138,
            "End": 147,
            "Line": 9,
            "Column": 4,
            "Src": {
              "Name": "schema/cart.graphqls",
              "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "updatedAt",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "Time",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 169,
              "End": 173,
              "Line": 10,
              "Column": 15,
              "Src": {
                "Name": "schema/cart.graphqls",
                "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 158,
            "End": 167,
            "Line": 10,
            "Column": 4,
            "Src": {
              "Name": "schema/cart.graphqls",
              "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        }
      ],
      "Types": null,
      "EnumValues": null,
      "Position": {
        "Start": 5,
        "End": 9,
        "Line": 1,
        "Column": 6,
        "Src": {
          "Name": "schema/cart.graphqls",
          "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
          "BuiltIn": false
        }
      },
      "BuiltIn": false,
      "BeforeDescriptionComment": null,
      "AfterDescriptionComment": null,
      "EndOfDefinitionComment": null
    },
    "CartProduct": {
      "Kind": "OBJECT",
      "Description": "",
      "Name": "CartProduct",
      "Directives": null,
      "Interfaces": null,
      "Fields": [
        {
          "Description": "",
          "Name": "id",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "ID",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 207,
              "End": 209,
              "Line": 14,
              "Column": 8,
              "Src": {
                "Name": "schema/cart.graphqls",
                "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 203,
            "End": 205,
            "Line": 14,
            "Column": 4,
            "Src": {
              "Name": "schema/cart.graphqls",
              "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "quantity",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "Int",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 224,
              "End": 227,
              "Line": 15,
              "Column": 14,
              "Src": {
                "Name": "schema/cart.graphqls",
                "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 214,
            "End": 222,
            "Line": 15,
            "Column": 4,
            "Src": {
              "Name": "schema/cart.graphqls",
              "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "product",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "Product",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 241,
              "End": 248,
              "Line": 16,
              "Column": 13,
              "Src": {
                "Name": "schema/cart.graphqls",
                "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 232,
            "End": 239,
            "Line": 16,
            "Column": 4,
            "Src": {
              "Name": "schema/cart.graphqls",
              "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        }
      ],
      "Types": null,
      "EnumValues": null,
      "Position": {
        "Start": 186,
        "End": 197,
        "Line": 13,
        "Column": 7,
        "Src": {
          "Name": "schema/cart.graphqls",
          "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
          "BuiltIn": false
        }
      },
      "BuiltIn": false,
      "BeforeDescriptionComment": null,
      "AfterDescriptionComment": null,
      "EndOfDefinitionComment": null
    },
    "Category": {
      "Kind": "OBJECT",
      "Description": "",
      "Name": "Category",
      "Directives": null,
      "Interfaces": null,
      "Fields": [
        {
          "Description": "",
          "Name": "id",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "ID",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 55,
              "End": 57,
              "Line": 4,
              "Column": 8,
              "Src": {
                "Name": "schema/category.graphqls",
                "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 51,
            "End": 53,
            "Line": 4,
            "Column": 4,
            "Src": {
              "Name": "schema/category.graphqls",
              "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "name",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 68,
              "End": 74,
              "Line": 5,
              "Column": 10,
              "Src": {
                "Name": "schema/category.graphqls",
                "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 62,
            "End": 66,
            "Line": 5,
            "Column": 4,
            "Src": {
              "Name": "schema/category.graphqls",
              "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "products",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "",
            "Elem": {
              "NamedType": "Product",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 90,
                "End": 97,
                "Line": 6,
                "Column": 15,
                "Src": {
                  "Name": "schema/category.graphqls",
                  "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "NonNull": false,
            "Position": {
              "Start": 90,
              "End": 97,
              "Line": 6,
              "Column": 15,
              "Src": {
                "Name": "schema/category.graphqls",
                "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 79,
            "End": 87,
            "Line": 6,
            "Column": 4,
            "Src": {
              "Name": "schema/category.graphqls",
              "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        }
      ],
      "Types": null,
      "EnumValues": null,
      "Position": {
        "Start": 37,
        "End": 45,
        "Line": 3,
        "Column": 7,
        "Src": {
          "Name": "schema/category.graphqls",
          "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
          "BuiltIn": false
        }
      },
      "BuiltIn": false,
      "BeforeDescriptionComment": null,
      "AfterDescriptionComment": {
        "List": [
          {
            "Value": "#import \"./product.graphqls\"",
            "Position": {
              "Start": 0,
              "End": 28,
              "Line": 1,
              "Column": 1,
              "Src": {
                "Name": "schema/category.graphqls",
                "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          }
        ]
      },
      "EndOfDefinitionComment": null
    },
    "CreateCartInput": {
      "Kind": "INPUT_OBJECT",
      "Description": "",
      "Name": "CreateCartInput",
      "Directives": null,
      "Interfaces": null,
      "Fields": [
        {
          "Description": "",
          "Name": "isActive",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "Boolean",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 293,
              "End": 300,
              "Line": 20,
              "Column": 14,
              "Src": {
                "Name": "schema/cart.graphqls",
                "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 283,
            "End": 291,
            "Line": 20,
            "Column": 4,
            "Src": {
              "Name": "schema/cart.graphqls",
              "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "value",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "Float",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 312,
              "End": 317,
              "Line": 21,
              "Column": 11,
              "Src": {
                "Name": "schema/cart.graphqls",
                "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 305,
            "End": 310,
            "Line": 21,
            "Column": 4,
            "Src": {
              "Name": "schema/cart.graphqls",
              "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "userId",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "ID",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 330,
              "End": 332,
              "Line": 22,
              "Column": 12,
              "Src": {
                "Name": "schema/cart.graphqls",
                "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 322,
            "End": 328,
            "Line": 22,
            "Column": 4,
            "Src": {
              "Name": "schema/cart.graphqls",
              "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        }
      ],
      "Types": null,
      "EnumValues": null,
      "Position": {
        "Start": 262,
        "End": 277,
        "Line": 19,
        "Column": 8,
        "Src": {
          "Name": "schema/cart.graphqls",
          "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
          "BuiltIn": false
        }
      },
      "BuiltIn": false,
      "BeforeDescriptionComment": null,
      "AfterDescriptionComment": null,
      "EndOfDefinitionComment": null
    },
    "CreateCategoryInput": {
      "Kind": "INPUT_OBJECT",
      "Description": "",
      "Name": "CreateCategoryInput",
      "Directives": null,
      "Interfaces": null,
      "Fields": [
        {
          "Description": "",
          "Name": "name",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 143,
              "End": 149,
              "Line": 10,
              "Column": 10,
              "Src": {
                "Name": "schema/category.graphqls",
                "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 137,
            "End": 141,
            "Line": 10,
            "Column": 4,
            "Src": {
              "Name": "schema/category.graphqls",
              "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        }
      ],
      "Types": null,
      "EnumValues": null,
      "Position": {
        "Start": 112,
        "End": 131,
        "Line": 9,
        "Column": 8,
        "Src": {
          "Name": "schema/category.graphqls",
          "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
          "BuiltIn": false
        }
      },
      "BuiltIn": false,
      "BeforeDescriptionComment": null,
      "AfterDescriptionComment": null,
      "EndOfDefinitionComment": null
    },
    "CreateOrderInput": {
      "Kind": "INPUT_OBJECT",
      "Description": "",
      "Name": "CreateOrderInput",
      "Directives": null,
      "Interfaces": null,
      "Fields": [
        {
          "Description": "",
          "Name": "value",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "Float",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 268,
              "End": 273,
              "Line": 16,
              "Column": 11,
              "Src": {
                "Name": "schema/order.graphqls",
                "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 261,
            "End": 266,
            "Line": 16,
            "Column": 4,
            "Src": {
              "Name": "schema/order.graphqls",
              "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "cartId",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "ID",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 286,
              "End": 288,
              "Line": 17,
              "Column": 12,
              "Src": {
                "Name": "schema/order.graphqls",
                "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 278,
            "End": 284,
            "Line": 17,
            "Column": 4,
            "Src": {
              "Name": "schema/order.graphqls",
              "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        }
      ],
      "Types": null,
      "EnumValues": null,
      "Position": {
        "Start": 239,
        "End": 255,
        "Line": 15,
        "Column": 8,
        "Src": {
          "Name": "schema/order.graphqls",
          "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
          "BuiltIn": false
        }
      },
      "BuiltIn": false,
      "BeforeDescriptionComment": null,
      "AfterDescriptionComment": null,
      "EndOfDefinitionComment": null
    },
    "CreateProductInput": {
      "Kind": "INPUT_OBJECT",
      "Description": "",
      "Name": "CreateProductInput",
      "Directives": null,
      "Interfaces": null,
      "Fields": [
        {
          "Description": "",
          "Name": "name",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 256,
              "End": 262,
              "Line": 16,
              "Column": 10,
              "Src": {
                "Name": "schema/product.graphqls",
                "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 250,
            "End": 254,
            "Line": 16,
            "Column": 4,
            "Src": {
              "Name": "schema/product.graphqls",
              "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "price",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "Float",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 274,
              "End": 279,
              "Line": 17,
              "Column": 11,
              "Src": {
                "Name": "schema/product.graphqls",
                "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 267,
            "End": 272,
            "Line": 17,
            "Column": 4,
            "Src": {
              "Name": "schema/product.graphqls",
              "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "description",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 297,
              "End": 303,
              "Line": 18,
              "Column": 17,
              "Src": {
                "Name": "schema/product.graphqls",
                "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 284,
            "End": 295,
            "Line": 18,
            "Column": 4,
            "Src": {
              "Name": "schema/product.graphqls",
              "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        }
      ],
      "Types": null,
      "EnumValues": null,
      "Position": {
        "Start": 226,
        "End": 244,
        "Line": 15,
        "Column": 8,
        "Src": {
          "Name": "schema/product.graphqls",
          "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
          "BuiltIn": false
        }
      },
      "BuiltIn": false,
      "BeforeDescriptionComment": null,
      "AfterDescriptionComment": null,
      "EndOfDefinitionComment": null
    },
    "CreateUserInput": {
      "Kind": "INPUT_OBJECT",
      "Description": "",
      "Name": "CreateUserInput",
      "Directives": null,
      "Interfaces": null,
      "Fields": [
        {
          "Description": "",
          "Name": "name",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 206,
              "End": 212,
              "Line": 12,
              "Column": 10,
              "Src": {
                "Name": "schema/user.graphqls",
                "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 200,
            "End": 204,
            "Line": 12,
            "Column": 4,
            "Src": {
              "Name": "schema/user.graphqls",
              "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "email",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 224,
              "End": 230,
              "Line": 13,
              "Column": 11,
              "Src": {
                "Name": "schema/user.graphqls",
                "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 217,
            "End": 222,
            "Line": 13,
            "Column": 4,
            "Src": {
              "Name": "schema/user.graphqls",
              "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "password",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 245,
              "End": 251,
              "Line": 14,
              "Column": 14,
              "Src": {
                "Name": "schema/user.graphqls",
                "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 235,
            "End": 243,
            "Line": 14,
            "Column": 4,
            "Src": {
              "Name": "schema/user.graphqls",
              "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        }
      ],
      "Types": null,
      "EnumValues": null,
      "Position": {
        "Start": 179,
        "End": 194,
        "Line": 11,
        "Column": 8,
        "Src": {
          "Name": "schema/user.graphqls",
          "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
          "BuiltIn": false
        }
      },
      "BuiltIn": false,
      "BeforeDescriptionComment": null,
      "AfterDescriptionComment": null,
      "EndOfDefinitionComment": null
    },
    "Float": {
      "Kind": "SCALAR",
      "Description": "The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).",
      "Name": "Float",
      "Directives": null,
      "Interfaces": null,
      "Fields": null,
      "Types": null,
      "EnumValues": null,
      "Position": {
        "Start": 453,
        "End": 458,
        "Line": 7,
        "Column": 8,
        "Src": {
          "Name": "prelude.graphql",
          "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
          "BuiltIn": true
        }
      },
      "BuiltIn": true,
      "BeforeDescriptionComment": null,
      "AfterDescriptionComment": null,
      "EndOfDefinitionComment": null
    },
    "ID": {
      "Kind": "SCALAR",
      "Description": "The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.",
      "Name": "ID",
      "Directives": null,
      "Interfaces": null,
      "Fields": null,
      "Types": null,
      "EnumValues": null,
      "Position": {
        "Start": 1074,
        "End": 1076,
        "Line": 16,
        "Column": 8,
        "Src": {
          "Name": "prelude.graphql",
          "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
          "BuiltIn": true
        }
      },
      "BuiltIn": true,
      "BeforeDescriptionComment": null,
      "AfterDescriptionComment": null,
      "EndOfDefinitionComment": null
    },
    "Int": {
      "Kind": "SCALAR",
      "Description": "The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.",
      "Name": "Int",
      "Directives": null,
      "Interfaces": null,
      "Fields": null,
      "Types": null,
      "EnumValues": null,
      "Position": {
        "Start": 284,
        "End": 287,
        "Line": 4,
        "Column": 8,
        "Src": {
          "Name": "prelude.graphql",
          "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
          "BuiltIn": true
        }
      },
      "BuiltIn": true,
      "BeforeDescriptionComment": {
        "List": [
          {
            "Value": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema",
            "Position": {
              "Start": 0,
              "End": 141,
              "Line": 1,
              "Column": 1,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          }
        ]
      },
      "AfterDescriptionComment": null,
      "EndOfDefinitionComment": null
    },
    "ListProductsInput": {
      "Kind": "INPUT_OBJECT",
      "Description": "",
      "Name": "ListProductsInput",
      "Directives": null,
      "Interfaces": null,
      "Fields": [
        {
          "Description": "",
          "Name": "name",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 444,
              "End": 450,
              "Line": 29,
              "Column": 10,
              "Src": {
                "Name": "schema/product.graphqls",
                "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 438,
            "End": 442,
            "Line": 29,
            "Column": 4,
            "Src": {
              "Name": "schema/product.graphqls",
              "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "price",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "Float",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 461,
              "End": 466,
              "Line": 30,
              "Column": 11,
              "Src": {
                "Name": "schema/product.graphqls",
                "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 454,
            "End": 459,
            "Line": 30,
            "Column": 4,
            "Src": {
              "Name": "schema/product.graphqls",
              "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "order",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 477,
              "End": 483,
              "Line": 31,
              "Column": 11,
              "Src": {
                "Name": "schema/product.graphqls",
                "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 470,
            "End": 475,
            "Line": 31,
            "Column": 4,
            "Src": {
              "Name": "schema/product.graphqls",
              "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "sort",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "SortDirection",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 493,
              "End": 506,
              "Line": 32,
              "Column": 10,
              "Src": {
                "Name": "schema/product.graphqls",
                "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 487,
            "End": 491,
            "Line": 32,
            "Column": 4,
            "Src": {
              "Name": "schema/product.graphqls",
              "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        }
      ],
      "Types": null,
      "EnumValues": null,
      "Position": {
        "Start": 415,
        "End": 432,
        "Line": 28,
        "Column": 8,
        "Src": {
          "Name": "schema/product.graphqls",
          "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
          "BuiltIn": false
        }
      },
      "BuiltIn": false,
      "BeforeDescriptionComment": null,
      "AfterDescriptionComment": null,
      "EndOfDefinitionComment": null
    },
    "LoginInput": {
      "Kind": "INPUT_OBJECT",
      "Description": "",
      "Name": "LoginInput",
      "Directives": null,
      "Interfaces": null,
      "Fields": [
        {
          "Description": "",
          "Name": "email",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 413,
              "End": 419,
              "Line": 26,
              "Column": 11,
              "Src": {
                "Name": "schema/user.graphqls",
                "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 406,
            "End": 411,
            "Line": 26,
            "Column": 4,
            "Src": {
              "Name": "schema/user.graphqls",
              "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "password",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 434,
              "End": 440,
              "Line": 27,
              "Column": 14,
              "Src": {
                "Name": "schema/user.graphqls",
                "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 424,
            "End": 432,
            "Line": 27,
            "Column": 4,
            "Src": {
              "Name": "schema/user.graphqls",
              "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        }
      ],
      "Types": null,
      "EnumValues": null,
      "Position": {
        "Start": 390,
        "End": 400,
        "Line": 25,
        "Column": 8,
        "Src": {
          "Name": "schema/user.graphqls",
          "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
          "BuiltIn": false
        }
      },
      "BuiltIn": false,
      "BeforeDescriptionComment": null,
      "AfterDescriptionComment": null,
      "EndOfDefinitionComment": null
    },
    "Mutation": {
      "Kind": "OBJECT",
      "Description": "",
      "Name": "Mutation",
      "Directives": null,
      "Interfaces": null,
      "Fields": [
        {
          "Description": "",
          "Name": "createCart",
          "Arguments": [
            {
              "Description": "",
              "Name": "input",
              "DefaultValue": null,
              "Type": {
                "NamedType": "CreateCartInput",
                "Elem": null,
                "NonNull": true,
                "Position": {
                  "Start": 557,
                  "End": 572,
                  "Line": 37,
                  "Column": 22,
                  "Src": {
                    "Name": "schema/cart.graphqls",
                    "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                    "BuiltIn": false
                  }
                }
              },
              "Directives": null,
              "Position": {
                "Start": 550,
                "End": 555,
                "Line": 37,
                "Column": 15,
                "Src": {
                  "Name": "schema/cart.graphqls",
                  "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                  "BuiltIn": false
                }
              },
              "BeforeDescriptionComment": null,
              "AfterDescriptionComment": null
            }
          ],
          "DefaultValue": null,
          "Type": {
            "NamedType": "Cart",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 576,
              "End": 580,
              "Line": 37,
              "Column": 41,
              "Src": {
                "Name": "schema/cart.graphqls",
                "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 539,
            "End": 549,
            "Line": 37,
            "Column": 4,
            "Src": {
              "Name": "schema/cart.graphqls",
              "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "addProductToCart",
          "Arguments": [
            {
              "Description": "",
              "Name": "input",
              "DefaultValue": null,
              "Type": {
                "NamedType": "AddProductToCartInput",
                "Elem": null,
                "NonNull": true,
                "Position": {
                  "Start": 608,
                  "End": 629,
                  "Line": 38,
                  "Column": 28,
                  "Src": {
                    "Name": "schema/cart.graphqls",
                    "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                    "BuiltIn": false
                  }
                }
              },
              "Directives": null,
              "Position": {
                "Start": 601,
                "End": 606,
                "Line": 38,
                "Column": 21,
                "Src": {
                  "Name": "schema/cart.graphqls",
                  "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                  "BuiltIn": false
                }
              },
              "BeforeDescriptionComment": null,
              "AfterDescriptionComment": null
            }
          ],
          "DefaultValue": null,
          "Type": {
            "NamedType": "CartProduct",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 633,
              "End": 644,
              "Line": 38,
              "Column": 53,
              "Src": {
                "Name": "schema/cart.graphqls",
                "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 584,
            "End": 600,
            "Line": 38,
            "Column": 4,
            "Src": {
              "Name": "schema/cart.graphqls",
              "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "removeProductFromCart",
          "Arguments": [
            {
              "Description": "",
              "Name": "cartProductID",
              "DefaultValue": null,
              "Type": {
                "NamedType": "ID",
                "Elem": null,
                "NonNull": true,
                "Position": {
                  "Start": 685,
                  "End": 687,
                  "Line": 39,
                  "Column": 41,
                  "Src": {
                    "Name": "schema/cart.graphqls",
                    "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                    "BuiltIn": false
                  }
                }
              },
              "Directives": null,
              "Position": {
                "Start": 670,
                "End": 683,
                "Line": 39,
                "Column": 26,
                "Src": {
                  "Name": "schema/cart.graphqls",
                  "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                  "BuiltIn": false
                }
              },
              "BeforeDescriptionComment": null,
              "AfterDescriptionComment": null
            }
          ],
          "DefaultValue": null,
          "Type": {
            "NamedType": "Cart",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 691,
              "End": 695,
              "Line": 39,
              "Column": 47,
              "Src": {
                "Name": "schema/cart.graphqls",
                "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 648,
            "End": 669,
            "Line": 39,
            "Column": 4,
            "Src": {
              "Name": "schema/cart.graphqls",
              "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "createCategory",
          "Arguments": [
            {
              "Description": "",
              "Name": "input",
              "DefaultValue": null,
              "Type": {
                "NamedType": "CreateCategoryInput",
                "Elem": null,
                "NonNull": true,
                "Position": {
                  "Start": 357,
                  "End": 376,
                  "Line": 24,
                  "Column": 26,
                  "Src": {
                    "Name": "schema/category.graphqls",
                    "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                    "BuiltIn": false
                  }
                }
              },
              "Directives": null,
              "Position": {
                "Start": 350,
                "End": 355,
                "Line": 24,
                "Column": 19,
                "Src": {
                  "Name": "schema/category.graphqls",
                  "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              },
              "BeforeDescriptionComment": null,
              "AfterDescriptionComment": null
            }
          ],
          "DefaultValue": null,
          "Type": {
            "NamedType": "Category",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 380,
              "End": 388,
              "Line": 24,
              "Column": 49,
              "Src": {
                "Name": "schema/category.graphqls",
                "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 335,
            "End": 349,
            "Line": 24,
            "Column": 4,
            "Src": {
              "Name": "schema/category.graphqls",
              "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "updateCategory",
          "Arguments": [
            {
              "Description": "",
              "Name": "input",
              "DefaultValue": null,
              "Type": {
                "NamedType": "UpdateCategoryInput",
                "Elem": null,
                "NonNull": true,
                "Position": {
                  "Start": 414,
                  "End": 433,
                  "Line": 25,
                  "Column": 26,
                  "Src": {
                    "Name": "schema/category.graphqls",
                    "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                    "BuiltIn": false
                  }
                }
              },
              "Directives": null,
              "Position": {
                "Start": 407,
                "End": 412,
                "Line": 25,
                "Column": 19,
                "Src": {
                  "Name": "schema/category.graphqls",
                  "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              },
              "BeforeDescriptionComment": null,
              "AfterDescriptionComment": null
            }
          ],
          "DefaultValue": null,
          "Type": {
            "NamedType": "Category",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 437,
              "End": 445,
              "Line": 25,
              "Column": 49,
              "Src": {
                "Name": "schema/category.graphqls",
                "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 392,
            "End": 406,
            "Line": 25,
            "Column": 4,
            "Src": {
              "Name": "schema/category.graphqls",
              "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "deleteCategory",
          "Arguments": [
            {
              "Description": "",
              "Name": "id",
              "DefaultValue": null,
              "Type": {
                "NamedType": "ID",
                "Elem": null,
                "NonNull": true,
                "Position": {
                  "Start": 468,
                  "End": 470,
                  "Line": 26,
                  "Column": 23,
                  "Src": {
                    "Name": "schema/category.graphqls",
                    "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                    "BuiltIn": false
                  }
                }
              },
              "Directives": null,
              "Position": {
                "Start": 464,
                "End": 466,
                "Line": 26,
                "Column": 19,
                "Src": {
                  "Name": "schema/category.graphqls",
                  "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              },
              "BeforeDescriptionComment": null,
              "AfterDescriptionComment": null
            }
          ],
          "DefaultValue": null,
          "Type": {
            "NamedType": "Boolean",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 474,
              "End": 481,
              "Line": 26,
              "Column": 29,
              "Src": {
                "Name": "schema/category.graphqls",
                "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 449,
            "End": 463,
            "Line": 26,
            "Column": 4,
            "Src": {
              "Name": "schema/category.graphqls",
              "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "createOrder",
          "Arguments": [
            {
              "Description": "",
              "Name": "input",
              "DefaultValue": null,
              "Type": {
                "NamedType": "CreateOrderInput",
                "Elem": null,
                "NonNull": true,
                "Position": {
                  "Start": 565,
                  "End": 581,
                  "Line": 39,
                  "Column": 23,
                  "Src": {
                    "Name": "schema/order.graphqls",
                    "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                    "BuiltIn": false
                  }
                }
              },
              "Directives": null,
              "Position": {
                "Start": 558,
                "End": 563,
                "Line": 39,
                "Column": 16,
                "Src": {
                  "Name": "schema/order.graphqls",
                  "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                  "BuiltIn": false
                }
              },
              "BeforeDescriptionComment": null,
              "AfterDescriptionComment": null
            }
          ],
          "DefaultValue": null,
          "Type": {
            "NamedType": "Order",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 585,
              "End": 590,
              "Line": 39,
              "Column": 43,
              "Src": {
                "Name": "schema/order.graphqls",
                "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 546,
            "End": 557,
            "Line": 39,
            "Column": 4,
            "Src": {
              "Name": "schema/order.graphqls",
              "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "deleteOrder",
          "Arguments": [
            {
              "Description": "",
              "Name": "id",
              "DefaultValue": null,
              "Type": {
                "NamedType": "ID",
                "Elem": null,
                "NonNull": true,
                "Position": {
                  "Start": 611,
                  "End": 613,
                  "Line": 40,
                  "Column": 20,
                  "Src": {
                    "Name": "schema/order.graphqls",
                    "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                    "BuiltIn": false
                  }
                }
              },
              "Directives": null,
              "Position": {
                "Start": 607,
                "End": 609,
                "Line": 40,
                "Column": 16,
                "Src": {
                  "Name": "schema/order.graphqls",
                  "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                  "BuiltIn": false
                }
              },
              "BeforeDescriptionComment": null,
              "AfterDescriptionComment": null
            }
          ],
          "DefaultValue": null,
          "Type": {
            "NamedType": "Order",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 617,
              "End": 622,
              "Line": 40,
              "Column": 26,
              "Src": {
                "Name": "schema/order.graphqls",
                "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 595,
            "End": 606,
            "Line": 40,
            "Column": 4,
            "Src": {
              "Name": "schema/order.graphqls",
              "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "createProduct",
          "Arguments": [
            {
              "Description": "",
              "Name": "input",
              "DefaultValue": null,
              "Type": {
                "NamedType": "CreateProductInput",
                "Elem": null,
                "NonNull": true,
                "Position": {
                  "Start": 714,
                  "End": 732,
                  "Line": 46,
                  "Column": 25,
                  "Src": {
                    "Name": "schema/product.graphqls",
                    "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                    "BuiltIn": false
                  }
                }
              },
              "Directives": null,
              "Position": {
                "Start": 707,
                "End": 712,
                "Line": 46,
                "Column": 18,
                "Src": {
                  "Name": "schema/product.graphqls",
                  "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              },
              "BeforeDescriptionComment": null,
              "AfterDescriptionComment": null
            }
          ],
          "DefaultValue": null,
          "Type": {
            "NamedType": "Product",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 736,
              "End": 743,
              "Line": 46,
              "Column": 47,
              "Src": {
                "Name": "schema/product.graphqls",
                "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 693,
            "End": 706,
            "Line": 46,
            "Column": 4,
            "Src": {
              "Name": "schema/product.graphqls",
              "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "updateProduct",
          "Arguments": [
            {
              "Description": "",
              "Name": "input",
              "DefaultValue": null,
              "Type": {
                "NamedType": "UpdateProductInput",
                "Elem": null,
                "NonNull": true,
                "Position": {
                  "Start": 768,
                  "End": 786,
                  "Line": 47,
                  "Column": 25,
                  "Src": {
                    "Name": "schema/product.graphqls",
                    "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                    "BuiltIn": false
                  }
                }
              },
              "Directives": null,
              "Position": {
                "Start": 761,
                "End": 766,
                "Line": 47,
                "Column": 18,
                "Src": {
                  "Name": "schema/product.graphqls",
                  "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              },
              "BeforeDescriptionComment": null,
              "AfterDescriptionComment": null
            }
          ],
          "DefaultValue": null,
          "Type": {
            "NamedType": "Product",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 790,
              "End": 797,
              "Line": 47,
              "Column": 47,
              "Src": {
                "Name": "schema/product.graphqls",
                "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 747,
            "End": 760,
            "Line": 47,
            "Column": 4,
            "Src": {
              "Name": "schema/product.graphqls",
              "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "deleteProduct",
          "Arguments": [
            {
              "Description": "",
              "Name": "id",
              "DefaultValue": null,
              "Type": {
                "NamedType": "ID",
                "Elem": null,
                "NonNull": true,
                "Position": {
                  "Start": 819,
                  "End": 821,
                  "Line": 48,
                  "Column": 22,
                  "Src": {
                    "Name": "schema/product.graphqls",
                    "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                    "BuiltIn": false
                  }
                }
              },
              "Directives": null,
              "Position": {
                "Start": 815,
                "End": 817,
                "Line": 48,
                "Column": 18,
                "Src": {
                  "Name": "schema/product.graphqls",
                  "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              },
              "BeforeDescriptionComment": null,
              "AfterDescriptionComment": null
            }
          ],
          "DefaultValue": null,
          "Type": {
            "NamedType": "Boolean",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 825,
              "End": 832,
              "Line": 48,
              "Column": 28,
              "Src": {
                "Name": "schema/product.graphqls",
                "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 801,
            "End": 814,
            "Line": 48,
            "Column": 4,
            "Src": {
              "Name": "schema/product.graphqls",
              "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "login",
          "Arguments": [
            {
              "Description": "",
              "Name": "LoginInput",
              "DefaultValue": null,
              "Type": {
                "NamedType": "LoginInput",
                "Elem": null,
                "NonNull": true,
                "Position": {
                  "Start": 566,
                  "End": 576,
                  "Line": 36,
                  "Column": 22,
                  "Src": {
                    "Name": "schema/user.graphqls",
                    "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                    "BuiltIn": false
                  }
                }
              },
              "Directives": null,
              "Position": {
                "Start": 554,
                "End": 564,
                "Line": 36,
                "Column": 10,
                "Src": {
                  "Name": "schema/user.graphqls",
                  "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              },
              "BeforeDescriptionComment": null,
              "AfterDescriptionComment": null
            }
          ],
          "DefaultValue": null,
          "Type": {
            "NamedType": "User",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 580,
              "End": 584,
              "Line": 36,
              "Column": 36,
              "Src": {
                "Name": "schema/user.graphqls",
                "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 548,
            "End": 553,
            "Line": 36,
            "Column": 4,
            "Src": {
              "Name": "schema/user.graphqls",
              "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "registerUser",
          "Arguments": [
            {
              "Description": "",
              "Name": "input",
              "DefaultValue": null,
              "Type": {
                "NamedType": "CreateUserInput",
                "Elem": null,
                "NonNull": true,
                "Position": {
                  "Start": 608,
                  "End": 623,
                  "Line": 37,
                  "Column": 24,
                  "Src": {
                    "Name": "schema/user.graphqls",
                    "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                    "BuiltIn": false
                  }
                }
              },
              "Directives": null,
              "Position": {
                "Start": 601,
                "End": 606,
                "Line": 37,
                "Column": 17,
                "Src": {
                  "Name": "schema/user.graphqls",
                  "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              },
              "BeforeDescriptionComment": null,
              "AfterDescriptionComment": null
            }
          ],
          "DefaultValue": null,
          "Type": {
            "NamedType": "User",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 627,
              "End": 631,
              "Line": 37,
              "Column": 43,
              "Src": {
                "Name": "schema/user.graphqls",
                "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 588,
            "End": 600,
            "Line": 37,
            "Column": 4,
            "Src": {
              "Name": "schema/user.graphqls",
              "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "updateUser",
          "Arguments": [
            {
              "Description": "",
              "Name": "input",
              "DefaultValue": null,
              "Type": {
                "NamedType": "UpdateUserInput",
                "Elem": null,
                "NonNull": true,
                "Position": {
                  "Start": 653,
                  "End": 668,
                  "Line": 38,
                  "Column": 22,
                  "Src": {
                    "Name": "schema/user.graphqls",
                    "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                    "BuiltIn": false
                  }
                }
              },
              "Directives": null,
              "Position": {
                "Start": 646,
                "End": 651,
                "Line": 38,
                "Column": 15,
                "Src": {
                  "Name": "schema/user.graphqls",
                  "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              },
              "BeforeDescriptionComment": null,
              "AfterDescriptionComment": null
            }
          ],
          "DefaultValue": null,
          "Type": {
            "NamedType": "User",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 672,
              "End": 676,
              "Line": 38,
              "Column": 41,
              "Src": {
                "Name": "schema/user.graphqls",
                "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 635,
            "End": 645,
            "Line": 38,
            "Column": 4,
            "Src": {
              "Name": "schema/user.graphqls",
              "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "deleteUser",
          "Arguments": [
            {
              "Description": "",
              "Name": "id",
              "DefaultValue": null,
              "Type": {
                "NamedType": "ID",
                "Elem": null,
                "NonNull": true,
                "Position": {
                  "Start": 695,
                  "End": 697,
                  "Line": 39,
                  "Column": 19,
                  "Src": {
                    "Name": "schema/user.graphqls",
                    "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                    "BuiltIn": false
                  }
                }
              },
              "Directives": null,
              "Position": {
                "Start": 691,
                "End": 693,
                "Line": 39,
                "Column": 15,
                "Src": {
                  "Name": "schema/user.graphqls",
                  "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              },
              "BeforeDescriptionComment": null,
              "AfterDescriptionComment": null
            }
          ],
          "DefaultValue": null,
          "Type": {
            "NamedType": "Boolean",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 701,
              "End": 708,
              "Line": 39,
              "Column": 25,
              "Src": {
                "Name": "schema/user.graphqls",
                "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 680,
            "End": 690,
            "Line": 39,
            "Column": 4,
            "Src": {
              "Name": "schema/user.graphqls",
              "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        }
      ],
      "Types": null,
      "EnumValues": null,
      "Position": {
        "Start": 17,
        "End": 25,
        "Line": 3,
        "Column": 6,
        "Src": {
          "Name": "schema/schema.graphqls",
          "Input": "type Query\n\ntype Mutation\n\ntype Subscription\n\nschema {\n  query: Query\n  mutation: Mutation\n  subscription: Subscription\n}\n\nscalar Time\n\ndirective @length(min: Int, max: Int) on FIELD_DEFINITION\ndirective @email on FIELD_DEFINITION\n",
          "BuiltIn": false
        }
      },
      "BuiltIn": false,
      "BeforeDescriptionComment": null,
      "AfterDescriptionComment": null,
      "EndOfDefinitionComment": null
    },
    "Order": {
      "Kind": "OBJECT",
      "Description": "",
      "Name": "Order",
      "Directives": null,
      "Interfaces": null,
      "Fields": [
        {
          "Description": "",
          "Name": "id",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "ID",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 76,
              "End": 78,
              "Line": 5,
              "Column": 8,
              "Src": {
                "Name": "schema/order.graphqls",
                "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 72,
            "End": 74,
            "Line": 5,
            "Column": 4,
            "Src": {
              "Name": "schema/order.graphqls",
              "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "value",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "Float",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 90,
              "End": 95,
              "Line": 6,
              "Column": 11,
              "Src": {
                "Name": "schema/order.graphqls",
                "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 83,
            "End": 88,
            "Line": 6,
            "Column": 4,
            "Src": {
              "Name": "schema/order.graphqls",
              "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "paymentStatus",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "PaymentStatus",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 115,
              "End": 128,
              "Line": 7,
              "Column": 19,
              "Src": {
                "Name": "schema/order.graphqls",
                "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 100,
            "End": 113,
            "Line": 7,
            "Column": 4,
            "Src": {
              "Name": "schema/order.graphqls",
              "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "billingType",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "BillingType",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 145,
              "End": 156,
              "Line": 8,
              "Column": 17,
              "Src": {
                "Name": "schema/order.graphqls",
                "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 132,
            "End": 143,
            "Line": 8,
            "Column": 4,
            "Src": {
              "Name": "schema/order.graphqls",
              "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "cart",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "Cart",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 166,
              "End": 170,
              "Line": 9,
              "Column": 10,
              "Src": {
                "Name": "schema/order.graphqls",
                "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 160,
            "End": 164,
            "Line": 9,
            "Column": 4,
            "Src": {
              "Name": "schema/order.graphqls",
              "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "user",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "User",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 181,
              "End": 185,
              "Line": 10,
              "Column": 10,
              "Src": {
                "Name": "schema/order.graphqls",
                "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 175,
            "End": 179,
            "Line": 10,
            "Column": 4,
            "Src": {
              "Name": "schema/order.graphqls",
              "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "createdAt",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "Time",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 201,
              "End": 205,
              "Line": 11,
              "Column": 15,
              "Src": {
                "Name": "schema/order.graphqls",
                "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 190,
            "End": 199,
            "Line": 11,
            "Column": 4,
            "Src": {
              "Name": "schema/order.graphqls",
              "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "updatedAt",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "Time",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 221,
              "End": 225,
              "Line": 12,
              "Column": 15,
              "Src": {
                "Name": "schema/order.graphqls",
                "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 210,
            "End": 219,
            "Line": 12,
            "Column": 4,
            "Src": {
              "Name": "schema/order.graphqls",
              "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        }
      ],
      "Types": null,
      "EnumValues": null,
      "Position": {
        "Start": 61,
        "End": 66,
        "Line": 4,
        "Column": 7,
        "Src": {
          "Name": "schema/order.graphqls",
          "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
          "BuiltIn": false
        }
      },
      "BuiltIn": false,
      "BeforeDescriptionComment": null,
      "AfterDescriptionComment": {
        "List": [
          {
            "Value": "#import \"./cart.graphqls\"",
            "Position": {
              "Start": 0,
              "End": 25,
              "Line": 1,
              "Column": 1,
              "Src": {
                "Name": "schema/order.graphqls",
                "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          {
            "Value": "#import \"./user.graphqls\"",
            "Position": {
              "Start": 27,
              "End": 52,
              "Line": 2,
              "Column": 2,
              "Src": {
                "Name": "schema/order.graphqls",
                "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                "BuiltIn": false
              }
            }
          }
        ]
      },
      "EndOfDefinitionComment": null
    },
    "PaymentStatus": {
      "Kind": "ENUM",
      "Description": "",
      "Name": "PaymentStatus",
      "Directives": null,
      "Interfaces": null,
      "Fields": null,
      "Types": null,
      "EnumValues": [
        {
          "Description": "",
          "Name": "PENDING",
          "Directives": null,
          "Position": {
            "Start": 320,
            "End": 327,
            "Line": 21,
            "Column": 4,
            "Src": {
              "Name": "schema/order.graphqls",
              "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "CONFIRMED",
          "Directives": null,
          "Position": {
            "Start": 331,
            "End": 340,
            "Line": 22,
            "Column": 4,
            "Src": {
              "Name": "schema/order.graphqls",
              "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "OVERDUE",
          "Directives": null,
          "Position": {
            "Start": 344,
            "End": 351,
            "Line": 23,
            "Column": 4,
            "Src": {
              "Name": "schema/order.graphqls",
              "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        }
      ],
      "Position": {
        "Start": 301,
        "End": 314,
        "Line": 20,
        "Column": 7,
        "Src": {
          "Name": "schema/order.graphqls",
          "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
          "BuiltIn": false
        }
      },
      "BuiltIn": false,
      "BeforeDescriptionComment": null,
      "AfterDescriptionComment": null,
      "EndOfDefinitionComment": null
    },
    "Product": {
      "Kind": "OBJECT",
      "Description": "",
      "Name": "Product",
      "Directives": null,
      "Interfaces": null,
      "Fields": [
        {
          "Description": "",
          "Name": "id",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "ID",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 55,
              "End": 57,
              "Line": 4,
              "Column": 8,
              "Src": {
                "Name": "schema/product.graphqls",
                "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 51,
            "End": 53,
            "Line": 4,
            "Column": 4,
            "Src": {
              "Name": "schema/product.graphqls",
              "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "name",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 68,
              "End": 74,
              "Line": 5,
              "Column": 10,
              "Src": {
                "Name": "schema/product.graphqls",
                "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 62,
            "End": 66,
            "Line": 5,
            "Column": 4,
            "Src": {
              "Name": "schema/product.graphqls",
              "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "price",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "Float",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 86,
              "End": 91,
              "Line": 6,
              "Column": 11,
              "Src": {
                "Name": "schema/product.graphqls",
                "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 79,
            "End": 84,
            "Line": 6,
            "Column": 4,
            "Src": {
              "Name": "schema/product.graphqls",
              "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "description",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 109,
              "End": 115,
              "Line": 7,
              "Column": 17,
              "Src": {
                "Name": "schema/product.graphqls",
                "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 96,
            "End": 107,
            "Line": 7,
            "Column": 4,
            "Src": {
              "Name": "schema/product.graphqls",
              "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "categoryID",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "ID",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 131,
              "End": 133,
              "Line": 8,
              "Column": 16,
              "Src": {
                "Name": "schema/product.graphqls",
                "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 119,
            "End": 129,
            "Line": 8,
            "Column": 4,
            "Src": {
              "Name": "schema/product.graphqls",
              "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "category",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "Category",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 147,
              "End": 155,
              "Line": 9,
              "Column": 14,
              "Src": {
                "Name": "schema/product.graphqls",
                "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 137,
            "End": 145,
            "Line": 9,
            "Column": 4,
            "Src": {
              "Name": "schema/product.graphqls",
              "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "carts",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "",
            "Elem": {
              "NamedType": "Cart",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 167,
                "End": 171,
                "Line": 10,
                "Column": 12,
                "Src": {
                  "Name": "schema/product.graphqls",
                  "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "NonNull": false,
            "Position": {
              "Start": 167,
              "End": 171,
              "Line": 10,
              "Column": 12,
              "Src": {
                "Name": "schema/product.graphqls",
                "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 159,
            "End": 164,
            "Line": 10,
            "Column": 4,
            "Src": {
              "Name": "schema/product.graphqls",
              "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "createdAt",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "Time",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 188,
              "End": 192,
              "Line": 11,
              "Column": 15,
              "Src": {
                "Name": "schema/product.graphqls",
                "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 177,
            "End": 186,
            "Line": 11,
            "Column": 4,
            "Src": {
              "Name": "schema/product.graphqls",
              "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "updatedAt",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "Time",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 208,
              "End": 212,
              "Line": 12,
              "Column": 15,
              "Src": {
                "Name": "schema/product.graphqls",
                "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 197,
            "End": 206,
            "Line": 12,
            "Column": 4,
            "Src": {
              "Name": "schema/product.graphqls",
              "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        }
      ],
      "Types": null,
      "EnumValues": null,
      "Position": {
        "Start": 38,
        "End": 45,
        "Line": 3,
        "Column": 7,
        "Src": {
          "Name": "schema/product.graphqls",
          "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
          "BuiltIn": false
        }
      },
      "BuiltIn": false,
      "BeforeDescriptionComment": null,
      "AfterDescriptionComment": {
        "List": [
          {
            "Value": "#import \"./category.graphqls\"",
            "Position": {
              "Start": 0,
              "End": 29,
              "Line": 1,
              "Column": 1,
              "Src": {
                "Name": "schema/product.graphqls",
                "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          }
        ]
      },
      "EndOfDefinitionComment": null
    },
    "Query": {
      "Kind": "OBJECT",
      "Description": "",
      "Name": "Query",
      "Directives": null,
      "Interfaces": null,
      "Fields": [
        {
          "Description": "",
          "Name": "getCart",
          "Arguments": [
            {
              "Description": "",
              "Name": "id",
              "DefaultValue": null,
              "Type": {
                "NamedType": "ID",
                "Elem": null,
                "NonNull": true,
                "Position": {
                  "Start": 462,
                  "End": 464,
                  "Line": 32,
                  "Column": 16,
                  "Src": {
                    "Name": "schema/cart.graphqls",
                    "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                    "BuiltIn": false
                  }
                }
              },
              "Directives": null,
              "Position": {
                "Start": 458,
                "End": 460,
                "Line": 32,
                "Column": 12,
                "Src": {
                  "Name": "schema/cart.graphqls",
                  "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                  "BuiltIn": false
                }
              },
              "BeforeDescriptionComment": null,
              "AfterDescriptionComment": null
            }
          ],
          "DefaultValue": null,
          "Type": {
            "NamedType": "Cart",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 468,
              "End": 472,
              "Line": 32,
              "Column": 22,
              "Src": {
                "Name": "schema/cart.graphqls",
                "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 450,
            "End": 457,
            "Line": 32,
            "Column": 4,
            "Src": {
              "Name": "schema/cart.graphqls",
              "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "listCarts",
          "Arguments": [
            {
              "Description": "",
              "Name": "userID",
              "DefaultValue": null,
              "Type": {
                "NamedType": "ID",
                "Elem": null,
                "NonNull": true,
                "Position": {
                  "Start": 494,
                  "End": 496,
                  "Line": 33,
                  "Column": 22,
                  "Src": {
                    "Name": "schema/cart.graphqls",
                    "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                    "BuiltIn": false
                  }
                }
              },
              "Directives": null,
              "Position": {
                "Start": 486,
                "End": 492,
                "Line": 33,
                "Column": 14,
                "Src": {
                  "Name": "schema/cart.graphqls",
                  "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                  "BuiltIn": false
                }
              },
              "BeforeDescriptionComment": null,
              "AfterDescriptionComment": null
            }
          ],
          "DefaultValue": null,
          "Type": {
            "NamedType": "",
            "Elem": {
              "NamedType": "Cart",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 501,
                "End": 505,
                "Line": 33,
                "Column": 29,
                "Src": {
                  "Name": "schema/cart.graphqls",
                  "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "NonNull": false,
            "Position": {
              "Start": 501,
              "End": 505,
              "Line": 33,
              "Column": 29,
              "Src": {
                "Name": "schema/cart.graphqls",
                "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 476,
            "End": 485,
            "Line": 33,
            "Column": 4,
            "Src": {
              "Name": "schema/cart.graphqls",
              "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "getCategory",
          "Arguments": [
            {
              "Description": "",
              "Name": "id",
              "DefaultValue": null,
              "Type": {
                "NamedType": "ID",
                "Elem": null,
                "NonNull": true,
                "Position": {
                  "Start": 257,
                  "End": 259,
                  "Line": 19,
                  "Column": 20,
                  "Src": {
                    "Name": "schema/category.graphqls",
                    "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                    "BuiltIn": false
                  }
                }
              },
              "Directives": null,
              "Position": {
                "Start": 253,
                "End": 255,
                "Line": 19,
                "Column": 16,
                "Src": {
                  "Name": "schema/category.graphqls",
                  "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              },
              "BeforeDescriptionComment": null,
              "AfterDescriptionComment": null
            }
          ],
          "DefaultValue": null,
          "Type": {
            "NamedType": "Category",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 263,
              "End": 271,
              "Line": 19,
              "Column": 26,
              "Src": {
                "Name": "schema/category.graphqls",
                "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 241,
            "End": 252,
            "Line": 19,
            "Column": 4,
            "Src": {
              "Name": "schema/category.graphqls",
              "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "listCategories",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "",
            "Elem": {
              "NamedType": "Category",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 292,
                "End": 300,
                "Line": 20,
                "Column": 21,
                "Src": {
                  "Name": "schema/category.graphqls",
                  "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "NonNull": false,
            "Position": {
              "Start": 292,
              "End": 300,
              "Line": 20,
              "Column": 21,
              "Src": {
                "Name": "schema/category.graphqls",
                "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 275,
            "End": 289,
            "Line": 20,
            "Column": 4,
            "Src": {
              "Name": "schema/category.graphqls",
              "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "getOrder",
          "Arguments": [
            {
              "Description": "",
              "Name": "id",
              "DefaultValue": null,
              "Type": {
                "NamedType": "ID",
                "Elem": null,
                "NonNull": true,
                "Position": {
                  "Start": 465,
                  "End": 467,
                  "Line": 34,
                  "Column": 17,
                  "Src": {
                    "Name": "schema/order.graphqls",
                    "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                    "BuiltIn": false
                  }
                }
              },
              "Directives": null,
              "Position": {
                "Start": 461,
                "End": 463,
                "Line": 34,
                "Column": 13,
                "Src": {
                  "Name": "schema/order.graphqls",
                  "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                  "BuiltIn": false
                }
              },
              "BeforeDescriptionComment": null,
              "AfterDescriptionComment": null
            }
          ],
          "DefaultValue": null,
          "Type": {
            "NamedType": "Order",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 471,
              "End": 476,
              "Line": 34,
              "Column": 23,
              "Src": {
                "Name": "schema/order.graphqls",
                "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 452,
            "End": 460,
            "Line": 34,
            "Column": 4,
            "Src": {
              "Name": "schema/order.graphqls",
              "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "listOrders",
          "Arguments": [
            {
              "Description": "",
              "Name": "userID",
              "DefaultValue": null,
              "Type": {
                "NamedType": "ID",
                "Elem": null,
                "NonNull": true,
                "Position": {
                  "Start": 499,
                  "End": 501,
                  "Line": 35,
                  "Column": 23,
                  "Src": {
                    "Name": "schema/order.graphqls",
                    "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                    "BuiltIn": false
                  }
                }
              },
              "Directives": null,
              "Position": {
                "Start": 491,
                "End": 497,
                "Line": 35,
                "Column": 15,
                "Src": {
                  "Name": "schema/order.graphqls",
                  "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                  "BuiltIn": false
                }
              },
              "BeforeDescriptionComment": null,
              "AfterDescriptionComment": null
            }
          ],
          "DefaultValue": null,
          "Type": {
            "NamedType": "",
            "Elem": {
              "NamedType": "Order",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 506,
                "End": 511,
                "Line": 35,
                "Column": 30,
                "Src": {
                  "Name": "schema/order.graphqls",
                  "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "NonNull": false,
            "Position": {
              "Start": 506,
              "End": 511,
              "Line": 35,
              "Column": 30,
              "Src": {
                "Name": "schema/order.graphqls",
                "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 480,
            "End": 490,
            "Line": 35,
            "Column": 4,
            "Src": {
              "Name": "schema/order.graphqls",
              "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "getProduct",
          "Arguments": [
            {
              "Description": "",
              "Name": "id",
              "DefaultValue": null,
              "Type": {
                "NamedType": "ID",
                "Elem": null,
                "NonNull": true,
                "Position": {
                  "Start": 593,
                  "End": 595,
                  "Line": 41,
                  "Column": 19,
                  "Src": {
                    "Name": "schema/product.graphqls",
                    "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                    "BuiltIn": false
                  }
                }
              },
              "Directives": null,
              "Position": {
                "Start": 589,
                "End": 591,
                "Line": 41,
                "Column": 15,
                "Src": {
                  "Name": "schema/product.graphqls",
                  "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              },
              "BeforeDescriptionComment": null,
              "AfterDescriptionComment": null
            }
          ],
          "DefaultValue": null,
          "Type": {
            "NamedType": "Product",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 599,
              "End": 606,
              "Line": 41,
              "Column": 25,
              "Src": {
                "Name": "schema/product.graphqls",
                "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 578,
            "End": 588,
            "Line": 41,
            "Column": 4,
            "Src": {
              "Name": "schema/product.graphqls",
              "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "listProducts",
          "Arguments": [
            {
              "Description": "",
              "Name": "input",
              "DefaultValue": null,
              "Type": {
                "NamedType": "ListProductsInput",
                "Elem": null,
                "NonNull": false,
                "Position": {
                  "Start": 630,
                  "End": 647,
                  "Line": 42,
                  "Column": 24,
                  "Src": {
                    "Name": "schema/product.graphqls",
                    "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                    "BuiltIn": false
                  }
                }
              },
              "Directives": null,
              "Position": {
                "Start": 623,
                "End": 628,
                "Line": 42,
                "Column": 17,
                "Src": {
                  "Name": "schema/product.graphqls",
                  "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              },
              "BeforeDescriptionComment": null,
              "AfterDescriptionComment": null
            }
          ],
          "DefaultValue": null,
          "Type": {
            "NamedType": "",
            "Elem": {
              "NamedType": "Product",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 651,
                "End": 658,
                "Line": 42,
                "Column": 45,
                "Src": {
                  "Name": "schema/product.graphqls",
                  "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "NonNull": false,
            "Position": {
              "Start": 651,
              "End": 658,
              "Line": 42,
              "Column": 45,
              "Src": {
                "Name": "schema/product.graphqls",
                "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 610,
            "End": 622,
            "Line": 42,
            "Column": 4,
            "Src": {
              "Name": "schema/product.graphqls",
              "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "getUser",
          "Arguments": [
            {
              "Description": "",
              "Name": "id",
              "DefaultValue": null,
              "Type": {
                "NamedType": "ID",
                "Elem": null,
                "NonNull": true,
                "Position": {
                  "Start": 483,
                  "End": 485,
                  "Line": 31,
                  "Column": 16,
                  "Src": {
                    "Name": "schema/user.graphqls",
                    "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                    "BuiltIn": false
                  }
                }
              },
              "Directives": null,
              "Position": {
                "Start": 479,
                "End": 481,
                "Line": 31,
                "Column": 12,
                "Src": {
                  "Name": "schema/user.graphqls",
                  "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              },
              "BeforeDescriptionComment": null,
              "AfterDescriptionComment": null
            }
          ],
          "DefaultValue": null,
          "Type": {
            "NamedType": "User",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 489,
              "End": 493,
              "Line": 31,
              "Column": 22,
              "Src": {
                "Name": "schema/user.graphqls",
                "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 471,
            "End": 478,
            "Line": 31,
            "Column": 4,
            "Src": {
              "Name": "schema/user.graphqls",
              "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "listUsers",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "",
            "Elem": {
              "NamedType": "User",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 509,
                "End": 513,
                "Line": 32,
                "Column": 16,
                "Src": {
                  "Name": "schema/user.graphqls",
                  "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "NonNull": false,
            "Position": {
              "Start": 509,
              "End": 513,
              "Line": 32,
              "Column": 16,
              "Src": {
                "Name": "schema/user.graphqls",
                "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 497,
            "End": 506,
            "Line": 32,
            "Column": 4,
            "Src": {
              "Name": "schema/user.graphqls",
              "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "__schema",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "__Schema",
            "Elem": null,
            "NonNull": true,
            "Position": null
          },
          "Directives": null,
          "Position": null,
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "__type",
          "Arguments": [
            {
              "Description": "",
              "Name": "name",
              "DefaultValue": null,
              "Type": {
                "NamedType": "String",
                "Elem": null,
                "NonNull": true,
                "Position": null
              },
              "Directives": null,
              "Position": null,
              "BeforeDescriptionComment": null,
              "AfterDescriptionComment": null
            }
          ],
          "DefaultValue": null,
          "Type": {
            "NamedType": "__Type",
            "Elem": null,
            "NonNull": false,
            "Position": null
          },
          "Directives": null,
          "Position": null,
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        }
      ],
      "Types": null,
      "EnumValues": null,
      "Position": {
        "Start": 5,
        "End": 10,
        "Line": 1,
        "Column": 6,
        "Src": {
          "Name": "schema/schema.graphqls",
          "Input": "type Query\n\ntype Mutation\n\ntype Subscription\n\nschema {\n  query: Query\n  mutation: Mutation\n  subscription: Subscription\n}\n\nscalar Time\n\ndirective @length(min: Int, max: Int) on FIELD_DEFINITION\ndirective @email on FIELD_DEFINITION\n",
          "BuiltIn": false
        }
      },
      "BuiltIn": false,
      "BeforeDescriptionComment": null,
      "AfterDescriptionComment": null,
      "EndOfDefinitionComment": null
    },
    "SortDirection": {
      "Kind": "ENUM",
      "Description": "",
      "Name": "SortDirection",
      "Directives": null,
      "Interfaces": null,
      "Fields": null,
      "Types": null,
      "EnumValues": [
        {
          "Description": "",
          "Name": "ASC",
          "Directives": null,
          "Position": {
            "Start": 537,
            "End": 540,
            "Line": 36,
            "Column": 4,
            "Src": {
              "Name": "schema/product.graphqls",
              "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "DESC",
          "Directives": null,
          "Position": {
            "Start": 544,
            "End": 548,
            "Line": 37,
            "Column": 4,
            "Src": {
              "Name": "schema/product.graphqls",
              "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        }
      ],
      "Position": {
        "Start": 518,
        "End": 531,
        "Line": 35,
        "Column": 7,
        "Src": {
          "Name": "schema/product.graphqls",
          "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
          "BuiltIn": false
        }
      },
      "BuiltIn": false,
      "BeforeDescriptionComment": null,
      "AfterDescriptionComment": null,
      "EndOfDefinitionComment": null
    },
    "String": {
      "Kind": "SCALAR",
      "Description": "The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.",
      "Name": "String",
      "Directives": null,
      "Interfaces": null,
      "Fields": null,
      "Types": null,
      "EnumValues": null,
      "Position": {
        "Start": 650,
        "End": 656,
        "Line": 10,
        "Column": 8,
        "Src": {
          "Name": "prelude.graphql",
          "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
          "BuiltIn": true
        }
      },
      "BuiltIn": true,
      "BeforeDescriptionComment": null,
      "AfterDescriptionComment": null,
      "EndOfDefinitionComment": null
    },
    "Subscription": {
      "Kind": "OBJECT",
      "Description": "",
      "Name": "Subscription",
      "Directives": null,
      "Interfaces": null,
      "Fields": [
        {
          "Description": "",
          "Name": "orderPaymentUpdate",
          "Arguments": [
            {
              "Description": "",
              "Name": "orderId",
              "DefaultValue": null,
              "Type": {
                "NamedType": "ID",
                "Elem": null,
                "NonNull": true,
                "Position": {
                  "Start": 688,
                  "End": 690,
                  "Line": 44,
                  "Column": 32,
                  "Src": {
                    "Name": "schema/order.graphqls",
                    "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                    "BuiltIn": false
                  }
                }
              },
              "Directives": null,
              "Position": {
                "Start": 679,
                "End": 686,
                "Line": 44,
                "Column": 23,
                "Src": {
                  "Name": "schema/order.graphqls",
                  "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                  "BuiltIn": false
                }
              },
              "BeforeDescriptionComment": null,
              "AfterDescriptionComment": null
            }
          ],
          "DefaultValue": null,
          "Type": {
            "NamedType": "Order",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 694,
              "End": 699,
              "Line": 44,
              "Column": 38,
              "Src": {
                "Name": "schema/order.graphqls",
                "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 660,
            "End": 678,
            "Line": 44,
            "Column": 4,
            "Src": {
              "Name": "schema/order.graphqls",
              "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        }
      ],
      "Types": null,
      "EnumValues": null,
      "Position": {
        "Start": 32,
        "End": 44,
        "Line": 5,
        "Column": 6,
        "Src": {
          "Name": "schema/schema.graphqls",
          "Input": "type Query\n\ntype Mutation\n\ntype Subscription\n\nschema {\n  query: Query\n  mutation: Mutation\n  subscription: Subscription\n}\n\nscalar Time\n\ndirective @length(min: Int, max: Int) on FIELD_DEFINITION\ndirective @email on FIELD_DEFINITION\n",
          "BuiltIn": false
        }
      },
      "BuiltIn": false,
      "BeforeDescriptionComment": null,
      "AfterDescriptionComment": null,
      "EndOfDefinitionComment": null
    },
    "Time": {
      "Kind": "SCALAR",
      "Description": "",
      "Name": "Time",
      "Directives": null,
      "Interfaces": null,
      "Fields": null,
      "Types": null,
      "EnumValues": null,
      "Position": {
        "Start": 130,
        "End": 134,
        "Line": 13,
        "Column": 8,
        "Src": {
          "Name": "schema/schema.graphqls",
          "Input": "type Query\n\ntype Mutation\n\ntype Subscription\n\nschema {\n  query: Query\n  mutation: Mutation\n  subscription: Subscription\n}\n\nscalar Time\n\ndirective @length(min: Int, max: Int) on FIELD_DEFINITION\ndirective @email on FIELD_DEFINITION\n",
          "BuiltIn": false
        }
      },
      "BuiltIn": false,
      "BeforeDescriptionComment": null,
      "AfterDescriptionComment": null,
      "EndOfDefinitionComment": null
    },
    "UpdateCategoryInput": {
      "Kind": "INPUT_OBJECT",
      "Description": "",
      "Name": "UpdateCategoryInput",
      "Directives": null,
      "Interfaces": null,
      "Fields": [
        {
          "Description": "",
          "Name": "id",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "ID",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 192,
              "End": 194,
              "Line": 14,
              "Column": 8,
              "Src": {
                "Name": "schema/category.graphqls",
                "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 188,
            "End": 190,
            "Line": 14,
            "Column": 4,
            "Src": {
              "Name": "schema/category.graphqls",
              "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "name",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 205,
              "End": 211,
              "Line": 15,
              "Column": 10,
              "Src": {
                "Name": "schema/category.graphqls",
                "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 199,
            "End": 203,
            "Line": 15,
            "Column": 4,
            "Src": {
              "Name": "schema/category.graphqls",
              "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        }
      ],
      "Types": null,
      "EnumValues": null,
      "Position": {
        "Start": 163,
        "End": 182,
        "Line": 13,
        "Column": 8,
        "Src": {
          "Name": "schema/category.graphqls",
          "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
          "BuiltIn": false
        }
      },
      "BuiltIn": false,
      "BeforeDescriptionComment": null,
      "AfterDescriptionComment": null,
      "EndOfDefinitionComment": null
    },
    "UpdateProductInput": {
      "Kind": "INPUT_OBJECT",
      "Description": "",
      "Name": "UpdateProductInput",
      "Directives": null,
      "Interfaces": null,
      "Fields": [
        {
          "Description": "",
          "Name": "id",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "ID",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 344,
              "End": 346,
              "Line": 22,
              "Column": 8,
              "Src": {
                "Name": "schema/product.graphqls",
                "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 340,
            "End": 342,
            "Line": 22,
            "Column": 4,
            "Src": {
              "Name": "schema/product.graphqls",
              "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "name",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 357,
              "End": 363,
              "Line": 23,
              "Column": 10,
              "Src": {
                "Name": "schema/product.graphqls",
                "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 351,
            "End": 355,
            "Line": 23,
            "Column": 4,
            "Src": {
              "Name": "schema/product.graphqls",
              "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "price",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "Float",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 374,
              "End": 379,
              "Line": 24,
              "Column": 11,
              "Src": {
                "Name": "schema/product.graphqls",
                "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 367,
            "End": 372,
            "Line": 24,
            "Column": 4,
            "Src": {
              "Name": "schema/product.graphqls",
              "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "description",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 396,
              "End": 402,
              "Line": 25,
              "Column": 17,
              "Src": {
                "Name": "schema/product.graphqls",
                "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 383,
            "End": 394,
            "Line": 25,
            "Column": 4,
            "Src": {
              "Name": "schema/product.graphqls",
              "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        }
      ],
      "Types": null,
      "EnumValues": null,
      "Position": {
        "Start": 316,
        "End": 334,
        "Line": 21,
        "Column": 8,
        "Src": {
          "Name": "schema/product.graphqls",
          "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
          "BuiltIn": false
        }
      },
      "BuiltIn": false,
      "BeforeDescriptionComment": null,
      "AfterDescriptionComment": null,
      "EndOfDefinitionComment": null
    },
    "UpdateUserInput": {
      "Kind": "INPUT_OBJECT",
      "Description": "",
      "Name": "UpdateUserInput",
      "Directives": null,
      "Interfaces": null,
      "Fields": [
        {
          "Description": "",
          "Name": "id",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "ID",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 290,
              "End": 292,
              "Line": 18,
              "Column": 8,
              "Src": {
                "Name": "schema/user.graphqls",
                "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 286,
            "End": 288,
            "Line": 18,
            "Column": 4,
            "Src": {
              "Name": "schema/user.graphqls",
              "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "name",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 303,
              "End": 309,
              "Line": 19,
              "Column": 10,
              "Src": {
                "Name": "schema/user.graphqls",
                "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 297,
            "End": 301,
            "Line": 19,
            "Column": 4,
            "Src": {
              "Name": "schema/user.graphqls",
              "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "email",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 320,
              "End": 326,
              "Line": 20,
              "Column": 11,
              "Src": {
                "Name": "schema/user.graphqls",
                "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 313,
            "End": 318,
            "Line": 20,
            "Column": 4,
            "Src": {
              "Name": "schema/user.graphqls",
              "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "newPassword",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 343,
              "End": 349,
              "Line": 21,
              "Column": 17,
              "Src": {
                "Name": "schema/user.graphqls",
                "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 330,
            "End": 341,
            "Line": 21,
            "Column": 4,
            "Src": {
              "Name": "schema/user.graphqls",
              "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "confirmPassword",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 370,
              "End": 376,
              "Line": 22,
              "Column": 21,
              "Src": {
                "Name": "schema/user.graphqls",
                "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 353,
            "End": 368,
            "Line": 22,
            "Column": 4,
            "Src": {
              "Name": "schema/user.graphqls",
              "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        }
      ],
      "Types": null,
      "EnumValues": null,
      "Position": {
        "Start": 265,
        "End": 280,
        "Line": 17,
        "Column": 8,
        "Src": {
          "Name": "schema/user.graphqls",
          "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
          "BuiltIn": false
        }
      },
      "BuiltIn": false,
      "BeforeDescriptionComment": null,
      "AfterDescriptionComment": null,
      "EndOfDefinitionComment": null
    },
    "User": {
      "Kind": "OBJECT",
      "Description": "",
      "Name": "User",
      "Directives": null,
      "Interfaces": null,
      "Fields": [
        {
          "Description": "",
          "Name": "id",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "ID",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 19,
              "End": 21,
              "Line": 2,
              "Column": 8,
              "Src": {
                "Name": "schema/user.graphqls",
                "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 15,
            "End": 17,
            "Line": 2,
            "Column": 4,
            "Src": {
              "Name": "schema/user.graphqls",
              "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "name",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 32,
              "End": 38,
              "Line": 3,
              "Column": 10,
              "Src": {
                "Name": "schema/user.graphqls",
                "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": [
            {
              "Name": "length",
              "Arguments": [
                {
                  "Name": "min",
                  "Value": {
                    "Raw": "6",
                    "Children": null,
                    "Kind": 1,
                    "Position": {
                      "Start": 53,
                      "End": 54,
                      "Line": 3,
                      "Column": 31,
                      "Src": {
                        "Name": "schema/user.graphqls",
                        "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                        "BuiltIn": false
                      }
                    },
                    "Comment": null,
                    "Definition": null,
                    "VariableDefinition": null,
                    "ExpectedType": null
                  },
                  "Position": {
                    "Start": 48,
                    "End": 51,
                    "Line": 3,
                    "Column": 26,
                    "Src": {
                      "Name": "schema/user.graphqls",
                      "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                      "BuiltIn": false
                    }
                  },
                  "Comment": null
                },
                {
                  "Name": "max",
                  "Value": {
                    "Raw": "32",
                    "Children": null,
                    "Kind": 1,
                    "Position": {
                      "Start": 61,
                      "End": 63,
                      "Line": 3,
                      "Column": 39,
                      "Src": {
                        "Name": "schema/user.graphqls",
                        "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                        "BuiltIn": false
                      }
                    },
                    "Comment": null,
                    "Definition": null,
                    "VariableDefinition": null,
                    "ExpectedType": null
                  },
                  "Position": {
                    "Start": 56,
                    "End": 59,
                    "Line": 3,
                    "Column": 34,
                    "Src": {
                      "Name": "schema/user.graphqls",
                      "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                      "BuiltIn": false
                    }
                  },
                  "Comment": null
                }
              ],
              "Position": {
                "Start": 41,
                "End": 47,
                "Line": 3,
                "Column": 19,
                "Src": {
                  "Name": "schema/user.graphqls",
                  "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              },
              "ParentDefinition": null,
              "Definition": {
                "Description": "",
                "Name": "length",
                "Arguments": [
                  {
                    "Description": "",
                    "Name": "min",
                    "DefaultValue": null,
                    "Type": {
                      "NamedType": "Int",
                      "Elem": null,
                      "NonNull": false,
                      "Position": {
                        "Start": 159,
                        "End": 162,
                        "Line": 15,
                        "Column": 24,
                        "Src": {
                          "Name": "schema/schema.graphqls",
                          "Input": "type Query\n\ntype Mutation\n\ntype Subscription\n\nschema {\n  query: Query\n  mutation: Mutation\n  subscription: Subscription\n}\n\nscalar Time\n\ndirective @length(min: Int, max: Int) on FIELD_DEFINITION\ndirective @email on FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    "Directives": null,
                    "Position": {
                      "Start": 154,
                      "End": 157,
                      "Line": 15,
                      "Column": 19,
                      "Src": {
                        "Name": "schema/schema.graphqls",
                        "Input": "type Query\n\ntype Mutation\n\ntype Subscription\n\nschema {\n  query: Query\n  mutation: Mutation\n  subscription: Subscription\n}\n\nscalar Time\n\ndirective @length(min: Int, max: Int) on FIELD_DEFINITION\ndirective @email on FIELD_DEFINITION\n",
                        "BuiltIn": false
                      }
                    },
                    "BeforeDescriptionComment": null,
                    "AfterDescriptionComment": null
                  },
                  {
                    "Description": "",
                    "Name": "max",
                    "DefaultValue": null,
                    "Type": {
                      "NamedType": "Int",
                      "Elem": null,
                      "NonNull": false,
                      "Position": {
                        "Start": 169,
                        "End": 172,
                        "Line": 15,
                        "Column": 34,
                        "Src": {
                          "Name": "schema/schema.graphqls",
                          "Input": "type Query\n\ntype Mutation\n\ntype Subscription\n\nschema {\n  query: Query\n  mutation: Mutation\n  subscription: Subscription\n}\n\nscalar Time\n\ndirective @length(min: Int, max: Int) on FIELD_DEFINITION\ndirective @email on FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      }
                    },
                    "Directives": null,
                    "Position": {
                      "Start": 164,
                      "End": 167,
                      "Line": 15,
                      "Column": 29,
                      "Src": {
                        "Name": "schema/schema.graphqls",
                        "Input": "type Query\n\ntype Mutation\n\ntype Subscription\n\nschema {\n  query: Query\n  mutation: Mutation\n  subscription: Subscription\n}\n\nscalar Time\n\ndirective @length(min: Int, max: Int) on FIELD_DEFINITION\ndirective @email on FIELD_DEFINITION\n",
                        "BuiltIn": false
                      }
                    },
                    "BeforeDescriptionComment": null,
                    "AfterDescriptionComment": null
                  }
                ],
                "Locations": [
                  "FIELD_DEFINITION"
                ],
                "IsRepeatable": false,
                "Position": {
                  "Start": 147,
                  "End": 153,
                  "Line": 15,
                  "Column": 12,
                  "Src": {
                    "Name": "schema/schema.graphqls",
                    "Input": "type Query\n\ntype Mutation\n\ntype Subscription\n\nschema {\n  query: Query\n  mutation: Mutation\n  subscription: Subscription\n}\n\nscalar Time\n\ndirective @length(min: Int, max: Int) on FIELD_DEFINITION\ndirective @email on FIELD_DEFINITION\n",
                    "BuiltIn": false
                  }
                },
                "BeforeDescriptionComment": null,
                "AfterDescriptionComment": null
              },
              "Location": ""
            }
          ],
          "Position": {
            "Start": 26,
            "End": 30,
            "Line": 3,
            "Column": 4,
            "Src": {
              "Name": "schema/user.graphqls",
              "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "email",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 75,
              "End": 81,
              "Line": 4,
              "Column": 11,
              "Src": {
                "Name": "schema/user.graphqls",
                "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": [
            {
              "Name": "email",
              "Arguments": null,
              "Position": {
                "Start": 84,
                "End": 89,
                "Line": 4,
                "Column": 20,
                "Src": {
                  "Name": "schema/user.graphqls",
                  "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              },
              "ParentDefinition": null,
              "Definition": {
                "Description": "",
                "Name": "email",
                "Arguments": null,
                "Locations": [
                  "FIELD_DEFINITION"
                ],
                "IsRepeatable": false,
                "Position": {
                  "Start": 205,
                  "End": 210,
                  "Line": 16,
                  "Column": 12,
                  "Src": {
                    "Name": "schema/schema.graphqls",
                    "Input": "type Query\n\ntype Mutation\n\ntype Subscription\n\nschema {\n  query: Query\n  mutation: Mutation\n  subscription: Subscription\n}\n\nscalar Time\n\ndirective @length(min: Int, max: Int) on FIELD_DEFINITION\ndirective @email on FIELD_DEFINITION\n",
                    "BuiltIn": false
                  }
                },
                "BeforeDescriptionComment": null,
                "AfterDescriptionComment": null
              },
              "Location": ""
            }
          ],
          "Position": {
            "Start": 68,
            "End": 73,
            "Line": 4,
            "Column": 4,
            "Src": {
              "Name": "schema/user.graphqls",
              "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "cart",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "",
            "Elem": {
              "NamedType": "Cart",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 100,
                "End": 104,
                "Line": 5,
                "Column": 11,
                "Src": {
                  "Name": "schema/user.graphqls",
                  "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "NonNull": false,
            "Position": {
              "Start": 100,
              "End": 104,
              "Line": 5,
              "Column": 11,
              "Src": {
                "Name": "schema/user.graphqls",
                "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 93,
            "End": 97,
            "Line": 5,
            "Column": 4,
            "Src": {
              "Name": "schema/user.graphqls",
              "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "orders",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "",
            "Elem": {
              "NamedType": "Order",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 119,
                "End": 124,
                "Line": 6,
                "Column": 13,
                "Src": {
                  "Name": "schema/user.graphqls",
                  "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "NonNull": false,
            "Position": {
              "Start": 119,
              "End": 124,
              "Line": 6,
              "Column": 13,
              "Src": {
                "Name": "schema/user.graphqls",
                "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 110,
            "End": 116,
            "Line": 6,
            "Column": 4,
            "Src": {
              "Name": "schema/user.graphqls",
              "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "createdAt",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "Time",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 141,
              "End": 145,
              "Line": 7,
              "Column": 15,
              "Src": {
                "Name": "schema/user.graphqls",
                "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 130,
            "End": 139,
            "Line": 7,
            "Column": 4,
            "Src": {
              "Name": "schema/user.graphqls",
              "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "updatedAt",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "Time",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 161,
              "End": 165,
              "Line": 8,
              "Column": 15,
              "Src": {
                "Name": "schema/user.graphqls",
                "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 150,
            "End": 159,
            "Line": 8,
            "Column": 4,
            "Src": {
              "Name": "schema/user.graphqls",
              "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        }
      ],
      "Types": null,
      "EnumValues": null,
      "Position": {
        "Start": 5,
        "End": 9,
        "Line": 1,
        "Column": 6,
        "Src": {
          "Name": "schema/user.graphqls",
          "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
          "BuiltIn": false
        }
      },
      "BuiltIn": false,
      "BeforeDescriptionComment": null,
      "AfterDescriptionComment": null,
      "EndOfDefinitionComment": null
    },
    "__Directive": {
      "Kind": "OBJECT",
      "Description": "",
      "Name": "__Directive",
      "Directives": null,
      "Interfaces": null,
      "Fields": [
        {
          "Description": "",
          "Name": "name",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 4155,
              "End": 4161,
              "Line": 97,
              "Column": 9,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 4149,
            "End": 4153,
            "Line": 97,
            "Column": 3,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "description",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 4178,
              "End": 4184,
              "Line": 98,
              "Column": 16,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 4165,
            "End": 4176,
            "Line": 98,
            "Column": 3,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "locations",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "",
            "Elem": {
              "NamedType": "__DirectiveLocation",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 4199,
                "End": 4218,
                "Line": 99,
                "Column": 15,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "NonNull": true,
            "Position": {
              "Start": 4199,
              "End": 4218,
              "Line": 99,
              "Column": 15,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 4187,
            "End": 4196,
            "Line": 99,
            "Column": 3,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "args",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "",
            "Elem": {
              "NamedType": "__InputValue",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 4231,
                "End": 4243,
                "Line": 100,
                "Column": 10,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "NonNull": true,
            "Position": {
              "Start": 4231,
              "End": 4243,
              "Line": 100,
              "Column": 10,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 4224,
            "End": 4228,
            "Line": 100,
            "Column": 3,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "isRepeatable",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "Boolean",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 4263,
              "End": 4270,
              "Line": 101,
              "Column": 17,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 4249,
            "End": 4261,
            "Line": 101,
            "Column": 3,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        }
      ],
      "Types": null,
      "EnumValues": null,
      "Position": {
        "Start": 4133,
        "End": 4144,
        "Line": 96,
        "Column": 6,
        "Src": {
          "Name": "prelude.graphql",
          "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
          "BuiltIn": true
        }
      },
      "BuiltIn": true,
      "BeforeDescriptionComment": null,
      "AfterDescriptionComment": null,
      "EndOfDefinitionComment": null
    },
    "__DirectiveLocation": {
      "Kind": "ENUM",
      "Description": "",
      "Name": "__DirectiveLocation",
      "Directives": null,
      "Interfaces": null,
      "Fields": null,
      "Types": null,
      "EnumValues": [
        {
          "Description": "",
          "Name": "QUERY",
          "Directives": null,
          "Position": {
            "Start": 4304,
            "End": 4309,
            "Line": 105,
            "Column": 3,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "MUTATION",
          "Directives": null,
          "Position": {
            "Start": 4312,
            "End": 4320,
            "Line": 106,
            "Column": 3,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "SUBSCRIPTION",
          "Directives": null,
          "Position": {
            "Start": 4323,
            "End": 4335,
            "Line": 107,
            "Column": 3,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "FIELD",
          "Directives": null,
          "Position": {
            "Start": 4338,
            "End": 4343,
            "Line": 108,
            "Column": 3,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "FRAGMENT_DEFINITION",
          "Directives": null,
          "Position": {
            "Start": 4346,
            "End": 4365,
            "Line": 109,
            "Column": 3,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "FRAGMENT_SPREAD",
          "Directives": null,
          "Position": {
            "Start": 4368,
            "End": 4383,
            "Line": 110,
            "Column": 3,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "INLINE_FRAGMENT",
          "Directives": null,
          "Position": {
            "Start": 4386,
            "End": 4401,
            "Line": 111,
            "Column": 3,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "VARIABLE_DEFINITION",
          "Directives": null,
          "Position": {
            "Start": 4404,
            "End": 4423,
            "Line": 112,
            "Column": 3,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "SCHEMA",
          "Directives": null,
          "Position": {
            "Start": 4426,
            "End": 4432,
            "Line": 113,
            "Column": 3,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "SCALAR",
          "Directives": null,
          "Position": {
            "Start": 4435,
            "End": 4441,
            "Line": 114,
            "Column": 3,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "OBJECT",
          "Directives": null,
          "Position": {
            "Start": 4444,
            "End": 4450,
            "Line": 115,
            "Column": 3,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "FIELD_DEFINITION",
          "Directives": null,
          "Position": {
            "Start": 4453,
            "End": 4469,
            "Line": 116,
            "Column": 3,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "ARGUMENT_DEFINITION",
          "Directives": null,
          "Position": {
            "Start": 4472,
            "End": 4491,
            "Line": 117,
            "Column": 3,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "INTERFACE",
          "Directives": null,
          "Position": {
            "Start": 4494,
            "End": 4503,
            "Line": 118,
            "Column": 3,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "UNION",
          "Directives": null,
          "Position": {
            "Start": 4506,
            "End": 4511,
            "Line": 119,
            "Column": 3,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "ENUM",
          "Directives": null,
          "Position": {
            "Start": 4514,
            "End": 4518,
            "Line": 120,
            "Column": 3,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "ENUM_VALUE",
          "Directives": null,
          "Position": {
            "Start": 4521,
            "End": 4531,
            "Line": 121,
            "Column": 3,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "INPUT_OBJECT",
          "Directives": null,
          "Position": {
            "Start": 4534,
            "End": 4546,
            "Line": 122,
            "Column": 3,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "INPUT_FIELD_DEFINITION",
          "Directives": null,
          "Position": {
            "Start": 4549,
            "End": 4571,
            "Line": 123,
            "Column": 3,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        }
      ],
      "Position": {
        "Start": 4280,
        "End": 4299,
        "Line": 104,
        "Column": 6,
        "Src": {
          "Name": "prelude.graphql",
          "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
          "BuiltIn": true
        }
      },
      "BuiltIn": true,
      "BeforeDescriptionComment": null,
      "AfterDescriptionComment": null,
      "EndOfDefinitionComment": null
    },
    "__EnumValue": {
      "Kind": "OBJECT",
      "Description": "",
      "Name": "__EnumValue",
      "Directives": null,
      "Interfaces": null,
      "Fields": [
        {
          "Description": "",
          "Name": "name",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 3943,
              "End": 3949,
              "Line": 79,
              "Column": 9,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 3937,
            "End": 3941,
            "Line": 79,
            "Column": 3,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "description",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 3966,
              "End": 3972,
              "Line": 80,
              "Column": 16,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 3953,
            "End": 3964,
            "Line": 80,
            "Column": 3,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "isDeprecated",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "Boolean",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 3989,
              "End": 3996,
              "Line": 81,
              "Column": 17,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 3975,
            "End": 3987,
            "Line": 81,
            "Column": 3,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "deprecationReason",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 4019,
              "End": 4025,
              "Line": 82,
              "Column": 22,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 4000,
            "End": 4017,
            "Line": 82,
            "Column": 3,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        }
      ],
      "Types": null,
      "EnumValues": null,
      "Position": {
        "Start": 3921,
        "End": 3932,
        "Line": 78,
        "Column": 6,
        "Src": {
          "Name": "prelude.graphql",
          "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
          "BuiltIn": true
        }
      },
      "BuiltIn": true,
      "BeforeDescriptionComment": null,
      "AfterDescriptionComment": null,
      "EndOfDefinitionComment": null
    },
    "__Field": {
      "Kind": "OBJECT",
      "Description": "",
      "Name": "__Field",
      "Directives": null,
      "Interfaces": null,
      "Fields": [
        {
          "Description": "",
          "Name": "name",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 3689,
              "End": 3695,
              "Line": 63,
              "Column": 9,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 3683,
            "End": 3687,
            "Line": 63,
            "Column": 3,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "description",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 3712,
              "End": 3718,
              "Line": 64,
              "Column": 16,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 3699,
            "End": 3710,
            "Line": 64,
            "Column": 3,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "args",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "",
            "Elem": {
              "NamedType": "__InputValue",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 3728,
                "End": 3740,
                "Line": 65,
                "Column": 10,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "NonNull": true,
            "Position": {
              "Start": 3728,
              "End": 3740,
              "Line": 65,
              "Column": 10,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 3721,
            "End": 3725,
            "Line": 65,
            "Column": 3,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "type",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "__Type",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 3752,
              "End": 3758,
              "Line": 66,
              "Column": 9,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 3746,
            "End": 3750,
            "Line": 66,
            "Column": 3,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "isDeprecated",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "Boolean",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 3776,
              "End": 3783,
              "Line": 67,
              "Column": 17,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 3762,
            "End": 3774,
            "Line": 67,
            "Column": 3,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "deprecationReason",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 3806,
              "End": 3812,
              "Line": 68,
              "Column": 22,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 3787,
            "End": 3804,
            "Line": 68,
            "Column": 3,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        }
      ],
      "Types": null,
      "EnumValues": null,
      "Position": {
        "Start": 3671,
        "End": 3678,
        "Line": 62,
        "Column": 6,
        "Src": {
          "Name": "prelude.graphql",
          "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
          "BuiltIn": true
        }
      },
      "BuiltIn": true,
      "BeforeDescriptionComment": null,
      "AfterDescriptionComment": null,
      "EndOfDefinitionComment": null
    },
    "__InputValue": {
      "Kind": "OBJECT",
      "Description": "",
      "Name": "__InputValue",
      "Directives": null,
      "Interfaces": null,
      "Fields": [
        {
          "Description": "",
          "Name": "name",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 3844,
              "End": 3850,
              "Line": 72,
              "Column": 9,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 3838,
            "End": 3842,
            "Line": 72,
            "Column": 3,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "description",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 3867,
              "End": 3873,
              "Line": 73,
              "Column": 16,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 3854,
            "End": 3865,
            "Line": 73,
            "Column": 3,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "type",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "__Type",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 3882,
              "End": 3888,
              "Line": 74,
              "Column": 9,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 3876,
            "End": 3880,
            "Line": 74,
            "Column": 3,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "defaultValue",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 3906,
              "End": 3912,
              "Line": 75,
              "Column": 17,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 3892,
            "End": 3904,
            "Line": 75,
            "Column": 3,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        }
      ],
      "Types": null,
      "EnumValues": null,
      "Position": {
        "Start": 3821,
        "End": 3833,
        "Line": 71,
        "Column": 6,
        "Src": {
          "Name": "prelude.graphql",
          "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
          "BuiltIn": true
        }
      },
      "BuiltIn": true,
      "BeforeDescriptionComment": null,
      "AfterDescriptionComment": null,
      "EndOfDefinitionComment": null
    },
    "__Schema": {
      "Kind": "OBJECT",
      "Description": "",
      "Name": "__Schema",
      "Directives": null,
      "Interfaces": null,
      "Fields": [
        {
          "Description": "",
          "Name": "description",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 2810,
              "End": 2816,
              "Line": 34,
              "Column": 16,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 2797,
            "End": 2808,
            "Line": 34,
            "Column": 3,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "types",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "",
            "Elem": {
              "NamedType": "__Type",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 2827,
                "End": 2833,
                "Line": 35,
                "Column": 11,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "NonNull": true,
            "Position": {
              "Start": 2827,
              "End": 2833,
              "Line": 35,
              "Column": 11,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 2819,
            "End": 2824,
            "Line": 35,
            "Column": 3,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "queryType",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "__Type",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 2850,
              "End": 2856,
              "Line": 36,
              "Column": 14,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 2839,
            "End": 2848,
            "Line": 36,
            "Column": 3,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "mutationType",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "__Type",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 2874,
              "End": 2880,
              "Line": 37,
              "Column": 17,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 2860,
            "End": 2872,
            "Line": 37,
            "Column": 3,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "subscriptionType",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "__Type",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 2901,
              "End": 2907,
              "Line": 38,
              "Column": 21,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 2883,
            "End": 2899,
            "Line": 38,
            "Column": 3,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "directives",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "",
            "Elem": {
              "NamedType": "__Directive",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 2923,
                "End": 2934,
                "Line": 39,
                "Column": 16,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "NonNull": true,
            "Position": {
              "Start": 2923,
              "End": 2934,
              "Line": 39,
              "Column": 16,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 2910,
            "End": 2920,
            "Line": 39,
            "Column": 3,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        }
      ],
      "Types": null,
      "EnumValues": null,
      "Position": {
        "Start": 2784,
        "End": 2792,
        "Line": 33,
        "Column": 6,
        "Src": {
          "Name": "prelude.graphql",
          "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
          "BuiltIn": true
        }
      },
      "BuiltIn": true,
      "BeforeDescriptionComment": null,
      "AfterDescriptionComment": null,
      "EndOfDefinitionComment": null
    },
    "__Type": {
      "Kind": "OBJECT",
      "Description": "",
      "Name": "__Type",
      "Directives": null,
      "Interfaces": null,
      "Fields": [
        {
          "Description": "",
          "Name": "kind",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "__TypeKind",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 2963,
              "End": 2973,
              "Line": 43,
              "Column": 9,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 2957,
            "End": 2961,
            "Line": 43,
            "Column": 3,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "name",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 2983,
              "End": 2989,
              "Line": 44,
              "Column": 9,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 2977,
            "End": 2981,
            "Line": 44,
            "Column": 3,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "description",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 3005,
              "End": 3011,
              "Line": 45,
              "Column": 16,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 2992,
            "End": 3003,
            "Line": 45,
            "Column": 3,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "fields",
          "Arguments": [
            {
              "Description": "",
              "Name": "includeDeprecated",
              "DefaultValue": {
                "Raw": "false",
                "Children": null,
                "Kind": 5,
                "Position": {
                  "Start": 3113,
                  "End": 3118,
                  "Line": 47,
                  "Column": 39,
                  "Src": {
                    "Name": "prelude.graphql",
                    "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                    "BuiltIn": true
                  }
                },
                "Comment": null,
                "Definition": null,
                "VariableDefinition": null,
                "ExpectedType": null
              },
              "Type": {
                "NamedType": "Boolean",
                "Elem": null,
                "NonNull": false,
                "Position": {
                  "Start": 3103,
                  "End": 3110,
                  "Line": 47,
                  "Column": 29,
                  "Src": {
                    "Name": "prelude.graphql",
                    "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                    "BuiltIn": true
                  }
                }
              },
              "Directives": null,
              "Position": {
                "Start": 3084,
                "End": 3101,
                "Line": 47,
                "Column": 10,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              },
              "BeforeDescriptionComment": null,
              "AfterDescriptionComment": null
            }
          ],
          "DefaultValue": null,
          "Type": {
            "NamedType": "",
            "Elem": {
              "NamedType": "__Field",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 3122,
                "End": 3129,
                "Line": 47,
                "Column": 48,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "NonNull": false,
            "Position": {
              "Start": 3122,
              "End": 3129,
              "Line": 47,
              "Column": 48,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 3077,
            "End": 3083,
            "Line": 47,
            "Column": 3,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": {
            "List": [
              {
                "Value": "# must be non-null for OBJECT and INTERFACE, otherwise null.",
                "Position": {
                  "Start": 3014,
                  "End": 3074,
                  "Line": 46,
                  "Column": 3,
                  "Src": {
                    "Name": "prelude.graphql",
                    "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                    "BuiltIn": true
                  }
                }
              }
            ]
          }
        },
        {
          "Description": "",
          "Name": "interfaces",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "",
            "Elem": {
              "NamedType": "__Type",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 3210,
                "End": 3216,
                "Line": 49,
                "Column": 16,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "NonNull": false,
            "Position": {
              "Start": 3210,
              "End": 3216,
              "Line": 49,
              "Column": 16,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 3197,
            "End": 3207,
            "Line": 49,
            "Column": 3,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": {
            "List": [
              {
                "Value": "# must be non-null for OBJECT and INTERFACE, otherwise null.",
                "Position": {
                  "Start": 3134,
                  "End": 3194,
                  "Line": 48,
                  "Column": 3,
                  "Src": {
                    "Name": "prelude.graphql",
                    "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                    "BuiltIn": true
                  }
                }
              }
            ]
          }
        },
        {
          "Description": "",
          "Name": "possibleTypes",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "",
            "Elem": {
              "NamedType": "__Type",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 3299,
                "End": 3305,
                "Line": 51,
                "Column": 19,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "NonNull": false,
            "Position": {
              "Start": 3299,
              "End": 3305,
              "Line": 51,
              "Column": 19,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 3283,
            "End": 3296,
            "Line": 51,
            "Column": 3,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": {
            "List": [
              {
                "Value": "# must be non-null for INTERFACE and UNION, otherwise null.",
                "Position": {
                  "Start": 3221,
                  "End": 3280,
                  "Line": 50,
                  "Column": 3,
                  "Src": {
                    "Name": "prelude.graphql",
                    "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                    "BuiltIn": true
                  }
                }
              }
            ]
          }
        },
        {
          "Description": "",
          "Name": "enumValues",
          "Arguments": [
            {
              "Description": "",
              "Name": "includeDeprecated",
              "DefaultValue": {
                "Raw": "false",
                "Children": null,
                "Kind": 5,
                "Position": {
                  "Start": 3397,
                  "End": 3402,
                  "Line": 53,
                  "Column": 43,
                  "Src": {
                    "Name": "prelude.graphql",
                    "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                    "BuiltIn": true
                  }
                },
                "Comment": null,
                "Definition": null,
                "VariableDefinition": null,
                "ExpectedType": null
              },
              "Type": {
                "NamedType": "Boolean",
                "Elem": null,
                "NonNull": false,
                "Position": {
                  "Start": 3387,
                  "End": 3394,
                  "Line": 53,
                  "Column": 33,
                  "Src": {
                    "Name": "prelude.graphql",
                    "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                    "BuiltIn": true
                  }
                }
              },
              "Directives": null,
              "Position": {
                "Start": 3368,
                "End": 3385,
                "Line": 53,
                "Column": 14,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              },
              "BeforeDescriptionComment": null,
              "AfterDescriptionComment": null
            }
          ],
          "DefaultValue": null,
          "Type": {
            "NamedType": "",
            "Elem": {
              "NamedType": "__EnumValue",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 3406,
                "End": 3417,
                "Line": 53,
                "Column": 52,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "NonNull": false,
            "Position": {
              "Start": 3406,
              "End": 3417,
              "Line": 53,
              "Column": 52,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 3357,
            "End": 3367,
            "Line": 53,
            "Column": 3,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": {
            "List": [
              {
                "Value": "# must be non-null for ENUM, otherwise null.",
                "Position": {
                  "Start": 3310,
                  "End": 3354,
                  "Line": 52,
                  "Column": 3,
                  "Src": {
                    "Name": "prelude.graphql",
                    "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                    "BuiltIn": true
                  }
                }
              }
            ]
          }
        },
        {
          "Description": "",
          "Name": "inputFields",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "",
            "Elem": {
              "NamedType": "__InputValue",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 3491,
                "End": 3503,
                "Line": 55,
                "Column": 17,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "NonNull": false,
            "Position": {
              "Start": 3491,
              "End": 3503,
              "Line": 55,
              "Column": 17,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 3477,
            "End": 3488,
            "Line": 55,
            "Column": 3,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": {
            "List": [
              {
                "Value": "# must be non-null for INPUT_OBJECT, otherwise null.",
                "Position": {
                  "Start": 3422,
                  "End": 3474,
                  "Line": 54,
                  "Column": 3,
                  "Src": {
                    "Name": "prelude.graphql",
                    "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                    "BuiltIn": true
                  }
                }
              }
            ]
          }
        },
        {
          "Description": "",
          "Name": "ofType",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "__Type",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 3576,
              "End": 3582,
              "Line": 57,
              "Column": 11,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 3568,
            "End": 3574,
            "Line": 57,
            "Column": 3,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": {
            "List": [
              {
                "Value": "# must be non-null for NON_NULL and LIST, otherwise null.",
                "Position": {
                  "Start": 3508,
                  "End": 3565,
                  "Line": 56,
                  "Column": 3,
                  "Src": {
                    "Name": "prelude.graphql",
                    "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                    "BuiltIn": true
                  }
                }
              }
            ]
          }
        },
        {
          "Description": "",
          "Name": "specifiedByURL",
          "Arguments": null,
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 3656,
              "End": 3662,
              "Line": 59,
              "Column": 19,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 3640,
            "End": 3654,
            "Line": 59,
            "Column": 3,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": {
            "List": [
              {
                "Value": "# may be non-null for custom SCALAR, otherwise null.",
                "Position": {
                  "Start": 3585,
                  "End": 3637,
                  "Line": 58,
                  "Column": 3,
                  "Src": {
                    "Name": "prelude.graphql",
                    "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                    "BuiltIn": true
                  }
                }
              }
            ]
          }
        }
      ],
      "Types": null,
      "EnumValues": null,
      "Position": {
        "Start": 2946,
        "End": 2952,
        "Line": 42,
        "Column": 6,
        "Src": {
          "Name": "prelude.graphql",
          "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
          "BuiltIn": true
        }
      },
      "BuiltIn": true,
      "BeforeDescriptionComment": null,
      "AfterDescriptionComment": null,
      "EndOfDefinitionComment": null
    },
    "__TypeKind": {
      "Kind": "ENUM",
      "Description": "",
      "Name": "__TypeKind",
      "Directives": null,
      "Interfaces": null,
      "Fields": null,
      "Types": null,
      "EnumValues": [
        {
          "Description": "",
          "Name": "SCALAR",
          "Directives": null,
          "Position": {
            "Start": 4049,
            "End": 4055,
            "Line": 86,
            "Column": 3,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "OBJECT",
          "Directives": null,
          "Position": {
            "Start": 4058,
            "End": 4064,
            "Line": 87,
            "Column": 3,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "INTERFACE",
          "Directives": null,
          "Position": {
            "Start": 4067,
            "End": 4076,
            "Line": 88,
            "Column": 3,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "UNION",
          "Directives": null,
          "Position": {
            "Start": 4079,
            "End": 4084,
            "Line": 89,
            "Column": 3,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "ENUM",
          "Directives": null,
          "Position": {
            "Start": 4087,
            "End": 4091,
            "Line": 90,
            "Column": 3,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "INPUT_OBJECT",
          "Directives": null,
          "Position": {
            "Start": 4094,
            "End": 4106,
            "Line": 91,
            "Column": 3,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "LIST",
          "Directives": null,
          "Position": {
            "Start": 4109,
            "End": 4113,
            "Line": 92,
            "Column": 3,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "NON_NULL",
          "Directives": null,
          "Position": {
            "Start": 4116,
            "End": 4124,
            "Line": 93,
            "Column": 3,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        }
      ],
      "Position": {
        "Start": 4034,
        "End": 4044,
        "Line": 85,
        "Column": 6,
        "Src": {
          "Name": "prelude.graphql",
          "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
          "BuiltIn": true
        }
      },
      "BuiltIn": true,
      "BeforeDescriptionComment": null,
      "AfterDescriptionComment": null,
      "EndOfDefinitionComment": null
    }
  },
  "Directives": {
    "defer": {
      "Description": "The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.",
      "Name": "defer",
      "Arguments": [
        {
          "Description": "",
          "Name": "if",
          "DefaultValue": {
            "Raw": "true",
            "Children": null,
            "Kind": 5,
            "Position": {
              "Start": 2720,
              "End": 2724,
              "Line": 31,
              "Column": 32,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            },
            "Comment": null,
            "Definition": null,
            "VariableDefinition": null,
            "ExpectedType": null
          },
          "Type": {
            "NamedType": "Boolean",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 2710,
              "End": 2717,
              "Line": 31,
              "Column": 22,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 2706,
            "End": 2708,
            "Line": 31,
            "Column": 18,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "label",
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 2733,
              "End": 2739,
              "Line": 31,
              "Column": 45,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 2726,
            "End": 2731,
            "Line": 31,
            "Column": 38,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        }
      ],
      "Locations": [
        "FRAGMENT_SPREAD",
        "INLINE_FRAGMENT"
      ],
      "IsRepeatable": false,
      "Position": {
        "Start": 2700,
        "End": 2705,
        "Line": 31,
        "Column": 12,
        "Src": {
          "Name": "prelude.graphql",
          "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
          "BuiltIn": true
        }
      },
      "BeforeDescriptionComment": null,
      "AfterDescriptionComment": null
    },
    "deprecated": {
      "Description": "The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.",
      "Name": "deprecated",
      "Arguments": [
        {
          "Description": "",
          "Name": "reason",
          "DefaultValue": {
            "Raw": "No longer supported",
            "Children": null,
            "Kind": 3,
            "Position": {
              "Start": 1897,
              "End": 1918,
              "Line": 25,
              "Column": 41,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            },
            "Comment": null,
            "Definition": null,
            "VariableDefinition": null,
            "ExpectedType": null
          },
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 1888,
              "End": 1894,
              "Line": 25,
              "Column": 31,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 1880,
            "End": 1886,
            "Line": 25,
            "Column": 23,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        }
      ],
      "Locations": [
        "FIELD_DEFINITION",
        "ARGUMENT_DEFINITION",
        "INPUT_FIELD_DEFINITION",
        "ENUM_VALUE"
      ],
      "IsRepeatable": false,
      "Position": {
        "Start": 1869,
        "End": 1879,
        "Line": 25,
        "Column": 12,
        "Src": {
          "Name": "prelude.graphql",
          "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
          "BuiltIn": true
        }
      },
      "BeforeDescriptionComment": null,
      "AfterDescriptionComment": null
    },
    "email": {
      "Description": "",
      "Name": "email",
      "Arguments": null,
      "Locations": [
        "FIELD_DEFINITION"
      ],
      "IsRepeatable": false,
      "Position": {
        "Start": 205,
        "End": 210,
        "Line": 16,
        "Column": 12,
        "Src": {
          "Name": "schema/schema.graphqls",
          "Input": "type Query\n\ntype Mutation\n\ntype Subscription\n\nschema {\n  query: Query\n  mutation: Mutation\n  subscription: Subscription\n}\n\nscalar Time\n\ndirective @length(min: Int, max: Int) on FIELD_DEFINITION\ndirective @email on FIELD_DEFINITION\n",
          "BuiltIn": false
        }
      },
      "BeforeDescriptionComment": null,
      "AfterDescriptionComment": null
    },
    "include": {
      "Description": "The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.",
      "Name": "include",
      "Arguments": [
        {
          "Description": "",
          "Name": "if",
          "DefaultValue": null,
          "Type": {
            "NamedType": "Boolean",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 1281,
              "End": 1288,
              "Line": 19,
              "Column": 24,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 1277,
            "End": 1279,
            "Line": 19,
            "Column": 20,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        }
      ],
      "Locations": [
        "FIELD",
        "FRAGMENT_SPREAD",
        "INLINE_FRAGMENT"
      ],
      "IsRepeatable": false,
      "Position": {
        "Start": 1269,
        "End": 1276,
        "Line": 19,
        "Column": 12,
        "Src": {
          "Name": "prelude.graphql",
          "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
          "BuiltIn": true
        }
      },
      "BeforeDescriptionComment": null,
      "AfterDescriptionComment": null
    },
    "length": {
      "Description": "",
      "Name": "length",
      "Arguments": [
        {
          "Description": "",
          "Name": "min",
          "DefaultValue": null,
          "Type": {
            "NamedType": "Int",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 159,
              "End": 162,
              "Line": 15,
              "Column": 24,
              "Src": {
                "Name": "schema/schema.graphqls",
                "Input": "type Query\n\ntype Mutation\n\ntype Subscription\n\nschema {\n  query: Query\n  mutation: Mutation\n  subscription: Subscription\n}\n\nscalar Time\n\ndirective @length(min: Int, max: Int) on FIELD_DEFINITION\ndirective @email on FIELD_DEFINITION\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 154,
            "End": 157,
            "Line": 15,
            "Column": 19,
            "Src": {
              "Name": "schema/schema.graphqls",
              "Input": "type Query\n\ntype Mutation\n\ntype Subscription\n\nschema {\n  query: Query\n  mutation: Mutation\n  subscription: Subscription\n}\n\nscalar Time\n\ndirective @length(min: Int, max: Int) on FIELD_DEFINITION\ndirective @email on FIELD_DEFINITION\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        },
        {
          "Description": "",
          "Name": "max",
          "DefaultValue": null,
          "Type": {
            "NamedType": "Int",
            "Elem": null,
            "NonNull": false,
            "Position": {
              "Start": 169,
              "End": 172,
              "Line": 15,
              "Column": 34,
              "Src": {
                "Name": "schema/schema.graphqls",
                "Input": "type Query\n\ntype Mutation\n\ntype Subscription\n\nschema {\n  query: Query\n  mutation: Mutation\n  subscription: Subscription\n}\n\nscalar Time\n\ndirective @length(min: Int, max: Int) on FIELD_DEFINITION\ndirective @email on FIELD_DEFINITION\n",
                "BuiltIn": false
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 164,
            "End": 167,
            "Line": 15,
            "Column": 29,
            "Src": {
              "Name": "schema/schema.graphqls",
              "Input": "type Query\n\ntype Mutation\n\ntype Subscription\n\nschema {\n  query: Query\n  mutation: Mutation\n  subscription: Subscription\n}\n\nscalar Time\n\ndirective @length(min: Int, max: Int) on FIELD_DEFINITION\ndirective @email on FIELD_DEFINITION\n",
              "BuiltIn": false
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        }
      ],
      "Locations": [
        "FIELD_DEFINITION"
      ],
      "IsRepeatable": false,
      "Position": {
        "Start": 147,
        "End": 153,
        "Line": 15,
        "Column": 12,
        "Src": {
          "Name": "schema/schema.graphqls",
          "Input": "type Query\n\ntype Mutation\n\ntype Subscription\n\nschema {\n  query: Query\n  mutation: Mutation\n  subscription: Subscription\n}\n\nscalar Time\n\ndirective @length(min: Int, max: Int) on FIELD_DEFINITION\ndirective @email on FIELD_DEFINITION\n",
          "BuiltIn": false
        }
      },
      "BeforeDescriptionComment": null,
      "AfterDescriptionComment": null
    },
    "skip": {
      "Description": "The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.",
      "Name": "skip",
      "Arguments": [
        {
          "Description": "",
          "Name": "if",
          "DefaultValue": null,
          "Type": {
            "NamedType": "Boolean",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 1534,
              "End": 1541,
              "Line": 22,
              "Column": 21,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 1530,
            "End": 1532,
            "Line": 22,
            "Column": 17,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        }
      ],
      "Locations": [
        "FIELD",
        "FRAGMENT_SPREAD",
        "INLINE_FRAGMENT"
      ],
      "IsRepeatable": false,
      "Position": {
        "Start": 1525,
        "End": 1529,
        "Line": 22,
        "Column": 12,
        "Src": {
          "Name": "prelude.graphql",
          "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
          "BuiltIn": true
        }
      },
      "BeforeDescriptionComment": null,
      "AfterDescriptionComment": null
    },
    "specifiedBy": {
      "Description": "The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.",
      "Name": "specifiedBy",
      "Arguments": [
        {
          "Description": "",
          "Name": "url",
          "DefaultValue": null,
          "Type": {
            "NamedType": "String",
            "Elem": null,
            "NonNull": true,
            "Position": {
              "Start": 2208,
              "End": 2214,
              "Line": 28,
              "Column": 29,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            }
          },
          "Directives": null,
          "Position": {
            "Start": 2203,
            "End": 2206,
            "Line": 28,
            "Column": 24,
            "Src": {
              "Name": "prelude.graphql",
              "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
              "BuiltIn": true
            }
          },
          "BeforeDescriptionComment": null,
          "AfterDescriptionComment": null
        }
      ],
      "Locations": [
        "SCALAR"
      ],
      "IsRepeatable": false,
      "Position": {
        "Start": 2191,
        "End": 2202,
        "Line": 28,
        "Column": 12,
        "Src": {
          "Name": "prelude.graphql",
          "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
          "BuiltIn": true
        }
      },
      "BeforeDescriptionComment": null,
      "AfterDescriptionComment": null
    }
  },
  "PossibleTypes": {
    "AddProductToCartInput": [
      {
        "Kind": "INPUT_OBJECT",
        "Description": "",
        "Name": "AddProductToCartInput",
        "Directives": null,
        "Interfaces": null,
        "Fields": [
          {
            "Description": "",
            "Name": "cartId",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "ID",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 381,
                "End": 383,
                "Line": 26,
                "Column": 12,
                "Src": {
                  "Name": "schema/cart.graphqls",
                  "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 373,
              "End": 379,
              "Line": 26,
              "Column": 4,
              "Src": {
                "Name": "schema/cart.graphqls",
                "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "productId",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "ID",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 399,
                "End": 401,
                "Line": 27,
                "Column": 15,
                "Src": {
                  "Name": "schema/cart.graphqls",
                  "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 388,
              "End": 397,
              "Line": 27,
              "Column": 4,
              "Src": {
                "Name": "schema/cart.graphqls",
                "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "quantity",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "Int",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 416,
                "End": 419,
                "Line": 28,
                "Column": 14,
                "Src": {
                  "Name": "schema/cart.graphqls",
                  "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 406,
              "End": 414,
              "Line": 28,
              "Column": 4,
              "Src": {
                "Name": "schema/cart.graphqls",
                "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          }
        ],
        "Types": null,
        "EnumValues": null,
        "Position": {
          "Start": 346,
          "End": 367,
          "Line": 25,
          "Column": 8,
          "Src": {
            "Name": "schema/cart.graphqls",
            "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
            "BuiltIn": false
          }
        },
        "BuiltIn": false,
        "BeforeDescriptionComment": null,
        "AfterDescriptionComment": null,
        "EndOfDefinitionComment": null
      }
    ],
    "Cart": [
      {
        "Kind": "OBJECT",
        "Description": "",
        "Name": "Cart",
        "Directives": null,
        "Interfaces": null,
        "Fields": [
          {
            "Description": "",
            "Name": "id",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "ID",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 19,
                "End": 21,
                "Line": 2,
                "Column": 8,
                "Src": {
                  "Name": "schema/cart.graphqls",
                  "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 15,
              "End": 17,
              "Line": 2,
              "Column": 4,
              "Src": {
                "Name": "schema/cart.graphqls",
                "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "isActive",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "Boolean",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 36,
                "End": 43,
                "Line": 3,
                "Column": 14,
                "Src": {
                  "Name": "schema/cart.graphqls",
                  "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 26,
              "End": 34,
              "Line": 3,
              "Column": 4,
              "Src": {
                "Name": "schema/cart.graphqls",
                "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "value",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "Float",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 55,
                "End": 60,
                "Line": 4,
                "Column": 11,
                "Src": {
                  "Name": "schema/cart.graphqls",
                  "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 48,
              "End": 53,
              "Line": 4,
              "Column": 4,
              "Src": {
                "Name": "schema/cart.graphqls",
                "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "user",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "User",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 71,
                "End": 75,
                "Line": 5,
                "Column": 10,
                "Src": {
                  "Name": "schema/cart.graphqls",
                  "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 65,
              "End": 69,
              "Line": 5,
              "Column": 4,
              "Src": {
                "Name": "schema/cart.graphqls",
                "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "userId",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "ID",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 88,
                "End": 90,
                "Line": 6,
                "Column": 12,
                "Src": {
                  "Name": "schema/cart.graphqls",
                  "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 80,
              "End": 86,
              "Line": 6,
              "Column": 4,
              "Src": {
                "Name": "schema/cart.graphqls",
                "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "order",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "Order",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 101,
                "End": 106,
                "Line": 7,
                "Column": 11,
                "Src": {
                  "Name": "schema/cart.graphqls",
                  "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 94,
              "End": 99,
              "Line": 7,
              "Column": 4,
              "Src": {
                "Name": "schema/cart.graphqls",
                "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "products",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "",
              "Elem": {
                "NamedType": "CartProduct",
                "Elem": null,
                "NonNull": true,
                "Position": {
                  "Start": 121,
                  "End": 132,
                  "Line": 8,
                  "Column": 15,
                  "Src": {
                    "Name": "schema/cart.graphqls",
                    "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                    "BuiltIn": false
                  }
                }
              },
              "NonNull": false,
              "Position": {
                "Start": 121,
                "End": 132,
                "Line": 8,
                "Column": 15,
                "Src": {
                  "Name": "schema/cart.graphqls",
                  "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 110,
              "End": 118,
              "Line": 8,
              "Column": 4,
              "Src": {
                "Name": "schema/cart.graphqls",
                "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "createdAt",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "Time",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 149,
                "End": 153,
                "Line": 9,
                "Column": 15,
                "Src": {
                  "Name": "schema/cart.graphqls",
                  "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 138,
              "End": 147,
              "Line": 9,
              "Column": 4,
              "Src": {
                "Name": "schema/cart.graphqls",
                "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "updatedAt",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "Time",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 169,
                "End": 173,
                "Line": 10,
                "Column": 15,
                "Src": {
                  "Name": "schema/cart.graphqls",
                  "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 158,
              "End": 167,
              "Line": 10,
              "Column": 4,
              "Src": {
                "Name": "schema/cart.graphqls",
                "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          }
        ],
        "Types": null,
        "EnumValues": null,
        "Position": {
          "Start": 5,
          "End": 9,
          "Line": 1,
          "Column": 6,
          "Src": {
            "Name": "schema/cart.graphqls",
            "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
            "BuiltIn": false
          }
        },
        "BuiltIn": false,
        "BeforeDescriptionComment": null,
        "AfterDescriptionComment": null,
        "EndOfDefinitionComment": null
      }
    ],
    "CartProduct": [
      {
        "Kind": "OBJECT",
        "Description": "",
        "Name": "CartProduct",
        "Directives": null,
        "Interfaces": null,
        "Fields": [
          {
            "Description": "",
            "Name": "id",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "ID",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 207,
                "End": 209,
                "Line": 14,
                "Column": 8,
                "Src": {
                  "Name": "schema/cart.graphqls",
                  "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 203,
              "End": 205,
              "Line": 14,
              "Column": 4,
              "Src": {
                "Name": "schema/cart.graphqls",
                "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "quantity",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "Int",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 224,
                "End": 227,
                "Line": 15,
                "Column": 14,
                "Src": {
                  "Name": "schema/cart.graphqls",
                  "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 214,
              "End": 222,
              "Line": 15,
              "Column": 4,
              "Src": {
                "Name": "schema/cart.graphqls",
                "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "product",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "Product",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 241,
                "End": 248,
                "Line": 16,
                "Column": 13,
                "Src": {
                  "Name": "schema/cart.graphqls",
                  "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 232,
              "End": 239,
              "Line": 16,
              "Column": 4,
              "Src": {
                "Name": "schema/cart.graphqls",
                "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          }
        ],
        "Types": null,
        "EnumValues": null,
        "Position": {
          "Start": 186,
          "End": 197,
          "Line": 13,
          "Column": 7,
          "Src": {
            "Name": "schema/cart.graphqls",
            "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
            "BuiltIn": false
          }
        },
        "BuiltIn": false,
        "BeforeDescriptionComment": null,
        "AfterDescriptionComment": null,
        "EndOfDefinitionComment": null
      }
    ],
    "Category": [
      {
        "Kind": "OBJECT",
        "Description": "",
        "Name": "Category",
        "Directives": null,
        "Interfaces": null,
        "Fields": [
          {
            "Description": "",
            "Name": "id",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "ID",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 55,
                "End": 57,
                "Line": 4,
                "Column": 8,
                "Src": {
                  "Name": "schema/category.graphqls",
                  "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 51,
              "End": 53,
              "Line": 4,
              "Column": 4,
              "Src": {
                "Name": "schema/category.graphqls",
                "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "name",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "String",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 68,
                "End": 74,
                "Line": 5,
                "Column": 10,
                "Src": {
                  "Name": "schema/category.graphqls",
                  "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 62,
              "End": 66,
              "Line": 5,
              "Column": 4,
              "Src": {
                "Name": "schema/category.graphqls",
                "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "products",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "",
              "Elem": {
                "NamedType": "Product",
                "Elem": null,
                "NonNull": true,
                "Position": {
                  "Start": 90,
                  "End": 97,
                  "Line": 6,
                  "Column": 15,
                  "Src": {
                    "Name": "schema/category.graphqls",
                    "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                    "BuiltIn": false
                  }
                }
              },
              "NonNull": false,
              "Position": {
                "Start": 90,
                "End": 97,
                "Line": 6,
                "Column": 15,
                "Src": {
                  "Name": "schema/category.graphqls",
                  "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 79,
              "End": 87,
              "Line": 6,
              "Column": 4,
              "Src": {
                "Name": "schema/category.graphqls",
                "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          }
        ],
        "Types": null,
        "EnumValues": null,
        "Position": {
          "Start": 37,
          "End": 45,
          "Line": 3,
          "Column": 7,
          "Src": {
            "Name": "schema/category.graphqls",
            "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
            "BuiltIn": false
          }
        },
        "BuiltIn": false,
        "BeforeDescriptionComment": null,
        "AfterDescriptionComment": {
          "List": [
            {
              "Value": "#import \"./product.graphqls\"",
              "Position": {
                "Start": 0,
                "End": 28,
                "Line": 1,
                "Column": 1,
                "Src": {
                  "Name": "schema/category.graphqls",
                  "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            }
          ]
        },
        "EndOfDefinitionComment": null
      }
    ],
    "CreateCartInput": [
      {
        "Kind": "INPUT_OBJECT",
        "Description": "",
        "Name": "CreateCartInput",
        "Directives": null,
        "Interfaces": null,
        "Fields": [
          {
            "Description": "",
            "Name": "isActive",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "Boolean",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 293,
                "End": 300,
                "Line": 20,
                "Column": 14,
                "Src": {
                  "Name": "schema/cart.graphqls",
                  "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 283,
              "End": 291,
              "Line": 20,
              "Column": 4,
              "Src": {
                "Name": "schema/cart.graphqls",
                "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "value",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "Float",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 312,
                "End": 317,
                "Line": 21,
                "Column": 11,
                "Src": {
                  "Name": "schema/cart.graphqls",
                  "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 305,
              "End": 310,
              "Line": 21,
              "Column": 4,
              "Src": {
                "Name": "schema/cart.graphqls",
                "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "userId",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "ID",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 330,
                "End": 332,
                "Line": 22,
                "Column": 12,
                "Src": {
                  "Name": "schema/cart.graphqls",
                  "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 322,
              "End": 328,
              "Line": 22,
              "Column": 4,
              "Src": {
                "Name": "schema/cart.graphqls",
                "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          }
        ],
        "Types": null,
        "EnumValues": null,
        "Position": {
          "Start": 262,
          "End": 277,
          "Line": 19,
          "Column": 8,
          "Src": {
            "Name": "schema/cart.graphqls",
            "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
            "BuiltIn": false
          }
        },
        "BuiltIn": false,
        "BeforeDescriptionComment": null,
        "AfterDescriptionComment": null,
        "EndOfDefinitionComment": null
      }
    ],
    "CreateCategoryInput": [
      {
        "Kind": "INPUT_OBJECT",
        "Description": "",
        "Name": "CreateCategoryInput",
        "Directives": null,
        "Interfaces": null,
        "Fields": [
          {
            "Description": "",
            "Name": "name",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "String",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 143,
                "End": 149,
                "Line": 10,
                "Column": 10,
                "Src": {
                  "Name": "schema/category.graphqls",
                  "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 137,
              "End": 141,
              "Line": 10,
              "Column": 4,
              "Src": {
                "Name": "schema/category.graphqls",
                "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          }
        ],
        "Types": null,
        "EnumValues": null,
        "Position": {
          "Start": 112,
          "End": 131,
          "Line": 9,
          "Column": 8,
          "Src": {
            "Name": "schema/category.graphqls",
            "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
            "BuiltIn": false
          }
        },
        "BuiltIn": false,
        "BeforeDescriptionComment": null,
        "AfterDescriptionComment": null,
        "EndOfDefinitionComment": null
      }
    ],
    "CreateOrderInput": [
      {
        "Kind": "INPUT_OBJECT",
        "Description": "",
        "Name": "CreateOrderInput",
        "Directives": null,
        "Interfaces": null,
        "Fields": [
          {
            "Description": "",
            "Name": "value",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "Float",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 268,
                "End": 273,
                "Line": 16,
                "Column": 11,
                "Src": {
                  "Name": "schema/order.graphqls",
                  "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 261,
              "End": 266,
              "Line": 16,
              "Column": 4,
              "Src": {
                "Name": "schema/order.graphqls",
                "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "cartId",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "ID",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 286,
                "End": 288,
                "Line": 17,
                "Column": 12,
                "Src": {
                  "Name": "schema/order.graphqls",
                  "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 278,
              "End": 284,
              "Line": 17,
              "Column": 4,
              "Src": {
                "Name": "schema/order.graphqls",
                "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          }
        ],
        "Types": null,
        "EnumValues": null,
        "Position": {
          "Start": 239,
          "End": 255,
          "Line": 15,
          "Column": 8,
          "Src": {
            "Name": "schema/order.graphqls",
            "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
            "BuiltIn": false
          }
        },
        "BuiltIn": false,
        "BeforeDescriptionComment": null,
        "AfterDescriptionComment": null,
        "EndOfDefinitionComment": null
      }
    ],
    "CreateProductInput": [
      {
        "Kind": "INPUT_OBJECT",
        "Description": "",
        "Name": "CreateProductInput",
        "Directives": null,
        "Interfaces": null,
        "Fields": [
          {
            "Description": "",
            "Name": "name",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "String",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 256,
                "End": 262,
                "Line": 16,
                "Column": 10,
                "Src": {
                  "Name": "schema/product.graphqls",
                  "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 250,
              "End": 254,
              "Line": 16,
              "Column": 4,
              "Src": {
                "Name": "schema/product.graphqls",
                "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "price",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "Float",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 274,
                "End": 279,
                "Line": 17,
                "Column": 11,
                "Src": {
                  "Name": "schema/product.graphqls",
                  "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 267,
              "End": 272,
              "Line": 17,
              "Column": 4,
              "Src": {
                "Name": "schema/product.graphqls",
                "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "description",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "String",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 297,
                "End": 303,
                "Line": 18,
                "Column": 17,
                "Src": {
                  "Name": "schema/product.graphqls",
                  "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 284,
              "End": 295,
              "Line": 18,
              "Column": 4,
              "Src": {
                "Name": "schema/product.graphqls",
                "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          }
        ],
        "Types": null,
        "EnumValues": null,
        "Position": {
          "Start": 226,
          "End": 244,
          "Line": 15,
          "Column": 8,
          "Src": {
            "Name": "schema/product.graphqls",
            "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
            "BuiltIn": false
          }
        },
        "BuiltIn": false,
        "BeforeDescriptionComment": null,
        "AfterDescriptionComment": null,
        "EndOfDefinitionComment": null
      }
    ],
    "CreateUserInput": [
      {
        "Kind": "INPUT_OBJECT",
        "Description": "",
        "Name": "CreateUserInput",
        "Directives": null,
        "Interfaces": null,
        "Fields": [
          {
            "Description": "",
            "Name": "name",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "String",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 206,
                "End": 212,
                "Line": 12,
                "Column": 10,
                "Src": {
                  "Name": "schema/user.graphqls",
                  "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 200,
              "End": 204,
              "Line": 12,
              "Column": 4,
              "Src": {
                "Name": "schema/user.graphqls",
                "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "email",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "String",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 224,
                "End": 230,
                "Line": 13,
                "Column": 11,
                "Src": {
                  "Name": "schema/user.graphqls",
                  "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 217,
              "End": 222,
              "Line": 13,
              "Column": 4,
              "Src": {
                "Name": "schema/user.graphqls",
                "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "password",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "String",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 245,
                "End": 251,
                "Line": 14,
                "Column": 14,
                "Src": {
                  "Name": "schema/user.graphqls",
                  "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 235,
              "End": 243,
              "Line": 14,
              "Column": 4,
              "Src": {
                "Name": "schema/user.graphqls",
                "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          }
        ],
        "Types": null,
        "EnumValues": null,
        "Position": {
          "Start": 179,
          "End": 194,
          "Line": 11,
          "Column": 8,
          "Src": {
            "Name": "schema/user.graphqls",
            "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
            "BuiltIn": false
          }
        },
        "BuiltIn": false,
        "BeforeDescriptionComment": null,
        "AfterDescriptionComment": null,
        "EndOfDefinitionComment": null
      }
    ],
    "ListProductsInput": [
      {
        "Kind": "INPUT_OBJECT",
        "Description": "",
        "Name": "ListProductsInput",
        "Directives": null,
        "Interfaces": null,
        "Fields": [
          {
            "Description": "",
            "Name": "name",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "String",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 444,
                "End": 450,
                "Line": 29,
                "Column": 10,
                "Src": {
                  "Name": "schema/product.graphqls",
                  "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 438,
              "End": 442,
              "Line": 29,
              "Column": 4,
              "Src": {
                "Name": "schema/product.graphqls",
                "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "price",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "Float",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 461,
                "End": 466,
                "Line": 30,
                "Column": 11,
                "Src": {
                  "Name": "schema/product.graphqls",
                  "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 454,
              "End": 459,
              "Line": 30,
              "Column": 4,
              "Src": {
                "Name": "schema/product.graphqls",
                "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "order",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "String",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 477,
                "End": 483,
                "Line": 31,
                "Column": 11,
                "Src": {
                  "Name": "schema/product.graphqls",
                  "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 470,
              "End": 475,
              "Line": 31,
              "Column": 4,
              "Src": {
                "Name": "schema/product.graphqls",
                "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "sort",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "SortDirection",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 493,
                "End": 506,
                "Line": 32,
                "Column": 10,
                "Src": {
                  "Name": "schema/product.graphqls",
                  "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 487,
              "End": 491,
              "Line": 32,
              "Column": 4,
              "Src": {
                "Name": "schema/product.graphqls",
                "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          }
        ],
        "Types": null,
        "EnumValues": null,
        "Position": {
          "Start": 415,
          "End": 432,
          "Line": 28,
          "Column": 8,
          "Src": {
            "Name": "schema/product.graphqls",
            "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
            "BuiltIn": false
          }
        },
        "BuiltIn": false,
        "BeforeDescriptionComment": null,
        "AfterDescriptionComment": null,
        "EndOfDefinitionComment": null
      }
    ],
    "LoginInput": [
      {
        "Kind": "INPUT_OBJECT",
        "Description": "",
        "Name": "LoginInput",
        "Directives": null,
        "Interfaces": null,
        "Fields": [
          {
            "Description": "",
            "Name": "email",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "String",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 413,
                "End": 419,
                "Line": 26,
                "Column": 11,
                "Src": {
                  "Name": "schema/user.graphqls",
                  "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 406,
              "End": 411,
              "Line": 26,
              "Column": 4,
              "Src": {
                "Name": "schema/user.graphqls",
                "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "password",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "String",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 434,
                "End": 440,
                "Line": 27,
                "Column": 14,
                "Src": {
                  "Name": "schema/user.graphqls",
                  "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 424,
              "End": 432,
              "Line": 27,
              "Column": 4,
              "Src": {
                "Name": "schema/user.graphqls",
                "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          }
        ],
        "Types": null,
        "EnumValues": null,
        "Position": {
          "Start": 390,
          "End": 400,
          "Line": 25,
          "Column": 8,
          "Src": {
            "Name": "schema/user.graphqls",
            "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
            "BuiltIn": false
          }
        },
        "BuiltIn": false,
        "BeforeDescriptionComment": null,
        "AfterDescriptionComment": null,
        "EndOfDefinitionComment": null
      }
    ],
    "Mutation": [
      {
        "Kind": "OBJECT",
        "Description": "",
        "Name": "Mutation",
        "Directives": null,
        "Interfaces": null,
        "Fields": [
          {
            "Description": "",
            "Name": "createCart",
            "Arguments": [
              {
                "Description": "",
                "Name": "input",
                "DefaultValue": null,
                "Type": {
                  "NamedType": "CreateCartInput",
                  "Elem": null,
                  "NonNull": true,
                  "Position": {
                    "Start": 557,
                    "End": 572,
                    "Line": 37,
                    "Column": 22,
                    "Src": {
                      "Name": "schema/cart.graphqls",
                      "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Directives": null,
                "Position": {
                  "Start": 550,
                  "End": 555,
                  "Line": 37,
                  "Column": 15,
                  "Src": {
                    "Name": "schema/cart.graphqls",
                    "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                    "BuiltIn": false
                  }
                },
                "BeforeDescriptionComment": null,
                "AfterDescriptionComment": null
              }
            ],
            "DefaultValue": null,
            "Type": {
              "NamedType": "Cart",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 576,
                "End": 580,
                "Line": 37,
                "Column": 41,
                "Src": {
                  "Name": "schema/cart.graphqls",
                  "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 539,
              "End": 549,
              "Line": 37,
              "Column": 4,
              "Src": {
                "Name": "schema/cart.graphqls",
                "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "addProductToCart",
            "Arguments": [
              {
                "Description": "",
                "Name": "input",
                "DefaultValue": null,
                "Type": {
                  "NamedType": "AddProductToCartInput",
                  "Elem": null,
                  "NonNull": true,
                  "Position": {
                    "Start": 608,
                    "End": 629,
                    "Line": 38,
                    "Column": 28,
                    "Src": {
                      "Name": "schema/cart.graphqls",
                      "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Directives": null,
                "Position": {
                  "Start": 601,
                  "End": 606,
                  "Line": 38,
                  "Column": 21,
                  "Src": {
                    "Name": "schema/cart.graphqls",
                    "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                    "BuiltIn": false
                  }
                },
                "BeforeDescriptionComment": null,
                "AfterDescriptionComment": null
              }
            ],
            "DefaultValue": null,
            "Type": {
              "NamedType": "CartProduct",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 633,
                "End": 644,
                "Line": 38,
                "Column": 53,
                "Src": {
                  "Name": "schema/cart.graphqls",
                  "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 584,
              "End": 600,
              "Line": 38,
              "Column": 4,
              "Src": {
                "Name": "schema/cart.graphqls",
                "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "removeProductFromCart",
            "Arguments": [
              {
                "Description": "",
                "Name": "cartProductID",
                "DefaultValue": null,
                "Type": {
                  "NamedType": "ID",
                  "Elem": null,
                  "NonNull": true,
                  "Position": {
                    "Start": 685,
                    "End": 687,
                    "Line": 39,
                    "Column": 41,
                    "Src": {
                      "Name": "schema/cart.graphqls",
                      "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Directives": null,
                "Position": {
                  "Start": 670,
                  "End": 683,
                  "Line": 39,
                  "Column": 26,
                  "Src": {
                    "Name": "schema/cart.graphqls",
                    "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                    "BuiltIn": false
                  }
                },
                "BeforeDescriptionComment": null,
                "AfterDescriptionComment": null
              }
            ],
            "DefaultValue": null,
            "Type": {
              "NamedType": "Cart",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 691,
                "End": 695,
                "Line": 39,
                "Column": 47,
                "Src": {
                  "Name": "schema/cart.graphqls",
                  "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 648,
              "End": 669,
              "Line": 39,
              "Column": 4,
              "Src": {
                "Name": "schema/cart.graphqls",
                "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "createCategory",
            "Arguments": [
              {
                "Description": "",
                "Name": "input",
                "DefaultValue": null,
                "Type": {
                  "NamedType": "CreateCategoryInput",
                  "Elem": null,
                  "NonNull": true,
                  "Position": {
                    "Start": 357,
                    "End": 376,
                    "Line": 24,
                    "Column": 26,
                    "Src": {
                      "Name": "schema/category.graphqls",
                      "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Directives": null,
                "Position": {
                  "Start": 350,
                  "End": 355,
                  "Line": 24,
                  "Column": 19,
                  "Src": {
                    "Name": "schema/category.graphqls",
                    "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                    "BuiltIn": false
                  }
                },
                "BeforeDescriptionComment": null,
                "AfterDescriptionComment": null
              }
            ],
            "DefaultValue": null,
            "Type": {
              "NamedType": "Category",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 380,
                "End": 388,
                "Line": 24,
                "Column": 49,
                "Src": {
                  "Name": "schema/category.graphqls",
                  "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 335,
              "End": 349,
              "Line": 24,
              "Column": 4,
              "Src": {
                "Name": "schema/category.graphqls",
                "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "updateCategory",
            "Arguments": [
              {
                "Description": "",
                "Name": "input",
                "DefaultValue": null,
                "Type": {
                  "NamedType": "UpdateCategoryInput",
                  "Elem": null,
                  "NonNull": true,
                  "Position": {
                    "Start": 414,
                    "End": 433,
                    "Line": 25,
                    "Column": 26,
                    "Src": {
                      "Name": "schema/category.graphqls",
                      "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Directives": null,
                "Position": {
                  "Start": 407,
                  "End": 412,
                  "Line": 25,
                  "Column": 19,
                  "Src": {
                    "Name": "schema/category.graphqls",
                    "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                    "BuiltIn": false
                  }
                },
                "BeforeDescriptionComment": null,
                "AfterDescriptionComment": null
              }
            ],
            "DefaultValue": null,
            "Type": {
              "NamedType": "Category",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 437,
                "End": 445,
                "Line": 25,
                "Column": 49,
                "Src": {
                  "Name": "schema/category.graphqls",
                  "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 392,
              "End": 406,
              "Line": 25,
              "Column": 4,
              "Src": {
                "Name": "schema/category.graphqls",
                "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "deleteCategory",
            "Arguments": [
              {
                "Description": "",
                "Name": "id",
                "DefaultValue": null,
                "Type": {
                  "NamedType": "ID",
                  "Elem": null,
                  "NonNull": true,
                  "Position": {
                    "Start": 468,
                    "End": 470,
                    "Line": 26,
                    "Column": 23,
                    "Src": {
                      "Name": "schema/category.graphqls",
                      "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Directives": null,
                "Position": {
                  "Start": 464,
                  "End": 466,
                  "Line": 26,
                  "Column": 19,
                  "Src": {
                    "Name": "schema/category.graphqls",
                    "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                    "BuiltIn": false
                  }
                },
                "BeforeDescriptionComment": null,
                "AfterDescriptionComment": null
              }
            ],
            "DefaultValue": null,
            "Type": {
              "NamedType": "Boolean",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 474,
                "End": 481,
                "Line": 26,
                "Column": 29,
                "Src": {
                  "Name": "schema/category.graphqls",
                  "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 449,
              "End": 463,
              "Line": 26,
              "Column": 4,
              "Src": {
                "Name": "schema/category.graphqls",
                "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "createOrder",
            "Arguments": [
              {
                "Description": "",
                "Name": "input",
                "DefaultValue": null,
                "Type": {
                  "NamedType": "CreateOrderInput",
                  "Elem": null,
                  "NonNull": true,
                  "Position": {
                    "Start": 565,
                    "End": 581,
                    "Line": 39,
                    "Column": 23,
                    "Src": {
                      "Name": "schema/order.graphqls",
                      "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Directives": null,
                "Position": {
                  "Start": 558,
                  "End": 563,
                  "Line": 39,
                  "Column": 16,
                  "Src": {
                    "Name": "schema/order.graphqls",
                    "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                    "BuiltIn": false
                  }
                },
                "BeforeDescriptionComment": null,
                "AfterDescriptionComment": null
              }
            ],
            "DefaultValue": null,
            "Type": {
              "NamedType": "Order",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 585,
                "End": 590,
                "Line": 39,
                "Column": 43,
                "Src": {
                  "Name": "schema/order.graphqls",
                  "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 546,
              "End": 557,
              "Line": 39,
              "Column": 4,
              "Src": {
                "Name": "schema/order.graphqls",
                "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "deleteOrder",
            "Arguments": [
              {
                "Description": "",
                "Name": "id",
                "DefaultValue": null,
                "Type": {
                  "NamedType": "ID",
                  "Elem": null,
                  "NonNull": true,
                  "Position": {
                    "Start": 611,
                    "End": 613,
                    "Line": 40,
                    "Column": 20,
                    "Src": {
                      "Name": "schema/order.graphqls",
                      "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Directives": null,
                "Position": {
                  "Start": 607,
                  "End": 609,
                  "Line": 40,
                  "Column": 16,
                  "Src": {
                    "Name": "schema/order.graphqls",
                    "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                    "BuiltIn": false
                  }
                },
                "BeforeDescriptionComment": null,
                "AfterDescriptionComment": null
              }
            ],
            "DefaultValue": null,
            "Type": {
              "NamedType": "Order",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 617,
                "End": 622,
                "Line": 40,
                "Column": 26,
                "Src": {
                  "Name": "schema/order.graphqls",
                  "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 595,
              "End": 606,
              "Line": 40,
              "Column": 4,
              "Src": {
                "Name": "schema/order.graphqls",
                "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "createProduct",
            "Arguments": [
              {
                "Description": "",
                "Name": "input",
                "DefaultValue": null,
                "Type": {
                  "NamedType": "CreateProductInput",
                  "Elem": null,
                  "NonNull": true,
                  "Position": {
                    "Start": 714,
                    "End": 732,
                    "Line": 46,
                    "Column": 25,
                    "Src": {
                      "Name": "schema/product.graphqls",
                      "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Directives": null,
                "Position": {
                  "Start": 707,
                  "End": 712,
                  "Line": 46,
                  "Column": 18,
                  "Src": {
                    "Name": "schema/product.graphqls",
                    "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                    "BuiltIn": false
                  }
                },
                "BeforeDescriptionComment": null,
                "AfterDescriptionComment": null
              }
            ],
            "DefaultValue": null,
            "Type": {
              "NamedType": "Product",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 736,
                "End": 743,
                "Line": 46,
                "Column": 47,
                "Src": {
                  "Name": "schema/product.graphqls",
                  "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 693,
              "End": 706,
              "Line": 46,
              "Column": 4,
              "Src": {
                "Name": "schema/product.graphqls",
                "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "updateProduct",
            "Arguments": [
              {
                "Description": "",
                "Name": "input",
                "DefaultValue": null,
                "Type": {
                  "NamedType": "UpdateProductInput",
                  "Elem": null,
                  "NonNull": true,
                  "Position": {
                    "Start": 768,
                    "End": 786,
                    "Line": 47,
                    "Column": 25,
                    "Src": {
                      "Name": "schema/product.graphqls",
                      "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Directives": null,
                "Position": {
                  "Start": 761,
                  "End": 766,
                  "Line": 47,
                  "Column": 18,
                  "Src": {
                    "Name": "schema/product.graphqls",
                    "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                    "BuiltIn": false
                  }
                },
                "BeforeDescriptionComment": null,
                "AfterDescriptionComment": null
              }
            ],
            "DefaultValue": null,
            "Type": {
              "NamedType": "Product",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 790,
                "End": 797,
                "Line": 47,
                "Column": 47,
                "Src": {
                  "Name": "schema/product.graphqls",
                  "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 747,
              "End": 760,
              "Line": 47,
              "Column": 4,
              "Src": {
                "Name": "schema/product.graphqls",
                "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "deleteProduct",
            "Arguments": [
              {
                "Description": "",
                "Name": "id",
                "DefaultValue": null,
                "Type": {
                  "NamedType": "ID",
                  "Elem": null,
                  "NonNull": true,
                  "Position": {
                    "Start": 819,
                    "End": 821,
                    "Line": 48,
                    "Column": 22,
                    "Src": {
                      "Name": "schema/product.graphqls",
                      "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Directives": null,
                "Position": {
                  "Start": 815,
                  "End": 817,
                  "Line": 48,
                  "Column": 18,
                  "Src": {
                    "Name": "schema/product.graphqls",
                    "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                    "BuiltIn": false
                  }
                },
                "BeforeDescriptionComment": null,
                "AfterDescriptionComment": null
              }
            ],
            "DefaultValue": null,
            "Type": {
              "NamedType": "Boolean",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 825,
                "End": 832,
                "Line": 48,
                "Column": 28,
                "Src": {
                  "Name": "schema/product.graphqls",
                  "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 801,
              "End": 814,
              "Line": 48,
              "Column": 4,
              "Src": {
                "Name": "schema/product.graphqls",
                "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "login",
            "Arguments": [
              {
                "Description": "",
                "Name": "LoginInput",
                "DefaultValue": null,
                "Type": {
                  "NamedType": "LoginInput",
                  "Elem": null,
                  "NonNull": true,
                  "Position": {
                    "Start": 566,
                    "End": 576,
                    "Line": 36,
                    "Column": 22,
                    "Src": {
                      "Name": "schema/user.graphqls",
                      "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Directives": null,
                "Position": {
                  "Start": 554,
                  "End": 564,
                  "Line": 36,
                  "Column": 10,
                  "Src": {
                    "Name": "schema/user.graphqls",
                    "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                    "BuiltIn": false
                  }
                },
                "BeforeDescriptionComment": null,
                "AfterDescriptionComment": null
              }
            ],
            "DefaultValue": null,
            "Type": {
              "NamedType": "User",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 580,
                "End": 584,
                "Line": 36,
                "Column": 36,
                "Src": {
                  "Name": "schema/user.graphqls",
                  "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 548,
              "End": 553,
              "Line": 36,
              "Column": 4,
              "Src": {
                "Name": "schema/user.graphqls",
                "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "registerUser",
            "Arguments": [
              {
                "Description": "",
                "Name": "input",
                "DefaultValue": null,
                "Type": {
                  "NamedType": "CreateUserInput",
                  "Elem": null,
                  "NonNull": true,
                  "Position": {
                    "Start": 608,
                    "End": 623,
                    "Line": 37,
                    "Column": 24,
                    "Src": {
                      "Name": "schema/user.graphqls",
                      "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Directives": null,
                "Position": {
                  "Start": 601,
                  "End": 606,
                  "Line": 37,
                  "Column": 17,
                  "Src": {
                    "Name": "schema/user.graphqls",
                    "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                    "BuiltIn": false
                  }
                },
                "BeforeDescriptionComment": null,
                "AfterDescriptionComment": null
              }
            ],
            "DefaultValue": null,
            "Type": {
              "NamedType": "User",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 627,
                "End": 631,
                "Line": 37,
                "Column": 43,
                "Src": {
                  "Name": "schema/user.graphqls",
                  "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 588,
              "End": 600,
              "Line": 37,
              "Column": 4,
              "Src": {
                "Name": "schema/user.graphqls",
                "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "updateUser",
            "Arguments": [
              {
                "Description": "",
                "Name": "input",
                "DefaultValue": null,
                "Type": {
                  "NamedType": "UpdateUserInput",
                  "Elem": null,
                  "NonNull": true,
                  "Position": {
                    "Start": 653,
                    "End": 668,
                    "Line": 38,
                    "Column": 22,
                    "Src": {
                      "Name": "schema/user.graphqls",
                      "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Directives": null,
                "Position": {
                  "Start": 646,
                  "End": 651,
                  "Line": 38,
                  "Column": 15,
                  "Src": {
                    "Name": "schema/user.graphqls",
                    "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                    "BuiltIn": false
                  }
                },
                "BeforeDescriptionComment": null,
                "AfterDescriptionComment": null
              }
            ],
            "DefaultValue": null,
            "Type": {
              "NamedType": "User",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 672,
                "End": 676,
                "Line": 38,
                "Column": 41,
                "Src": {
                  "Name": "schema/user.graphqls",
                  "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 635,
              "End": 645,
              "Line": 38,
              "Column": 4,
              "Src": {
                "Name": "schema/user.graphqls",
                "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "deleteUser",
            "Arguments": [
              {
                "Description": "",
                "Name": "id",
                "DefaultValue": null,
                "Type": {
                  "NamedType": "ID",
                  "Elem": null,
                  "NonNull": true,
                  "Position": {
                    "Start": 695,
                    "End": 697,
                    "Line": 39,
                    "Column": 19,
                    "Src": {
                      "Name": "schema/user.graphqls",
                      "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Directives": null,
                "Position": {
                  "Start": 691,
                  "End": 693,
                  "Line": 39,
                  "Column": 15,
                  "Src": {
                    "Name": "schema/user.graphqls",
                    "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                    "BuiltIn": false
                  }
                },
                "BeforeDescriptionComment": null,
                "AfterDescriptionComment": null
              }
            ],
            "DefaultValue": null,
            "Type": {
              "NamedType": "Boolean",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 701,
                "End": 708,
                "Line": 39,
                "Column": 25,
                "Src": {
                  "Name": "schema/user.graphqls",
                  "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 680,
              "End": 690,
              "Line": 39,
              "Column": 4,
              "Src": {
                "Name": "schema/user.graphqls",
                "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          }
        ],
        "Types": null,
        "EnumValues": null,
        "Position": {
          "Start": 17,
          "End": 25,
          "Line": 3,
          "Column": 6,
          "Src": {
            "Name": "schema/schema.graphqls",
            "Input": "type Query\n\ntype Mutation\n\ntype Subscription\n\nschema {\n  query: Query\n  mutation: Mutation\n  subscription: Subscription\n}\n\nscalar Time\n\ndirective @length(min: Int, max: Int) on FIELD_DEFINITION\ndirective @email on FIELD_DEFINITION\n",
            "BuiltIn": false
          }
        },
        "BuiltIn": false,
        "BeforeDescriptionComment": null,
        "AfterDescriptionComment": null,
        "EndOfDefinitionComment": null
      }
    ],
    "Order": [
      {
        "Kind": "OBJECT",
        "Description": "",
        "Name": "Order",
        "Directives": null,
        "Interfaces": null,
        "Fields": [
          {
            "Description": "",
            "Name": "id",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "ID",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 76,
                "End": 78,
                "Line": 5,
                "Column": 8,
                "Src": {
                  "Name": "schema/order.graphqls",
                  "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 72,
              "End": 74,
              "Line": 5,
              "Column": 4,
              "Src": {
                "Name": "schema/order.graphqls",
                "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "value",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "Float",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 90,
                "End": 95,
                "Line": 6,
                "Column": 11,
                "Src": {
                  "Name": "schema/order.graphqls",
                  "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 83,
              "End": 88,
              "Line": 6,
              "Column": 4,
              "Src": {
                "Name": "schema/order.graphqls",
                "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "paymentStatus",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "PaymentStatus",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 115,
                "End": 128,
                "Line": 7,
                "Column": 19,
                "Src": {
                  "Name": "schema/order.graphqls",
                  "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 100,
              "End": 113,
              "Line": 7,
              "Column": 4,
              "Src": {
                "Name": "schema/order.graphqls",
                "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "billingType",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "BillingType",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 145,
                "End": 156,
                "Line": 8,
                "Column": 17,
                "Src": {
                  "Name": "schema/order.graphqls",
                  "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 132,
              "End": 143,
              "Line": 8,
              "Column": 4,
              "Src": {
                "Name": "schema/order.graphqls",
                "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "cart",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "Cart",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 166,
                "End": 170,
                "Line": 9,
                "Column": 10,
                "Src": {
                  "Name": "schema/order.graphqls",
                  "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 160,
              "End": 164,
              "Line": 9,
              "Column": 4,
              "Src": {
                "Name": "schema/order.graphqls",
                "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "user",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "User",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 181,
                "End": 185,
                "Line": 10,
                "Column": 10,
                "Src": {
                  "Name": "schema/order.graphqls",
                  "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 175,
              "End": 179,
              "Line": 10,
              "Column": 4,
              "Src": {
                "Name": "schema/order.graphqls",
                "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "createdAt",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "Time",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 201,
                "End": 205,
                "Line": 11,
                "Column": 15,
                "Src": {
                  "Name": "schema/order.graphqls",
                  "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 190,
              "End": 199,
              "Line": 11,
              "Column": 4,
              "Src": {
                "Name": "schema/order.graphqls",
                "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "updatedAt",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "Time",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 221,
                "End": 225,
                "Line": 12,
                "Column": 15,
                "Src": {
                  "Name": "schema/order.graphqls",
                  "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 210,
              "End": 219,
              "Line": 12,
              "Column": 4,
              "Src": {
                "Name": "schema/order.graphqls",
                "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          }
        ],
        "Types": null,
        "EnumValues": null,
        "Position": {
          "Start": 61,
          "End": 66,
          "Line": 4,
          "Column": 7,
          "Src": {
            "Name": "schema/order.graphqls",
            "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
            "BuiltIn": false
          }
        },
        "BuiltIn": false,
        "BeforeDescriptionComment": null,
        "AfterDescriptionComment": {
          "List": [
            {
              "Value": "#import \"./cart.graphqls\"",
              "Position": {
                "Start": 0,
                "End": 25,
                "Line": 1,
                "Column": 1,
                "Src": {
                  "Name": "schema/order.graphqls",
                  "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            {
              "Value": "#import \"./user.graphqls\"",
              "Position": {
                "Start": 27,
                "End": 52,
                "Line": 2,
                "Column": 2,
                "Src": {
                  "Name": "schema/order.graphqls",
                  "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            }
          ]
        },
        "EndOfDefinitionComment": null
      }
    ],
    "Product": [
      {
        "Kind": "OBJECT",
        "Description": "",
        "Name": "Product",
        "Directives": null,
        "Interfaces": null,
        "Fields": [
          {
            "Description": "",
            "Name": "id",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "ID",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 55,
                "End": 57,
                "Line": 4,
                "Column": 8,
                "Src": {
                  "Name": "schema/product.graphqls",
                  "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 51,
              "End": 53,
              "Line": 4,
              "Column": 4,
              "Src": {
                "Name": "schema/product.graphqls",
                "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "name",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "String",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 68,
                "End": 74,
                "Line": 5,
                "Column": 10,
                "Src": {
                  "Name": "schema/product.graphqls",
                  "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 62,
              "End": 66,
              "Line": 5,
              "Column": 4,
              "Src": {
                "Name": "schema/product.graphqls",
                "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "price",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "Float",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 86,
                "End": 91,
                "Line": 6,
                "Column": 11,
                "Src": {
                  "Name": "schema/product.graphqls",
                  "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 79,
              "End": 84,
              "Line": 6,
              "Column": 4,
              "Src": {
                "Name": "schema/product.graphqls",
                "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "description",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "String",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 109,
                "End": 115,
                "Line": 7,
                "Column": 17,
                "Src": {
                  "Name": "schema/product.graphqls",
                  "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 96,
              "End": 107,
              "Line": 7,
              "Column": 4,
              "Src": {
                "Name": "schema/product.graphqls",
                "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "categoryID",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "ID",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 131,
                "End": 133,
                "Line": 8,
                "Column": 16,
                "Src": {
                  "Name": "schema/product.graphqls",
                  "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 119,
              "End": 129,
              "Line": 8,
              "Column": 4,
              "Src": {
                "Name": "schema/product.graphqls",
                "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "category",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "Category",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 147,
                "End": 155,
                "Line": 9,
                "Column": 14,
                "Src": {
                  "Name": "schema/product.graphqls",
                  "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 137,
              "End": 145,
              "Line": 9,
              "Column": 4,
              "Src": {
                "Name": "schema/product.graphqls",
                "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "carts",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "",
              "Elem": {
                "NamedType": "Cart",
                "Elem": null,
                "NonNull": true,
                "Position": {
                  "Start": 167,
                  "End": 171,
                  "Line": 10,
                  "Column": 12,
                  "Src": {
                    "Name": "schema/product.graphqls",
                    "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                    "BuiltIn": false
                  }
                }
              },
              "NonNull": false,
              "Position": {
                "Start": 167,
                "End": 171,
                "Line": 10,
                "Column": 12,
                "Src": {
                  "Name": "schema/product.graphqls",
                  "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 159,
              "End": 164,
              "Line": 10,
              "Column": 4,
              "Src": {
                "Name": "schema/product.graphqls",
                "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "createdAt",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "Time",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 188,
                "End": 192,
                "Line": 11,
                "Column": 15,
                "Src": {
                  "Name": "schema/product.graphqls",
                  "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 177,
              "End": 186,
              "Line": 11,
              "Column": 4,
              "Src": {
                "Name": "schema/product.graphqls",
                "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "updatedAt",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "Time",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 208,
                "End": 212,
                "Line": 12,
                "Column": 15,
                "Src": {
                  "Name": "schema/product.graphqls",
                  "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 197,
              "End": 206,
              "Line": 12,
              "Column": 4,
              "Src": {
                "Name": "schema/product.graphqls",
                "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          }
        ],
        "Types": null,
        "EnumValues": null,
        "Position": {
          "Start": 38,
          "End": 45,
          "Line": 3,
          "Column": 7,
          "Src": {
            "Name": "schema/product.graphqls",
            "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
            "BuiltIn": false
          }
        },
        "BuiltIn": false,
        "BeforeDescriptionComment": null,
        "AfterDescriptionComment": {
          "List": [
            {
              "Value": "#import \"./category.graphqls\"",
              "Position": {
                "Start": 0,
                "End": 29,
                "Line": 1,
                "Column": 1,
                "Src": {
                  "Name": "schema/product.graphqls",
                  "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            }
          ]
        },
        "EndOfDefinitionComment": null
      }
    ],
    "Query": [
      {
        "Kind": "OBJECT",
        "Description": "",
        "Name": "Query",
        "Directives": null,
        "Interfaces": null,
        "Fields": [
          {
            "Description": "",
            "Name": "getCart",
            "Arguments": [
              {
                "Description": "",
                "Name": "id",
                "DefaultValue": null,
                "Type": {
                  "NamedType": "ID",
                  "Elem": null,
                  "NonNull": true,
                  "Position": {
                    "Start": 462,
                    "End": 464,
                    "Line": 32,
                    "Column": 16,
                    "Src": {
                      "Name": "schema/cart.graphqls",
                      "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Directives": null,
                "Position": {
                  "Start": 458,
                  "End": 460,
                  "Line": 32,
                  "Column": 12,
                  "Src": {
                    "Name": "schema/cart.graphqls",
                    "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                    "BuiltIn": false
                  }
                },
                "BeforeDescriptionComment": null,
                "AfterDescriptionComment": null
              }
            ],
            "DefaultValue": null,
            "Type": {
              "NamedType": "Cart",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 468,
                "End": 472,
                "Line": 32,
                "Column": 22,
                "Src": {
                  "Name": "schema/cart.graphqls",
                  "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 450,
              "End": 457,
              "Line": 32,
              "Column": 4,
              "Src": {
                "Name": "schema/cart.graphqls",
                "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "listCarts",
            "Arguments": [
              {
                "Description": "",
                "Name": "userID",
                "DefaultValue": null,
                "Type": {
                  "NamedType": "ID",
                  "Elem": null,
                  "NonNull": true,
                  "Position": {
                    "Start": 494,
                    "End": 496,
                    "Line": 33,
                    "Column": 22,
                    "Src": {
                      "Name": "schema/cart.graphqls",
                      "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Directives": null,
                "Position": {
                  "Start": 486,
                  "End": 492,
                  "Line": 33,
                  "Column": 14,
                  "Src": {
                    "Name": "schema/cart.graphqls",
                    "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                    "BuiltIn": false
                  }
                },
                "BeforeDescriptionComment": null,
                "AfterDescriptionComment": null
              }
            ],
            "DefaultValue": null,
            "Type": {
              "NamedType": "",
              "Elem": {
                "NamedType": "Cart",
                "Elem": null,
                "NonNull": false,
                "Position": {
                  "Start": 501,
                  "End": 505,
                  "Line": 33,
                  "Column": 29,
                  "Src": {
                    "Name": "schema/cart.graphqls",
                    "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                    "BuiltIn": false
                  }
                }
              },
              "NonNull": false,
              "Position": {
                "Start": 501,
                "End": 505,
                "Line": 33,
                "Column": 29,
                "Src": {
                  "Name": "schema/cart.graphqls",
                  "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 476,
              "End": 485,
              "Line": 33,
              "Column": 4,
              "Src": {
                "Name": "schema/cart.graphqls",
                "Input": "type Cart {\r\n  id: ID!\r\n  isActive: Boolean!\r\n  value: Float!\r\n  user: User!\r\n  userId: ID\r\n  order: Order\r\n  products: [CartProduct!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ntype CartProduct {\r\n  id: ID!\r\n  quantity: Int!\r\n  product: Product!\r\n}\r\n\r\ninput CreateCartInput {\r\n  isActive: Boolean!\r\n  value: Float!\r\n  userId: ID!\r\n}\r\n\r\ninput AddProductToCartInput {\r\n  cartId: ID!\r\n  productId: ID!\r\n  quantity: Int!\r\n}\r\n\r\nextend type Query {\r\n  getCart(id: ID!): Cart\r\n  listCarts(userID: ID!): [Cart]\r\n}\r\n\r\nextend type Mutation {\r\n  createCart(input: CreateCartInput!): Cart\r\n  addProductToCart(input: AddProductToCartInput!): CartProduct\r\n  removeProductFromCart(cartProductID: ID!): Cart\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "getCategory",
            "Arguments": [
              {
                "Description": "",
                "Name": "id",
                "DefaultValue": null,
                "Type": {
                  "NamedType": "ID",
                  "Elem": null,
                  "NonNull": true,
                  "Position": {
                    "Start": 257,
                    "End": 259,
                    "Line": 19,
                    "Column": 20,
                    "Src": {
                      "Name": "schema/category.graphqls",
                      "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Directives": null,
                "Position": {
                  "Start": 253,
                  "End": 255,
                  "Line": 19,
                  "Column": 16,
                  "Src": {
                    "Name": "schema/category.graphqls",
                    "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                    "BuiltIn": false
                  }
                },
                "BeforeDescriptionComment": null,
                "AfterDescriptionComment": null
              }
            ],
            "DefaultValue": null,
            "Type": {
              "NamedType": "Category",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 263,
                "End": 271,
                "Line": 19,
                "Column": 26,
                "Src": {
                  "Name": "schema/category.graphqls",
                  "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 241,
              "End": 252,
              "Line": 19,
              "Column": 4,
              "Src": {
                "Name": "schema/category.graphqls",
                "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "listCategories",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "",
              "Elem": {
                "NamedType": "Category",
                "Elem": null,
                "NonNull": true,
                "Position": {
                  "Start": 292,
                  "End": 300,
                  "Line": 20,
                  "Column": 21,
                  "Src": {
                    "Name": "schema/category.graphqls",
                    "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                    "BuiltIn": false
                  }
                }
              },
              "NonNull": false,
              "Position": {
                "Start": 292,
                "End": 300,
                "Line": 20,
                "Column": 21,
                "Src": {
                  "Name": "schema/category.graphqls",
                  "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 275,
              "End": 289,
              "Line": 20,
              "Column": 4,
              "Src": {
                "Name": "schema/category.graphqls",
                "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "getOrder",
            "Arguments": [
              {
                "Description": "",
                "Name": "id",
                "DefaultValue": null,
                "Type": {
                  "NamedType": "ID",
                  "Elem": null,
                  "NonNull": true,
                  "Position": {
                    "Start": 465,
                    "End": 467,
                    "Line": 34,
                    "Column": 17,
                    "Src": {
                      "Name": "schema/order.graphqls",
                      "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Directives": null,
                "Position": {
                  "Start": 461,
                  "End": 463,
                  "Line": 34,
                  "Column": 13,
                  "Src": {
                    "Name": "schema/order.graphqls",
                    "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                    "BuiltIn": false
                  }
                },
                "BeforeDescriptionComment": null,
                "AfterDescriptionComment": null
              }
            ],
            "DefaultValue": null,
            "Type": {
              "NamedType": "Order",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 471,
                "End": 476,
                "Line": 34,
                "Column": 23,
                "Src": {
                  "Name": "schema/order.graphqls",
                  "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 452,
              "End": 460,
              "Line": 34,
              "Column": 4,
              "Src": {
                "Name": "schema/order.graphqls",
                "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "listOrders",
            "Arguments": [
              {
                "Description": "",
                "Name": "userID",
                "DefaultValue": null,
                "Type": {
                  "NamedType": "ID",
                  "Elem": null,
                  "NonNull": true,
                  "Position": {
                    "Start": 499,
                    "End": 501,
                    "Line": 35,
                    "Column": 23,
                    "Src": {
                      "Name": "schema/order.graphqls",
                      "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Directives": null,
                "Position": {
                  "Start": 491,
                  "End": 497,
                  "Line": 35,
                  "Column": 15,
                  "Src": {
                    "Name": "schema/order.graphqls",
                    "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                    "BuiltIn": false
                  }
                },
                "BeforeDescriptionComment": null,
                "AfterDescriptionComment": null
              }
            ],
            "DefaultValue": null,
            "Type": {
              "NamedType": "",
              "Elem": {
                "NamedType": "Order",
                "Elem": null,
                "NonNull": true,
                "Position": {
                  "Start": 506,
                  "End": 511,
                  "Line": 35,
                  "Column": 30,
                  "Src": {
                    "Name": "schema/order.graphqls",
                    "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                    "BuiltIn": false
                  }
                }
              },
              "NonNull": false,
              "Position": {
                "Start": 506,
                "End": 511,
                "Line": 35,
                "Column": 30,
                "Src": {
                  "Name": "schema/order.graphqls",
                  "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 480,
              "End": 490,
              "Line": 35,
              "Column": 4,
              "Src": {
                "Name": "schema/order.graphqls",
                "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "getProduct",
            "Arguments": [
              {
                "Description": "",
                "Name": "id",
                "DefaultValue": null,
                "Type": {
                  "NamedType": "ID",
                  "Elem": null,
                  "NonNull": true,
                  "Position": {
                    "Start": 593,
                    "End": 595,
                    "Line": 41,
                    "Column": 19,
                    "Src": {
                      "Name": "schema/product.graphqls",
                      "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Directives": null,
                "Position": {
                  "Start": 589,
                  "End": 591,
                  "Line": 41,
                  "Column": 15,
                  "Src": {
                    "Name": "schema/product.graphqls",
                    "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                    "BuiltIn": false
                  }
                },
                "BeforeDescriptionComment": null,
                "AfterDescriptionComment": null
              }
            ],
            "DefaultValue": null,
            "Type": {
              "NamedType": "Product",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 599,
                "End": 606,
                "Line": 41,
                "Column": 25,
                "Src": {
                  "Name": "schema/product.graphqls",
                  "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 578,
              "End": 588,
              "Line": 41,
              "Column": 4,
              "Src": {
                "Name": "schema/product.graphqls",
                "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "listProducts",
            "Arguments": [
              {
                "Description": "",
                "Name": "input",
                "DefaultValue": null,
                "Type": {
                  "NamedType": "ListProductsInput",
                  "Elem": null,
                  "NonNull": false,
                  "Position": {
                    "Start": 630,
                    "End": 647,
                    "Line": 42,
                    "Column": 24,
                    "Src": {
                      "Name": "schema/product.graphqls",
                      "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Directives": null,
                "Position": {
                  "Start": 623,
                  "End": 628,
                  "Line": 42,
                  "Column": 17,
                  "Src": {
                    "Name": "schema/product.graphqls",
                    "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                    "BuiltIn": false
                  }
                },
                "BeforeDescriptionComment": null,
                "AfterDescriptionComment": null
              }
            ],
            "DefaultValue": null,
            "Type": {
              "NamedType": "",
              "Elem": {
                "NamedType": "Product",
                "Elem": null,
                "NonNull": true,
                "Position": {
                  "Start": 651,
                  "End": 658,
                  "Line": 42,
                  "Column": 45,
                  "Src": {
                    "Name": "schema/product.graphqls",
                    "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                    "BuiltIn": false
                  }
                }
              },
              "NonNull": false,
              "Position": {
                "Start": 651,
                "End": 658,
                "Line": 42,
                "Column": 45,
                "Src": {
                  "Name": "schema/product.graphqls",
                  "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 610,
              "End": 622,
              "Line": 42,
              "Column": 4,
              "Src": {
                "Name": "schema/product.graphqls",
                "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "getUser",
            "Arguments": [
              {
                "Description": "",
                "Name": "id",
                "DefaultValue": null,
                "Type": {
                  "NamedType": "ID",
                  "Elem": null,
                  "NonNull": true,
                  "Position": {
                    "Start": 483,
                    "End": 485,
                    "Line": 31,
                    "Column": 16,
                    "Src": {
                      "Name": "schema/user.graphqls",
                      "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Directives": null,
                "Position": {
                  "Start": 479,
                  "End": 481,
                  "Line": 31,
                  "Column": 12,
                  "Src": {
                    "Name": "schema/user.graphqls",
                    "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                    "BuiltIn": false
                  }
                },
                "BeforeDescriptionComment": null,
                "AfterDescriptionComment": null
              }
            ],
            "DefaultValue": null,
            "Type": {
              "NamedType": "User",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 489,
                "End": 493,
                "Line": 31,
                "Column": 22,
                "Src": {
                  "Name": "schema/user.graphqls",
                  "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 471,
              "End": 478,
              "Line": 31,
              "Column": 4,
              "Src": {
                "Name": "schema/user.graphqls",
                "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "listUsers",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "",
              "Elem": {
                "NamedType": "User",
                "Elem": null,
                "NonNull": true,
                "Position": {
                  "Start": 509,
                  "End": 513,
                  "Line": 32,
                  "Column": 16,
                  "Src": {
                    "Name": "schema/user.graphqls",
                    "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                    "BuiltIn": false
                  }
                }
              },
              "NonNull": false,
              "Position": {
                "Start": 509,
                "End": 513,
                "Line": 32,
                "Column": 16,
                "Src": {
                  "Name": "schema/user.graphqls",
                  "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 497,
              "End": 506,
              "Line": 32,
              "Column": 4,
              "Src": {
                "Name": "schema/user.graphqls",
                "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "__schema",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "__Schema",
              "Elem": null,
              "NonNull": true,
              "Position": null
            },
            "Directives": null,
            "Position": null,
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "__type",
            "Arguments": [
              {
                "Description": "",
                "Name": "name",
                "DefaultValue": null,
                "Type": {
                  "NamedType": "String",
                  "Elem": null,
                  "NonNull": true,
                  "Position": null
                },
                "Directives": null,
                "Position": null,
                "BeforeDescriptionComment": null,
                "AfterDescriptionComment": null
              }
            ],
            "DefaultValue": null,
            "Type": {
              "NamedType": "__Type",
              "Elem": null,
              "NonNull": false,
              "Position": null
            },
            "Directives": null,
            "Position": null,
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          }
        ],
        "Types": null,
        "EnumValues": null,
        "Position": {
          "Start": 5,
          "End": 10,
          "Line": 1,
          "Column": 6,
          "Src": {
            "Name": "schema/schema.graphqls",
            "Input": "type Query\n\ntype Mutation\n\ntype Subscription\n\nschema {\n  query: Query\n  mutation: Mutation\n  subscription: Subscription\n}\n\nscalar Time\n\ndirective @length(min: Int, max: Int) on FIELD_DEFINITION\ndirective @email on FIELD_DEFINITION\n",
            "BuiltIn": false
          }
        },
        "BuiltIn": false,
        "BeforeDescriptionComment": null,
        "AfterDescriptionComment": null,
        "EndOfDefinitionComment": null
      }
    ],
    "Subscription": [
      {
        "Kind": "OBJECT",
        "Description": "",
        "Name": "Subscription",
        "Directives": null,
        "Interfaces": null,
        "Fields": [
          {
            "Description": "",
            "Name": "orderPaymentUpdate",
            "Arguments": [
              {
                "Description": "",
                "Name": "orderId",
                "DefaultValue": null,
                "Type": {
                  "NamedType": "ID",
                  "Elem": null,
                  "NonNull": true,
                  "Position": {
                    "Start": 688,
                    "End": 690,
                    "Line": 44,
                    "Column": 32,
                    "Src": {
                      "Name": "schema/order.graphqls",
                      "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                      "BuiltIn": false
                    }
                  }
                },
                "Directives": null,
                "Position": {
                  "Start": 679,
                  "End": 686,
                  "Line": 44,
                  "Column": 23,
                  "Src": {
                    "Name": "schema/order.graphqls",
                    "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                    "BuiltIn": false
                  }
                },
                "BeforeDescriptionComment": null,
                "AfterDescriptionComment": null
              }
            ],
            "DefaultValue": null,
            "Type": {
              "NamedType": "Order",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 694,
                "End": 699,
                "Line": 44,
                "Column": 38,
                "Src": {
                  "Name": "schema/order.graphqls",
                  "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 660,
              "End": 678,
              "Line": 44,
              "Column": 4,
              "Src": {
                "Name": "schema/order.graphqls",
                "Input": "#import \"./cart.graphqls\"\r\n#import \"./user.graphqls\"\r\n\r\ntype Order {\r\n  id: ID!\r\n  value: Float!\r\n  paymentStatus: PaymentStatus\r\n  billingType: BillingType\r\n  cart: Cart!\r\n  user: User!\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateOrderInput {\r\n  value: Float!\r\n  cartId: ID!\r\n}\r\n\r\nenum PaymentStatus {\r\n  PENDING\r\n  CONFIRMED\r\n  OVERDUE\r\n}\r\n\r\nenum BillingType {\r\n  BOLETO\r\n  PIX\r\n  CREDIT_CARD\r\n  DEBIT_CARD\r\n}\r\n\r\nextend type Query {\r\n  getOrder(id: ID!): Order\r\n  listOrders(userID: ID!): [Order!]\r\n}\r\n\r\nextend type Mutation {\r\n  createOrder(input: CreateOrderInput!): Order!\r\n  deleteOrder(id: ID!): Order!\r\n}\r\n\r\nextend type Subscription {\r\n  orderPaymentUpdate(orderId: ID!): Order\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          }
        ],
        "Types": null,
        "EnumValues": null,
        "Position": {
          "Start": 32,
          "End": 44,
          "Line": 5,
          "Column": 6,
          "Src": {
            "Name": "schema/schema.graphqls",
            "Input": "type Query\n\ntype Mutation\n\ntype Subscription\n\nschema {\n  query: Query\n  mutation: Mutation\n  subscription: Subscription\n}\n\nscalar Time\n\ndirective @length(min: Int, max: Int) on FIELD_DEFINITION\ndirective @email on FIELD_DEFINITION\n",
            "BuiltIn": false
          }
        },
        "BuiltIn": false,
        "BeforeDescriptionComment": null,
        "AfterDescriptionComment": null,
        "EndOfDefinitionComment": null
      }
    ],
    "UpdateCategoryInput": [
      {
        "Kind": "INPUT_OBJECT",
        "Description": "",
        "Name": "UpdateCategoryInput",
        "Directives": null,
        "Interfaces": null,
        "Fields": [
          {
            "Description": "",
            "Name": "id",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "ID",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 192,
                "End": 194,
                "Line": 14,
                "Column": 8,
                "Src": {
                  "Name": "schema/category.graphqls",
                  "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 188,
              "End": 190,
              "Line": 14,
              "Column": 4,
              "Src": {
                "Name": "schema/category.graphqls",
                "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "name",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "String",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 205,
                "End": 211,
                "Line": 15,
                "Column": 10,
                "Src": {
                  "Name": "schema/category.graphqls",
                  "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 199,
              "End": 203,
              "Line": 15,
              "Column": 4,
              "Src": {
                "Name": "schema/category.graphqls",
                "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          }
        ],
        "Types": null,
        "EnumValues": null,
        "Position": {
          "Start": 163,
          "End": 182,
          "Line": 13,
          "Column": 8,
          "Src": {
            "Name": "schema/category.graphqls",
            "Input": "#import \"./product.graphqls\"\r\n\r\ntype Category {\r\n  id: ID!\r\n  name: String!\r\n  products: [Product!]\r\n}\r\n\r\ninput CreateCategoryInput {\r\n  name: String!\r\n}\r\n\r\ninput UpdateCategoryInput {\r\n  id: ID!\r\n  name: String\r\n}\r\n\r\nextend type Query {\r\n  getCategory(id: ID!): Category\r\n  listCategories: [Category!]\r\n}\r\n\r\nextend type Mutation {\r\n  createCategory(input: CreateCategoryInput!): Category\r\n  updateCategory(input: UpdateCategoryInput!): Category\r\n  deleteCategory(id: ID!): Boolean!\r\n}\r\n",
            "BuiltIn": false
          }
        },
        "BuiltIn": false,
        "BeforeDescriptionComment": null,
        "AfterDescriptionComment": null,
        "EndOfDefinitionComment": null
      }
    ],
    "UpdateProductInput": [
      {
        "Kind": "INPUT_OBJECT",
        "Description": "",
        "Name": "UpdateProductInput",
        "Directives": null,
        "Interfaces": null,
        "Fields": [
          {
            "Description": "",
            "Name": "id",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "ID",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 344,
                "End": 346,
                "Line": 22,
                "Column": 8,
                "Src": {
                  "Name": "schema/product.graphqls",
                  "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 340,
              "End": 342,
              "Line": 22,
              "Column": 4,
              "Src": {
                "Name": "schema/product.graphqls",
                "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "name",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "String",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 357,
                "End": 363,
                "Line": 23,
                "Column": 10,
                "Src": {
                  "Name": "schema/product.graphqls",
                  "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 351,
              "End": 355,
              "Line": 23,
              "Column": 4,
              "Src": {
                "Name": "schema/product.graphqls",
                "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "price",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "Float",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 374,
                "End": 379,
                "Line": 24,
                "Column": 11,
                "Src": {
                  "Name": "schema/product.graphqls",
                  "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 367,
              "End": 372,
              "Line": 24,
              "Column": 4,
              "Src": {
                "Name": "schema/product.graphqls",
                "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "description",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "String",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 396,
                "End": 402,
                "Line": 25,
                "Column": 17,
                "Src": {
                  "Name": "schema/product.graphqls",
                  "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 383,
              "End": 394,
              "Line": 25,
              "Column": 4,
              "Src": {
                "Name": "schema/product.graphqls",
                "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          }
        ],
        "Types": null,
        "EnumValues": null,
        "Position": {
          "Start": 316,
          "End": 334,
          "Line": 21,
          "Column": 8,
          "Src": {
            "Name": "schema/product.graphqls",
            "Input": "#import \"./category.graphqls\"\r\n\r\ntype Product {\r\n  id: ID!\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n  categoryID: ID\r\n  category: Category\r\n  carts: [Cart!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateProductInput {\r\n  name: String!\r\n  price: Float!\r\n  description: String\r\n}\r\n\r\ninput UpdateProductInput {\r\n  id: ID!\r\n  name: String\r\n  price: Float\r\n  description: String\r\n}\r\n\r\ninput ListProductsInput {\r\n  name: String\r\n  price: Float\r\n  order: String\r\n  sort: SortDirection\r\n}\r\n\r\nenum SortDirection {\r\n  ASC\r\n  DESC\r\n}\r\n\r\nextend type Query {\r\n  getProduct(id: ID!): Product\r\n  listProducts(input: ListProductsInput): [Product!]\r\n}\r\n\r\nextend type Mutation {\r\n  createProduct(input: CreateProductInput!): Product\r\n  updateProduct(input: UpdateProductInput!): Product\r\n  deleteProduct(id: ID!): Boolean!\r\n}\r\n",
            "BuiltIn": false
          }
        },
        "BuiltIn": false,
        "BeforeDescriptionComment": null,
        "AfterDescriptionComment": null,
        "EndOfDefinitionComment": null
      }
    ],
    "UpdateUserInput": [
      {
        "Kind": "INPUT_OBJECT",
        "Description": "",
        "Name": "UpdateUserInput",
        "Directives": null,
        "Interfaces": null,
        "Fields": [
          {
            "Description": "",
            "Name": "id",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "ID",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 290,
                "End": 292,
                "Line": 18,
                "Column": 8,
                "Src": {
                  "Name": "schema/user.graphqls",
                  "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 286,
              "End": 288,
              "Line": 18,
              "Column": 4,
              "Src": {
                "Name": "schema/user.graphqls",
                "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "name",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "String",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 303,
                "End": 309,
                "Line": 19,
                "Column": 10,
                "Src": {
                  "Name": "schema/user.graphqls",
                  "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 297,
              "End": 301,
              "Line": 19,
              "Column": 4,
              "Src": {
                "Name": "schema/user.graphqls",
                "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "email",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "String",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 320,
                "End": 326,
                "Line": 20,
                "Column": 11,
                "Src": {
                  "Name": "schema/user.graphqls",
                  "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 313,
              "End": 318,
              "Line": 20,
              "Column": 4,
              "Src": {
                "Name": "schema/user.graphqls",
                "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "newPassword",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "String",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 343,
                "End": 349,
                "Line": 21,
                "Column": 17,
                "Src": {
                  "Name": "schema/user.graphqls",
                  "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 330,
              "End": 341,
              "Line": 21,
              "Column": 4,
              "Src": {
                "Name": "schema/user.graphqls",
                "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "confirmPassword",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "String",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 370,
                "End": 376,
                "Line": 22,
                "Column": 21,
                "Src": {
                  "Name": "schema/user.graphqls",
                  "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 353,
              "End": 368,
              "Line": 22,
              "Column": 4,
              "Src": {
                "Name": "schema/user.graphqls",
                "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          }
        ],
        "Types": null,
        "EnumValues": null,
        "Position": {
          "Start": 265,
          "End": 280,
          "Line": 17,
          "Column": 8,
          "Src": {
            "Name": "schema/user.graphqls",
            "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
            "BuiltIn": false
          }
        },
        "BuiltIn": false,
        "BeforeDescriptionComment": null,
        "AfterDescriptionComment": null,
        "EndOfDefinitionComment": null
      }
    ],
    "User": [
      {
        "Kind": "OBJECT",
        "Description": "",
        "Name": "User",
        "Directives": null,
        "Interfaces": null,
        "Fields": [
          {
            "Description": "",
            "Name": "id",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "ID",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 19,
                "End": 21,
                "Line": 2,
                "Column": 8,
                "Src": {
                  "Name": "schema/user.graphqls",
                  "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 15,
              "End": 17,
              "Line": 2,
              "Column": 4,
              "Src": {
                "Name": "schema/user.graphqls",
                "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "name",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "String",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 32,
                "End": 38,
                "Line": 3,
                "Column": 10,
                "Src": {
                  "Name": "schema/user.graphqls",
                  "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": [
              {
                "Name": "length",
                "Arguments": [
                  {
                    "Name": "min",
                    "Value": {
                      "Raw": "6",
                      "Children": null,
                      "Kind": 1,
                      "Position": {
                        "Start": 53,
                        "End": 54,
                        "Line": 3,
                        "Column": 31,
                        "Src": {
                          "Name": "schema/user.graphqls",
                          "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                          "BuiltIn": false
                        }
                      },
                      "Comment": null,
                      "Definition": null,
                      "VariableDefinition": null,
                      "ExpectedType": null
                    },
                    "Position": {
                      "Start": 48,
                      "End": 51,
                      "Line": 3,
                      "Column": 26,
                      "Src": {
                        "Name": "schema/user.graphqls",
                        "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                        "BuiltIn": false
                      }
                    },
                    "Comment": null
                  },
                  {
                    "Name": "max",
                    "Value": {
                      "Raw": "32",
                      "Children": null,
                      "Kind": 1,
                      "Position": {
                        "Start": 61,
                        "End": 63,
                        "Line": 3,
                        "Column": 39,
                        "Src": {
                          "Name": "schema/user.graphqls",
                          "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                          "BuiltIn": false
                        }
                      },
                      "Comment": null,
                      "Definition": null,
                      "VariableDefinition": null,
                      "ExpectedType": null
                    },
                    "Position": {
                      "Start": 56,
                      "End": 59,
                      "Line": 3,
                      "Column": 34,
                      "Src": {
                        "Name": "schema/user.graphqls",
                        "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                        "BuiltIn": false
                      }
                    },
                    "Comment": null
                  }
                ],
                "Position": {
                  "Start": 41,
                  "End": 47,
                  "Line": 3,
                  "Column": 19,
                  "Src": {
                    "Name": "schema/user.graphqls",
                    "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                    "BuiltIn": false
                  }
                },
                "ParentDefinition": null,
                "Definition": {
                  "Description": "",
                  "Name": "length",
                  "Arguments": [
                    {
                      "Description": "",
                      "Name": "min",
                      "DefaultValue": null,
                      "Type": {
                        "NamedType": "Int",
                        "Elem": null,
                        "NonNull": false,
                        "Position": {
                          "Start": 159,
                          "End": 162,
                          "Line": 15,
                          "Column": 24,
                          "Src": {
                            "Name": "schema/schema.graphqls",
                            "Input": "type Query\n\ntype Mutation\n\ntype Subscription\n\nschema {\n  query: Query\n  mutation: Mutation\n  subscription: Subscription\n}\n\nscalar Time\n\ndirective @length(min: Int, max: Int) on FIELD_DEFINITION\ndirective @email on FIELD_DEFINITION\n",
                            "BuiltIn": false
                          }
                        }
                      },
                      "Directives": null,
                      "Position": {
                        "Start": 154,
                        "End": 157,
                        "Line": 15,
                        "Column": 19,
                        "Src": {
                          "Name": "schema/schema.graphqls",
                          "Input": "type Query\n\ntype Mutation\n\ntype Subscription\n\nschema {\n  query: Query\n  mutation: Mutation\n  subscription: Subscription\n}\n\nscalar Time\n\ndirective @length(min: Int, max: Int) on FIELD_DEFINITION\ndirective @email on FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      },
                      "BeforeDescriptionComment": null,
                      "AfterDescriptionComment": null
                    },
                    {
                      "Description": "",
                      "Name": "max",
                      "DefaultValue": null,
                      "Type": {
                        "NamedType": "Int",
                        "Elem": null,
                        "NonNull": false,
                        "Position": {
                          "Start": 169,
                          "End": 172,
                          "Line": 15,
                          "Column": 34,
                          "Src": {
                            "Name": "schema/schema.graphqls",
                            "Input": "type Query\n\ntype Mutation\n\ntype Subscription\n\nschema {\n  query: Query\n  mutation: Mutation\n  subscription: Subscription\n}\n\nscalar Time\n\ndirective @length(min: Int, max: Int) on FIELD_DEFINITION\ndirective @email on FIELD_DEFINITION\n",
                            "BuiltIn": false
                          }
                        }
                      },
                      "Directives": null,
                      "Position": {
                        "Start": 164,
                        "End": 167,
                        "Line": 15,
                        "Column": 29,
                        "Src": {
                          "Name": "schema/schema.graphqls",
                          "Input": "type Query\n\ntype Mutation\n\ntype Subscription\n\nschema {\n  query: Query\n  mutation: Mutation\n  subscription: Subscription\n}\n\nscalar Time\n\ndirective @length(min: Int, max: Int) on FIELD_DEFINITION\ndirective @email on FIELD_DEFINITION\n",
                          "BuiltIn": false
                        }
                      },
                      "BeforeDescriptionComment": null,
                      "AfterDescriptionComment": null
                    }
                  ],
                  "Locations": [
                    "FIELD_DEFINITION"
                  ],
                  "IsRepeatable": false,
                  "Position": {
                    "Start": 147,
                    "End": 153,
                    "Line": 15,
                    "Column": 12,
                    "Src": {
                      "Name": "schema/schema.graphqls",
                      "Input": "type Query\n\ntype Mutation\n\ntype Subscription\n\nschema {\n  query: Query\n  mutation: Mutation\n  subscription: Subscription\n}\n\nscalar Time\n\ndirective @length(min: Int, max: Int) on FIELD_DEFINITION\ndirective @email on FIELD_DEFINITION\n",
                      "BuiltIn": false
                    }
                  },
                  "BeforeDescriptionComment": null,
                  "AfterDescriptionComment": null
                },
                "Location": ""
              }
            ],
            "Position": {
              "Start": 26,
              "End": 30,
              "Line": 3,
              "Column": 4,
              "Src": {
                "Name": "schema/user.graphqls",
                "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "email",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "String",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 75,
                "End": 81,
                "Line": 4,
                "Column": 11,
                "Src": {
                  "Name": "schema/user.graphqls",
                  "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": [
              {
                "Name": "email",
                "Arguments": null,
                "Position": {
                  "Start": 84,
                  "End": 89,
                  "Line": 4,
                  "Column": 20,
                  "Src": {
                    "Name": "schema/user.graphqls",
                    "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                    "BuiltIn": false
                  }
                },
                "ParentDefinition": null,
                "Definition": {
                  "Description": "",
                  "Name": "email",
                  "Arguments": null,
                  "Locations": [
                    "FIELD_DEFINITION"
                  ],
                  "IsRepeatable": false,
                  "Position": {
                    "Start": 205,
                    "End": 210,
                    "Line": 16,
                    "Column": 12,
                    "Src": {
                      "Name": "schema/schema.graphqls",
                      "Input": "type Query\n\ntype Mutation\n\ntype Subscription\n\nschema {\n  query: Query\n  mutation: Mutation\n  subscription: Subscription\n}\n\nscalar Time\n\ndirective @length(min: Int, max: Int) on FIELD_DEFINITION\ndirective @email on FIELD_DEFINITION\n",
                      "BuiltIn": false
                    }
                  },
                  "BeforeDescriptionComment": null,
                  "AfterDescriptionComment": null
                },
                "Location": ""
              }
            ],
            "Position": {
              "Start": 68,
              "End": 73,
              "Line": 4,
              "Column": 4,
              "Src": {
                "Name": "schema/user.graphqls",
                "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "cart",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "",
              "Elem": {
                "NamedType": "Cart",
                "Elem": null,
                "NonNull": true,
                "Position": {
                  "Start": 100,
                  "End": 104,
                  "Line": 5,
                  "Column": 11,
                  "Src": {
                    "Name": "schema/user.graphqls",
                    "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                    "BuiltIn": false
                  }
                }
              },
              "NonNull": false,
              "Position": {
                "Start": 100,
                "End": 104,
                "Line": 5,
                "Column": 11,
                "Src": {
                  "Name": "schema/user.graphqls",
                  "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 93,
              "End": 97,
              "Line": 5,
              "Column": 4,
              "Src": {
                "Name": "schema/user.graphqls",
                "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "orders",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "",
              "Elem": {
                "NamedType": "Order",
                "Elem": null,
                "NonNull": true,
                "Position": {
                  "Start": 119,
                  "End": 124,
                  "Line": 6,
                  "Column": 13,
                  "Src": {
                    "Name": "schema/user.graphqls",
                    "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                    "BuiltIn": false
                  }
                }
              },
              "NonNull": false,
              "Position": {
                "Start": 119,
                "End": 124,
                "Line": 6,
                "Column": 13,
                "Src": {
                  "Name": "schema/user.graphqls",
                  "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 110,
              "End": 116,
              "Line": 6,
              "Column": 4,
              "Src": {
                "Name": "schema/user.graphqls",
                "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "createdAt",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "Time",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 141,
                "End": 145,
                "Line": 7,
                "Column": 15,
                "Src": {
                  "Name": "schema/user.graphqls",
                  "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 130,
              "End": 139,
              "Line": 7,
              "Column": 4,
              "Src": {
                "Name": "schema/user.graphqls",
                "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "updatedAt",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "Time",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 161,
                "End": 165,
                "Line": 8,
                "Column": 15,
                "Src": {
                  "Name": "schema/user.graphqls",
                  "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                  "BuiltIn": false
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 150,
              "End": 159,
              "Line": 8,
              "Column": 4,
              "Src": {
                "Name": "schema/user.graphqls",
                "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
                "BuiltIn": false
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          }
        ],
        "Types": null,
        "EnumValues": null,
        "Position": {
          "Start": 5,
          "End": 9,
          "Line": 1,
          "Column": 6,
          "Src": {
            "Name": "schema/user.graphqls",
            "Input": "type User {\r\n  id: ID!\r\n  name: String! @length(min: 6, max: 32)\r\n  email: String! @email\r\n  cart: [Cart!]\r\n  orders: [Order!]\r\n  createdAt: Time!\r\n  updatedAt: Time!\r\n}\r\n\r\ninput CreateUserInput {\r\n  name: String!\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\ninput UpdateUserInput {\r\n  id: ID!\r\n  name: String\r\n  email: String\r\n  newPassword: String\r\n  confirmPassword: String!\r\n}\r\n\r\ninput LoginInput {\r\n  email: String!\r\n  password: String!\r\n}\r\n\r\nextend type Query {\r\n  getUser(id: ID!): User\r\n  listUsers: [User!]\r\n}\r\n\r\nextend type Mutation {\r\n  login(LoginInput: LoginInput!): User\r\n  registerUser(input: CreateUserInput!): User\r\n  updateUser(input: UpdateUserInput!): User\r\n  deleteUser(id: ID!): Boolean!\r\n}\r\n",
            "BuiltIn": false
          }
        },
        "BuiltIn": false,
        "BeforeDescriptionComment": null,
        "AfterDescriptionComment": null,
        "EndOfDefinitionComment": null
      }
    ],
    "__Directive": [
      {
        "Kind": "OBJECT",
        "Description": "",
        "Name": "__Directive",
        "Directives": null,
        "Interfaces": null,
        "Fields": [
          {
            "Description": "",
            "Name": "name",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "String",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 4155,
                "End": 4161,
                "Line": 97,
                "Column": 9,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 4149,
              "End": 4153,
              "Line": 97,
              "Column": 3,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "description",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "String",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 4178,
                "End": 4184,
                "Line": 98,
                "Column": 16,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 4165,
              "End": 4176,
              "Line": 98,
              "Column": 3,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "locations",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "",
              "Elem": {
                "NamedType": "__DirectiveLocation",
                "Elem": null,
                "NonNull": true,
                "Position": {
                  "Start": 4199,
                  "End": 4218,
                  "Line": 99,
                  "Column": 15,
                  "Src": {
                    "Name": "prelude.graphql",
                    "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                    "BuiltIn": true
                  }
                }
              },
              "NonNull": true,
              "Position": {
                "Start": 4199,
                "End": 4218,
                "Line": 99,
                "Column": 15,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 4187,
              "End": 4196,
              "Line": 99,
              "Column": 3,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "args",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "",
              "Elem": {
                "NamedType": "__InputValue",
                "Elem": null,
                "NonNull": true,
                "Position": {
                  "Start": 4231,
                  "End": 4243,
                  "Line": 100,
                  "Column": 10,
                  "Src": {
                    "Name": "prelude.graphql",
                    "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                    "BuiltIn": true
                  }
                }
              },
              "NonNull": true,
              "Position": {
                "Start": 4231,
                "End": 4243,
                "Line": 100,
                "Column": 10,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 4224,
              "End": 4228,
              "Line": 100,
              "Column": 3,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "isRepeatable",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "Boolean",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 4263,
                "End": 4270,
                "Line": 101,
                "Column": 17,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 4249,
              "End": 4261,
              "Line": 101,
              "Column": 3,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          }
        ],
        "Types": null,
        "EnumValues": null,
        "Position": {
          "Start": 4133,
          "End": 4144,
          "Line": 96,
          "Column": 6,
          "Src": {
            "Name": "prelude.graphql",
            "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
            "BuiltIn": true
          }
        },
        "BuiltIn": true,
        "BeforeDescriptionComment": null,
        "AfterDescriptionComment": null,
        "EndOfDefinitionComment": null
      }
    ],
    "__EnumValue": [
      {
        "Kind": "OBJECT",
        "Description": "",
        "Name": "__EnumValue",
        "Directives": null,
        "Interfaces": null,
        "Fields": [
          {
            "Description": "",
            "Name": "name",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "String",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 3943,
                "End": 3949,
                "Line": 79,
                "Column": 9,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 3937,
              "End": 3941,
              "Line": 79,
              "Column": 3,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "description",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "String",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 3966,
                "End": 3972,
                "Line": 80,
                "Column": 16,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 3953,
              "End": 3964,
              "Line": 80,
              "Column": 3,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "isDeprecated",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "Boolean",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 3989,
                "End": 3996,
                "Line": 81,
                "Column": 17,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 3975,
              "End": 3987,
              "Line": 81,
              "Column": 3,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "deprecationReason",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "String",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 4019,
                "End": 4025,
                "Line": 82,
                "Column": 22,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 4000,
              "End": 4017,
              "Line": 82,
              "Column": 3,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          }
        ],
        "Types": null,
        "EnumValues": null,
        "Position": {
          "Start": 3921,
          "End": 3932,
          "Line": 78,
          "Column": 6,
          "Src": {
            "Name": "prelude.graphql",
            "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
            "BuiltIn": true
          }
        },
        "BuiltIn": true,
        "BeforeDescriptionComment": null,
        "AfterDescriptionComment": null,
        "EndOfDefinitionComment": null
      }
    ],
    "__Field": [
      {
        "Kind": "OBJECT",
        "Description": "",
        "Name": "__Field",
        "Directives": null,
        "Interfaces": null,
        "Fields": [
          {
            "Description": "",
            "Name": "name",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "String",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 3689,
                "End": 3695,
                "Line": 63,
                "Column": 9,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 3683,
              "End": 3687,
              "Line": 63,
              "Column": 3,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "description",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "String",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 3712,
                "End": 3718,
                "Line": 64,
                "Column": 16,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 3699,
              "End": 3710,
              "Line": 64,
              "Column": 3,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "args",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "",
              "Elem": {
                "NamedType": "__InputValue",
                "Elem": null,
                "NonNull": true,
                "Position": {
                  "Start": 3728,
                  "End": 3740,
                  "Line": 65,
                  "Column": 10,
                  "Src": {
                    "Name": "prelude.graphql",
                    "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                    "BuiltIn": true
                  }
                }
              },
              "NonNull": true,
              "Position": {
                "Start": 3728,
                "End": 3740,
                "Line": 65,
                "Column": 10,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 3721,
              "End": 3725,
              "Line": 65,
              "Column": 3,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "type",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "__Type",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 3752,
                "End": 3758,
                "Line": 66,
                "Column": 9,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 3746,
              "End": 3750,
              "Line": 66,
              "Column": 3,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "isDeprecated",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "Boolean",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 3776,
                "End": 3783,
                "Line": 67,
                "Column": 17,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 3762,
              "End": 3774,
              "Line": 67,
              "Column": 3,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "deprecationReason",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "String",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 3806,
                "End": 3812,
                "Line": 68,
                "Column": 22,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 3787,
              "End": 3804,
              "Line": 68,
              "Column": 3,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          }
        ],
        "Types": null,
        "EnumValues": null,
        "Position": {
          "Start": 3671,
          "End": 3678,
          "Line": 62,
          "Column": 6,
          "Src": {
            "Name": "prelude.graphql",
            "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
            "BuiltIn": true
          }
        },
        "BuiltIn": true,
        "BeforeDescriptionComment": null,
        "AfterDescriptionComment": null,
        "EndOfDefinitionComment": null
      }
    ],
    "__InputValue": [
      {
        "Kind": "OBJECT",
        "Description": "",
        "Name": "__InputValue",
        "Directives": null,
        "Interfaces": null,
        "Fields": [
          {
            "Description": "",
            "Name": "name",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "String",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 3844,
                "End": 3850,
                "Line": 72,
                "Column": 9,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 3838,
              "End": 3842,
              "Line": 72,
              "Column": 3,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "description",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "String",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 3867,
                "End": 3873,
                "Line": 73,
                "Column": 16,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 3854,
              "End": 3865,
              "Line": 73,
              "Column": 3,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "type",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "__Type",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 3882,
                "End": 3888,
                "Line": 74,
                "Column": 9,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 3876,
              "End": 3880,
              "Line": 74,
              "Column": 3,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "defaultValue",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "String",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 3906,
                "End": 3912,
                "Line": 75,
                "Column": 17,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 3892,
              "End": 3904,
              "Line": 75,
              "Column": 3,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          }
        ],
        "Types": null,
        "EnumValues": null,
        "Position": {
          "Start": 3821,
          "End": 3833,
          "Line": 71,
          "Column": 6,
          "Src": {
            "Name": "prelude.graphql",
            "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
            "BuiltIn": true
          }
        },
        "BuiltIn": true,
        "BeforeDescriptionComment": null,
        "AfterDescriptionComment": null,
        "EndOfDefinitionComment": null
      }
    ],
    "__Schema": [
      {
        "Kind": "OBJECT",
        "Description": "",
        "Name": "__Schema",
        "Directives": null,
        "Interfaces": null,
        "Fields": [
          {
            "Description": "",
            "Name": "description",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "String",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 2810,
                "End": 2816,
                "Line": 34,
                "Column": 16,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 2797,
              "End": 2808,
              "Line": 34,
              "Column": 3,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "types",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "",
              "Elem": {
                "NamedType": "__Type",
                "Elem": null,
                "NonNull": true,
                "Position": {
                  "Start": 2827,
                  "End": 2833,
                  "Line": 35,
                  "Column": 11,
                  "Src": {
                    "Name": "prelude.graphql",
                    "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                    "BuiltIn": true
                  }
                }
              },
              "NonNull": true,
              "Position": {
                "Start": 2827,
                "End": 2833,
                "Line": 35,
                "Column": 11,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 2819,
              "End": 2824,
              "Line": 35,
              "Column": 3,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "queryType",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "__Type",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 2850,
                "End": 2856,
                "Line": 36,
                "Column": 14,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 2839,
              "End": 2848,
              "Line": 36,
              "Column": 3,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "mutationType",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "__Type",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 2874,
                "End": 2880,
                "Line": 37,
                "Column": 17,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 2860,
              "End": 2872,
              "Line": 37,
              "Column": 3,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "subscriptionType",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "__Type",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 2901,
                "End": 2907,
                "Line": 38,
                "Column": 21,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 2883,
              "End": 2899,
              "Line": 38,
              "Column": 3,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "directives",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "",
              "Elem": {
                "NamedType": "__Directive",
                "Elem": null,
                "NonNull": true,
                "Position": {
                  "Start": 2923,
                  "End": 2934,
                  "Line": 39,
                  "Column": 16,
                  "Src": {
                    "Name": "prelude.graphql",
                    "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                    "BuiltIn": true
                  }
                }
              },
              "NonNull": true,
              "Position": {
                "Start": 2923,
                "End": 2934,
                "Line": 39,
                "Column": 16,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 2910,
              "End": 2920,
              "Line": 39,
              "Column": 3,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          }
        ],
        "Types": null,
        "EnumValues": null,
        "Position": {
          "Start": 2784,
          "End": 2792,
          "Line": 33,
          "Column": 6,
          "Src": {
            "Name": "prelude.graphql",
            "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
            "BuiltIn": true
          }
        },
        "BuiltIn": true,
        "BeforeDescriptionComment": null,
        "AfterDescriptionComment": null,
        "EndOfDefinitionComment": null
      }
    ],
    "__Type": [
      {
        "Kind": "OBJECT",
        "Description": "",
        "Name": "__Type",
        "Directives": null,
        "Interfaces": null,
        "Fields": [
          {
            "Description": "",
            "Name": "kind",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "__TypeKind",
              "Elem": null,
              "NonNull": true,
              "Position": {
                "Start": 2963,
                "End": 2973,
                "Line": 43,
                "Column": 9,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 2957,
              "End": 2961,
              "Line": 43,
              "Column": 3,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "name",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "String",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 2983,
                "End": 2989,
                "Line": 44,
                "Column": 9,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 2977,
              "End": 2981,
              "Line": 44,
              "Column": 3,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "description",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "String",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 3005,
                "End": 3011,
                "Line": 45,
                "Column": 16,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 2992,
              "End": 3003,
              "Line": 45,
              "Column": 3,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": null
          },
          {
            "Description": "",
            "Name": "fields",
            "Arguments": [
              {
                "Description": "",
                "Name": "includeDeprecated",
                "DefaultValue": {
                  "Raw": "false",
                  "Children": null,
                  "Kind": 5,
                  "Position": {
                    "Start": 3113,
                    "End": 3118,
                    "Line": 47,
                    "Column": 39,
                    "Src": {
                      "Name": "prelude.graphql",
                      "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                      "BuiltIn": true
                    }
                  },
                  "Comment": null,
                  "Definition": null,
                  "VariableDefinition": null,
                  "ExpectedType": null
                },
                "Type": {
                  "NamedType": "Boolean",
                  "Elem": null,
                  "NonNull": false,
                  "Position": {
                    "Start": 3103,
                    "End": 3110,
                    "Line": 47,
                    "Column": 29,
                    "Src": {
                      "Name": "prelude.graphql",
                      "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                      "BuiltIn": true
                    }
                  }
                },
                "Directives": null,
                "Position": {
                  "Start": 3084,
                  "End": 3101,
                  "Line": 47,
                  "Column": 10,
                  "Src": {
                    "Name": "prelude.graphql",
                    "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                    "BuiltIn": true
                  }
                },
                "BeforeDescriptionComment": null,
                "AfterDescriptionComment": null
              }
            ],
            "DefaultValue": null,
            "Type": {
              "NamedType": "",
              "Elem": {
                "NamedType": "__Field",
                "Elem": null,
                "NonNull": true,
                "Position": {
                  "Start": 3122,
                  "End": 3129,
                  "Line": 47,
                  "Column": 48,
                  "Src": {
                    "Name": "prelude.graphql",
                    "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                    "BuiltIn": true
                  }
                }
              },
              "NonNull": false,
              "Position": {
                "Start": 3122,
                "End": 3129,
                "Line": 47,
                "Column": 48,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 3077,
              "End": 3083,
              "Line": 47,
              "Column": 3,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": {
              "List": [
                {
                  "Value": "# must be non-null for OBJECT and INTERFACE, otherwise null.",
                  "Position": {
                    "Start": 3014,
                    "End": 3074,
                    "Line": 46,
                    "Column": 3,
                    "Src": {
                      "Name": "prelude.graphql",
                      "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                      "BuiltIn": true
                    }
                  }
                }
              ]
            }
          },
          {
            "Description": "",
            "Name": "interfaces",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "",
              "Elem": {
                "NamedType": "__Type",
                "Elem": null,
                "NonNull": true,
                "Position": {
                  "Start": 3210,
                  "End": 3216,
                  "Line": 49,
                  "Column": 16,
                  "Src": {
                    "Name": "prelude.graphql",
                    "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                    "BuiltIn": true
                  }
                }
              },
              "NonNull": false,
              "Position": {
                "Start": 3210,
                "End": 3216,
                "Line": 49,
                "Column": 16,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 3197,
              "End": 3207,
              "Line": 49,
              "Column": 3,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": {
              "List": [
                {
                  "Value": "# must be non-null for OBJECT and INTERFACE, otherwise null.",
                  "Position": {
                    "Start": 3134,
                    "End": 3194,
                    "Line": 48,
                    "Column": 3,
                    "Src": {
                      "Name": "prelude.graphql",
                      "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                      "BuiltIn": true
                    }
                  }
                }
              ]
            }
          },
          {
            "Description": "",
            "Name": "possibleTypes",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "",
              "Elem": {
                "NamedType": "__Type",
                "Elem": null,
                "NonNull": true,
                "Position": {
                  "Start": 3299,
                  "End": 3305,
                  "Line": 51,
                  "Column": 19,
                  "Src": {
                    "Name": "prelude.graphql",
                    "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                    "BuiltIn": true
                  }
                }
              },
              "NonNull": false,
              "Position": {
                "Start": 3299,
                "End": 3305,
                "Line": 51,
                "Column": 19,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 3283,
              "End": 3296,
              "Line": 51,
              "Column": 3,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": {
              "List": [
                {
                  "Value": "# must be non-null for INTERFACE and UNION, otherwise null.",
                  "Position": {
                    "Start": 3221,
                    "End": 3280,
                    "Line": 50,
                    "Column": 3,
                    "Src": {
                      "Name": "prelude.graphql",
                      "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                      "BuiltIn": true
                    }
                  }
                }
              ]
            }
          },
          {
            "Description": "",
            "Name": "enumValues",
            "Arguments": [
              {
                "Description": "",
                "Name": "includeDeprecated",
                "DefaultValue": {
                  "Raw": "false",
                  "Children": null,
                  "Kind": 5,
                  "Position": {
                    "Start": 3397,
                    "End": 3402,
                    "Line": 53,
                    "Column": 43,
                    "Src": {
                      "Name": "prelude.graphql",
                      "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                      "BuiltIn": true
                    }
                  },
                  "Comment": null,
                  "Definition": null,
                  "VariableDefinition": null,
                  "ExpectedType": null
                },
                "Type": {
                  "NamedType": "Boolean",
                  "Elem": null,
                  "NonNull": false,
                  "Position": {
                    "Start": 3387,
                    "End": 3394,
                    "Line": 53,
                    "Column": 33,
                    "Src": {
                      "Name": "prelude.graphql",
                      "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                      "BuiltIn": true
                    }
                  }
                },
                "Directives": null,
                "Position": {
                  "Start": 3368,
                  "End": 3385,
                  "Line": 53,
                  "Column": 14,
                  "Src": {
                    "Name": "prelude.graphql",
                    "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                    "BuiltIn": true
                  }
                },
                "BeforeDescriptionComment": null,
                "AfterDescriptionComment": null
              }
            ],
            "DefaultValue": null,
            "Type": {
              "NamedType": "",
              "Elem": {
                "NamedType": "__EnumValue",
                "Elem": null,
                "NonNull": true,
                "Position": {
                  "Start": 3406,
                  "End": 3417,
                  "Line": 53,
                  "Column": 52,
                  "Src": {
                    "Name": "prelude.graphql",
                    "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                    "BuiltIn": true
                  }
                }
              },
              "NonNull": false,
              "Position": {
                "Start": 3406,
                "End": 3417,
                "Line": 53,
                "Column": 52,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 3357,
              "End": 3367,
              "Line": 53,
              "Column": 3,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": {
              "List": [
                {
                  "Value": "# must be non-null for ENUM, otherwise null.",
                  "Position": {
                    "Start": 3310,
                    "End": 3354,
                    "Line": 52,
                    "Column": 3,
                    "Src": {
                      "Name": "prelude.graphql",
                      "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                      "BuiltIn": true
                    }
                  }
                }
              ]
            }
          },
          {
            "Description": "",
            "Name": "inputFields",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "",
              "Elem": {
                "NamedType": "__InputValue",
                "Elem": null,
                "NonNull": true,
                "Position": {
                  "Start": 3491,
                  "End": 3503,
                  "Line": 55,
                  "Column": 17,
                  "Src": {
                    "Name": "prelude.graphql",
                    "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                    "BuiltIn": true
                  }
                }
              },
              "NonNull": false,
              "Position": {
                "Start": 3491,
                "End": 3503,
                "Line": 55,
                "Column": 17,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 3477,
              "End": 3488,
              "Line": 55,
              "Column": 3,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": {
              "List": [
                {
                  "Value": "# must be non-null for INPUT_OBJECT, otherwise null.",
                  "Position": {
                    "Start": 3422,
                    "End": 3474,
                    "Line": 54,
                    "Column": 3,
                    "Src": {
                      "Name": "prelude.graphql",
                      "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                      "BuiltIn": true
                    }
                  }
                }
              ]
            }
          },
          {
            "Description": "",
            "Name": "ofType",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "__Type",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 3576,
                "End": 3582,
                "Line": 57,
                "Column": 11,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 3568,
              "End": 3574,
              "Line": 57,
              "Column": 3,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": {
              "List": [
                {
                  "Value": "# must be non-null for NON_NULL and LIST, otherwise null.",
                  "Position": {
                    "Start": 3508,
                    "End": 3565,
                    "Line": 56,
                    "Column": 3,
                    "Src": {
                      "Name": "prelude.graphql",
                      "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                      "BuiltIn": true
                    }
                  }
                }
              ]
            }
          },
          {
            "Description": "",
            "Name": "specifiedByURL",
            "Arguments": null,
            "DefaultValue": null,
            "Type": {
              "NamedType": "String",
              "Elem": null,
              "NonNull": false,
              "Position": {
                "Start": 3656,
                "End": 3662,
                "Line": 59,
                "Column": 19,
                "Src": {
                  "Name": "prelude.graphql",
                  "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                  "BuiltIn": true
                }
              }
            },
            "Directives": null,
            "Position": {
              "Start": 3640,
              "End": 3654,
              "Line": 59,
              "Column": 3,
              "Src": {
                "Name": "prelude.graphql",
                "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                "BuiltIn": true
              }
            },
            "BeforeDescriptionComment": null,
            "AfterDescriptionComment": {
              "List": [
                {
                  "Value": "# may be non-null for custom SCALAR, otherwise null.",
                  "Position": {
                    "Start": 3585,
                    "End": 3637,
                    "Line": 58,
                    "Column": 3,
                    "Src": {
                      "Name": "prelude.graphql",
                      "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
                      "BuiltIn": true
                    }
                  }
                }
              ]
            }
          }
        ],
        "Types": null,
        "EnumValues": null,
        "Position": {
          "Start": 2946,
          "End": 2952,
          "Line": 42,
          "Column": 6,
          "Src": {
            "Name": "prelude.graphql",
            "Input": "# This file defines all the implicitly declared types that are required by the graphql spec. It is implicitly included by calls to LoadSchema\n\n\"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\"\nscalar Int\n\n\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point).\"\nscalar Float\n\n\"The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\"\nscalar String\n\n\"The `Boolean` scalar type represents `true` or `false`.\"\nscalar Boolean\n\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \"4\") or integer (such as 4) input value will be accepted as an ID.\"\"\"\nscalar ID\n\n\"The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.\"\ndirective @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.\"\ndirective @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\n\n\"The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.\"\ndirective @deprecated(reason: String = \"No longer supported\") on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE\n\n\"The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.\"\ndirective @specifiedBy(url: String!) on SCALAR\n\n\"The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.\"\ndirective @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT\n\ntype __Schema {\n  description: String\n  types: [__Type!]!\n  queryType: __Type!\n  mutationType: __Type\n  subscriptionType: __Type\n  directives: [__Directive!]!\n}\n\ntype __Type {\n  kind: __TypeKind!\n  name: String\n  description: String\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  fields(includeDeprecated: Boolean = false): [__Field!]\n  # must be non-null for OBJECT and INTERFACE, otherwise null.\n  interfaces: [__Type!]\n  # must be non-null for INTERFACE and UNION, otherwise null.\n  possibleTypes: [__Type!]\n  # must be non-null for ENUM, otherwise null.\n  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]\n  # must be non-null for INPUT_OBJECT, otherwise null.\n  inputFields: [__InputValue!]\n  # must be non-null for NON_NULL and LIST, otherwise null.\n  ofType: __Type\n  # may be non-null for custom SCALAR, otherwise null.\n  specifiedByURL: String\n}\n\ntype __Field {\n  name: String!\n  description: String\n  args: [__InputValue!]!\n  type: __Type!\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\ntype __InputValue {\n  name: String!\n  description: String\n  type: __Type!\n  defaultValue: String\n}\n\ntype __EnumValue {\n  name: String!\n  description: String\n  isDeprecated: Boolean!\n  deprecationReason: String\n}\n\nenum __TypeKind {\n  SCALAR\n  OBJECT\n  INTERFACE\n  UNION\n  ENUM\n  INPUT_OBJECT\n  LIST\n  NON_NULL\n}\n\ntype __Directive {\n  name: String!\n  description: String\n  locations: [__DirectiveLocation!]!\n  args: [__InputValue!]!\n  isRepeatable: Boolean!\n}\n\nenum __DirectiveLocation {\n  QUERY\n  MUTATION\n  SUBSCRIPTION\n  FIELD\n  FRAGMENT_DEFINITION\n  FRAGMENT_SPREAD\n  INLINE_FRAGMENT\n  VARIABLE_DEFINITION\n  SCHEMA\n  SCALAR\n  OBJECT\n  FIELD_DEFINITION\n  ARGUMENT_DEFINITION\n  INTERFACE\n  UNION\n  ENUM\n  ENUM_VALUE\n  INPUT_OBJECT\n  INPUT_FIELD_DEFINITION\n}\n",
            "BuiltIn": true
          }
        },
        "BuiltIn": true,
        "BeforeDescriptionComment": null,
        "AfterDescriptionComment": null,
        "EndOfDefinitionComment": null
      }
    ]
  },
  "Implements": {},
  "Description": "",
  "Comment": null
}